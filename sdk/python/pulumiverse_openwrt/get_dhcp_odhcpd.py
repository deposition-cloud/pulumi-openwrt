# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetDhcpOdhcpdResult',
    'AwaitableGetDhcpOdhcpdResult',
    'get_dhcp_odhcpd',
    'get_dhcp_odhcpd_output',
]

@pulumi.output_type
class GetDhcpOdhcpdResult:
    """
    A collection of values returned by getDhcpOdhcpd.
    """
    def __init__(__self__, id=None, leasefile=None, leasetrigger=None, legacy=None, loglevel=None, maindhcp=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if leasefile and not isinstance(leasefile, str):
            raise TypeError("Expected argument 'leasefile' to be a str")
        pulumi.set(__self__, "leasefile", leasefile)
        if leasetrigger and not isinstance(leasetrigger, str):
            raise TypeError("Expected argument 'leasetrigger' to be a str")
        pulumi.set(__self__, "leasetrigger", leasetrigger)
        if legacy and not isinstance(legacy, bool):
            raise TypeError("Expected argument 'legacy' to be a bool")
        pulumi.set(__self__, "legacy", legacy)
        if loglevel and not isinstance(loglevel, int):
            raise TypeError("Expected argument 'loglevel' to be a int")
        pulumi.set(__self__, "loglevel", loglevel)
        if maindhcp and not isinstance(maindhcp, bool):
            raise TypeError("Expected argument 'maindhcp' to be a bool")
        pulumi.set(__self__, "maindhcp", maindhcp)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Name of the section. This name is only used when interacting with UCI directly.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def leasefile(self) -> str:
        """
        Location of the lease/hostfile for DHCPv4 and DHCPv6.
        """
        return pulumi.get(self, "leasefile")

    @property
    @pulumi.getter
    def leasetrigger(self) -> str:
        """
        Location of the lease trigger script.
        """
        return pulumi.get(self, "leasetrigger")

    @property
    @pulumi.getter
    def legacy(self) -> bool:
        """
        Enable DHCPv4 if the 'dhcp' section constains a `start` option, but no `dhcpv4` option set.
        """
        return pulumi.get(self, "legacy")

    @property
    @pulumi.getter
    def loglevel(self) -> int:
        """
        Syslog level priority (0-7).
        """
        return pulumi.get(self, "loglevel")

    @property
    @pulumi.getter
    def maindhcp(self) -> bool:
        """
        Use odhcpd as the main DHCPv4 service.
        """
        return pulumi.get(self, "maindhcp")


class AwaitableGetDhcpOdhcpdResult(GetDhcpOdhcpdResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDhcpOdhcpdResult(
            id=self.id,
            leasefile=self.leasefile,
            leasetrigger=self.leasetrigger,
            legacy=self.legacy,
            loglevel=self.loglevel,
            maindhcp=self.maindhcp)


def get_dhcp_odhcpd(id: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDhcpOdhcpdResult:
    """
    An embedded DHCP/DHCPv6/RA server & NDP relay.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_openwrt as openwrt

    testing = openwrt.get_dhcp_odhcpd(id="testing")
    ```


    :param str id: Name of the section. This name is only used when interacting with UCI directly.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('openwrt:index/getDhcpOdhcpd:getDhcpOdhcpd', __args__, opts=opts, typ=GetDhcpOdhcpdResult).value

    return AwaitableGetDhcpOdhcpdResult(
        id=pulumi.get(__ret__, 'id'),
        leasefile=pulumi.get(__ret__, 'leasefile'),
        leasetrigger=pulumi.get(__ret__, 'leasetrigger'),
        legacy=pulumi.get(__ret__, 'legacy'),
        loglevel=pulumi.get(__ret__, 'loglevel'),
        maindhcp=pulumi.get(__ret__, 'maindhcp'))


@_utilities.lift_output_func(get_dhcp_odhcpd)
def get_dhcp_odhcpd_output(id: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDhcpOdhcpdResult]:
    """
    An embedded DHCP/DHCPv6/RA server & NDP relay.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_openwrt as openwrt

    testing = openwrt.get_dhcp_odhcpd(id="testing")
    ```


    :param str id: Name of the section. This name is only used when interacting with UCI directly.
    """
    ...

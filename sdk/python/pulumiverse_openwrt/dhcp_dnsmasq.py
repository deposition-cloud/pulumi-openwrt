# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['DhcpDnsmasqArgs', 'DhcpDnsmasq']

@pulumi.input_type
class DhcpDnsmasqArgs:
    def __init__(__self__, *,
                 authoritative: Optional[pulumi.Input[bool]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 domainneeded: Optional[pulumi.Input[bool]] = None,
                 ednspacket_max: Optional[pulumi.Input[int]] = None,
                 expandhosts: Optional[pulumi.Input[bool]] = None,
                 leasefile: Optional[pulumi.Input[str]] = None,
                 local: Optional[pulumi.Input[str]] = None,
                 localise_queries: Optional[pulumi.Input[bool]] = None,
                 localservice: Optional[pulumi.Input[bool]] = None,
                 readethers: Optional[pulumi.Input[bool]] = None,
                 rebind_localhost: Optional[pulumi.Input[bool]] = None,
                 rebind_protection: Optional[pulumi.Input[bool]] = None,
                 resolvfile: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DhcpDnsmasq resource.
        :param pulumi.Input[bool] authoritative: Force dnsmasq into authoritative mode. This speeds up DHCP leasing. Used if this is the only server on the network.
        :param pulumi.Input[str] domain: DNS domain handed out to DHCP clients.
        :param pulumi.Input[bool] domainneeded: Never forward queries for plain names, without dots or domain parts, to upstream nameservers.
        :param pulumi.Input[int] ednspacket_max: Specify the largest EDNS.0 UDP packet which is supported by the DNS forwarder.
        :param pulumi.Input[bool] expandhosts: Never forward queries for plain names, without dots or domain parts, to upstream nameservers.
        :param pulumi.Input[str] leasefile: Store DHCP leases in this file.
        :param pulumi.Input[str] local: Look up DNS entries for this domain from `/etc/hosts`.
        :param pulumi.Input[bool] localise_queries: Choose IP address to match the incoming interface if multiple addresses are assigned to a host name in `/etc/hosts`.
        :param pulumi.Input[bool] localservice: Accept DNS queries only from hosts whose address is on a local subnet.
        :param pulumi.Input[bool] readethers: Read static lease entries from `/etc/ethers`, re-read on SIGHUP.
        :param pulumi.Input[bool] rebind_localhost: Allows upstream 127.0.0.0/8 responses, required for DNS based blocklist services. Only takes effect if rebind protection is enabled.
        :param pulumi.Input[bool] rebind_protection: Enables DNS rebind attack protection by discarding upstream RFC1918 responses.
        :param pulumi.Input[str] resolvfile: Specifies an alternative resolv file.
        """
        if authoritative is not None:
            pulumi.set(__self__, "authoritative", authoritative)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if domainneeded is not None:
            pulumi.set(__self__, "domainneeded", domainneeded)
        if ednspacket_max is not None:
            pulumi.set(__self__, "ednspacket_max", ednspacket_max)
        if expandhosts is not None:
            pulumi.set(__self__, "expandhosts", expandhosts)
        if leasefile is not None:
            pulumi.set(__self__, "leasefile", leasefile)
        if local is not None:
            pulumi.set(__self__, "local", local)
        if localise_queries is not None:
            pulumi.set(__self__, "localise_queries", localise_queries)
        if localservice is not None:
            pulumi.set(__self__, "localservice", localservice)
        if readethers is not None:
            pulumi.set(__self__, "readethers", readethers)
        if rebind_localhost is not None:
            pulumi.set(__self__, "rebind_localhost", rebind_localhost)
        if rebind_protection is not None:
            pulumi.set(__self__, "rebind_protection", rebind_protection)
        if resolvfile is not None:
            pulumi.set(__self__, "resolvfile", resolvfile)

    @property
    @pulumi.getter
    def authoritative(self) -> Optional[pulumi.Input[bool]]:
        """
        Force dnsmasq into authoritative mode. This speeds up DHCP leasing. Used if this is the only server on the network.
        """
        return pulumi.get(self, "authoritative")

    @authoritative.setter
    def authoritative(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authoritative", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        DNS domain handed out to DHCP clients.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def domainneeded(self) -> Optional[pulumi.Input[bool]]:
        """
        Never forward queries for plain names, without dots or domain parts, to upstream nameservers.
        """
        return pulumi.get(self, "domainneeded")

    @domainneeded.setter
    def domainneeded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "domainneeded", value)

    @property
    @pulumi.getter(name="ednspacketMax")
    def ednspacket_max(self) -> Optional[pulumi.Input[int]]:
        """
        Specify the largest EDNS.0 UDP packet which is supported by the DNS forwarder.
        """
        return pulumi.get(self, "ednspacket_max")

    @ednspacket_max.setter
    def ednspacket_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ednspacket_max", value)

    @property
    @pulumi.getter
    def expandhosts(self) -> Optional[pulumi.Input[bool]]:
        """
        Never forward queries for plain names, without dots or domain parts, to upstream nameservers.
        """
        return pulumi.get(self, "expandhosts")

    @expandhosts.setter
    def expandhosts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "expandhosts", value)

    @property
    @pulumi.getter
    def leasefile(self) -> Optional[pulumi.Input[str]]:
        """
        Store DHCP leases in this file.
        """
        return pulumi.get(self, "leasefile")

    @leasefile.setter
    def leasefile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "leasefile", value)

    @property
    @pulumi.getter
    def local(self) -> Optional[pulumi.Input[str]]:
        """
        Look up DNS entries for this domain from `/etc/hosts`.
        """
        return pulumi.get(self, "local")

    @local.setter
    def local(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local", value)

    @property
    @pulumi.getter(name="localiseQueries")
    def localise_queries(self) -> Optional[pulumi.Input[bool]]:
        """
        Choose IP address to match the incoming interface if multiple addresses are assigned to a host name in `/etc/hosts`.
        """
        return pulumi.get(self, "localise_queries")

    @localise_queries.setter
    def localise_queries(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "localise_queries", value)

    @property
    @pulumi.getter
    def localservice(self) -> Optional[pulumi.Input[bool]]:
        """
        Accept DNS queries only from hosts whose address is on a local subnet.
        """
        return pulumi.get(self, "localservice")

    @localservice.setter
    def localservice(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "localservice", value)

    @property
    @pulumi.getter
    def readethers(self) -> Optional[pulumi.Input[bool]]:
        """
        Read static lease entries from `/etc/ethers`, re-read on SIGHUP.
        """
        return pulumi.get(self, "readethers")

    @readethers.setter
    def readethers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "readethers", value)

    @property
    @pulumi.getter(name="rebindLocalhost")
    def rebind_localhost(self) -> Optional[pulumi.Input[bool]]:
        """
        Allows upstream 127.0.0.0/8 responses, required for DNS based blocklist services. Only takes effect if rebind protection is enabled.
        """
        return pulumi.get(self, "rebind_localhost")

    @rebind_localhost.setter
    def rebind_localhost(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "rebind_localhost", value)

    @property
    @pulumi.getter(name="rebindProtection")
    def rebind_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables DNS rebind attack protection by discarding upstream RFC1918 responses.
        """
        return pulumi.get(self, "rebind_protection")

    @rebind_protection.setter
    def rebind_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "rebind_protection", value)

    @property
    @pulumi.getter
    def resolvfile(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies an alternative resolv file.
        """
        return pulumi.get(self, "resolvfile")

    @resolvfile.setter
    def resolvfile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolvfile", value)


@pulumi.input_type
class _DhcpDnsmasqState:
    def __init__(__self__, *,
                 authoritative: Optional[pulumi.Input[bool]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 domainneeded: Optional[pulumi.Input[bool]] = None,
                 ednspacket_max: Optional[pulumi.Input[int]] = None,
                 expandhosts: Optional[pulumi.Input[bool]] = None,
                 leasefile: Optional[pulumi.Input[str]] = None,
                 local: Optional[pulumi.Input[str]] = None,
                 localise_queries: Optional[pulumi.Input[bool]] = None,
                 localservice: Optional[pulumi.Input[bool]] = None,
                 readethers: Optional[pulumi.Input[bool]] = None,
                 rebind_localhost: Optional[pulumi.Input[bool]] = None,
                 rebind_protection: Optional[pulumi.Input[bool]] = None,
                 resolvfile: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DhcpDnsmasq resources.
        :param pulumi.Input[bool] authoritative: Force dnsmasq into authoritative mode. This speeds up DHCP leasing. Used if this is the only server on the network.
        :param pulumi.Input[str] domain: DNS domain handed out to DHCP clients.
        :param pulumi.Input[bool] domainneeded: Never forward queries for plain names, without dots or domain parts, to upstream nameservers.
        :param pulumi.Input[int] ednspacket_max: Specify the largest EDNS.0 UDP packet which is supported by the DNS forwarder.
        :param pulumi.Input[bool] expandhosts: Never forward queries for plain names, without dots or domain parts, to upstream nameservers.
        :param pulumi.Input[str] leasefile: Store DHCP leases in this file.
        :param pulumi.Input[str] local: Look up DNS entries for this domain from `/etc/hosts`.
        :param pulumi.Input[bool] localise_queries: Choose IP address to match the incoming interface if multiple addresses are assigned to a host name in `/etc/hosts`.
        :param pulumi.Input[bool] localservice: Accept DNS queries only from hosts whose address is on a local subnet.
        :param pulumi.Input[bool] readethers: Read static lease entries from `/etc/ethers`, re-read on SIGHUP.
        :param pulumi.Input[bool] rebind_localhost: Allows upstream 127.0.0.0/8 responses, required for DNS based blocklist services. Only takes effect if rebind protection is enabled.
        :param pulumi.Input[bool] rebind_protection: Enables DNS rebind attack protection by discarding upstream RFC1918 responses.
        :param pulumi.Input[str] resolvfile: Specifies an alternative resolv file.
        """
        if authoritative is not None:
            pulumi.set(__self__, "authoritative", authoritative)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if domainneeded is not None:
            pulumi.set(__self__, "domainneeded", domainneeded)
        if ednspacket_max is not None:
            pulumi.set(__self__, "ednspacket_max", ednspacket_max)
        if expandhosts is not None:
            pulumi.set(__self__, "expandhosts", expandhosts)
        if leasefile is not None:
            pulumi.set(__self__, "leasefile", leasefile)
        if local is not None:
            pulumi.set(__self__, "local", local)
        if localise_queries is not None:
            pulumi.set(__self__, "localise_queries", localise_queries)
        if localservice is not None:
            pulumi.set(__self__, "localservice", localservice)
        if readethers is not None:
            pulumi.set(__self__, "readethers", readethers)
        if rebind_localhost is not None:
            pulumi.set(__self__, "rebind_localhost", rebind_localhost)
        if rebind_protection is not None:
            pulumi.set(__self__, "rebind_protection", rebind_protection)
        if resolvfile is not None:
            pulumi.set(__self__, "resolvfile", resolvfile)

    @property
    @pulumi.getter
    def authoritative(self) -> Optional[pulumi.Input[bool]]:
        """
        Force dnsmasq into authoritative mode. This speeds up DHCP leasing. Used if this is the only server on the network.
        """
        return pulumi.get(self, "authoritative")

    @authoritative.setter
    def authoritative(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authoritative", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        DNS domain handed out to DHCP clients.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def domainneeded(self) -> Optional[pulumi.Input[bool]]:
        """
        Never forward queries for plain names, without dots or domain parts, to upstream nameservers.
        """
        return pulumi.get(self, "domainneeded")

    @domainneeded.setter
    def domainneeded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "domainneeded", value)

    @property
    @pulumi.getter(name="ednspacketMax")
    def ednspacket_max(self) -> Optional[pulumi.Input[int]]:
        """
        Specify the largest EDNS.0 UDP packet which is supported by the DNS forwarder.
        """
        return pulumi.get(self, "ednspacket_max")

    @ednspacket_max.setter
    def ednspacket_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ednspacket_max", value)

    @property
    @pulumi.getter
    def expandhosts(self) -> Optional[pulumi.Input[bool]]:
        """
        Never forward queries for plain names, without dots or domain parts, to upstream nameservers.
        """
        return pulumi.get(self, "expandhosts")

    @expandhosts.setter
    def expandhosts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "expandhosts", value)

    @property
    @pulumi.getter
    def leasefile(self) -> Optional[pulumi.Input[str]]:
        """
        Store DHCP leases in this file.
        """
        return pulumi.get(self, "leasefile")

    @leasefile.setter
    def leasefile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "leasefile", value)

    @property
    @pulumi.getter
    def local(self) -> Optional[pulumi.Input[str]]:
        """
        Look up DNS entries for this domain from `/etc/hosts`.
        """
        return pulumi.get(self, "local")

    @local.setter
    def local(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local", value)

    @property
    @pulumi.getter(name="localiseQueries")
    def localise_queries(self) -> Optional[pulumi.Input[bool]]:
        """
        Choose IP address to match the incoming interface if multiple addresses are assigned to a host name in `/etc/hosts`.
        """
        return pulumi.get(self, "localise_queries")

    @localise_queries.setter
    def localise_queries(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "localise_queries", value)

    @property
    @pulumi.getter
    def localservice(self) -> Optional[pulumi.Input[bool]]:
        """
        Accept DNS queries only from hosts whose address is on a local subnet.
        """
        return pulumi.get(self, "localservice")

    @localservice.setter
    def localservice(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "localservice", value)

    @property
    @pulumi.getter
    def readethers(self) -> Optional[pulumi.Input[bool]]:
        """
        Read static lease entries from `/etc/ethers`, re-read on SIGHUP.
        """
        return pulumi.get(self, "readethers")

    @readethers.setter
    def readethers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "readethers", value)

    @property
    @pulumi.getter(name="rebindLocalhost")
    def rebind_localhost(self) -> Optional[pulumi.Input[bool]]:
        """
        Allows upstream 127.0.0.0/8 responses, required for DNS based blocklist services. Only takes effect if rebind protection is enabled.
        """
        return pulumi.get(self, "rebind_localhost")

    @rebind_localhost.setter
    def rebind_localhost(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "rebind_localhost", value)

    @property
    @pulumi.getter(name="rebindProtection")
    def rebind_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables DNS rebind attack protection by discarding upstream RFC1918 responses.
        """
        return pulumi.get(self, "rebind_protection")

    @rebind_protection.setter
    def rebind_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "rebind_protection", value)

    @property
    @pulumi.getter
    def resolvfile(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies an alternative resolv file.
        """
        return pulumi.get(self, "resolvfile")

    @resolvfile.setter
    def resolvfile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolvfile", value)


class DhcpDnsmasq(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authoritative: Optional[pulumi.Input[bool]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 domainneeded: Optional[pulumi.Input[bool]] = None,
                 ednspacket_max: Optional[pulumi.Input[int]] = None,
                 expandhosts: Optional[pulumi.Input[bool]] = None,
                 leasefile: Optional[pulumi.Input[str]] = None,
                 local: Optional[pulumi.Input[str]] = None,
                 localise_queries: Optional[pulumi.Input[bool]] = None,
                 localservice: Optional[pulumi.Input[bool]] = None,
                 readethers: Optional[pulumi.Input[bool]] = None,
                 rebind_localhost: Optional[pulumi.Input[bool]] = None,
                 rebind_protection: Optional[pulumi.Input[bool]] = None,
                 resolvfile: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        A lightweight DHCP and caching DNS server.

        ## Import

        Find the Terraform id from LuCI's JSON-RPC API. One way to find this information is with `curl` and `jq`# curl \\

         --data '{"id"0, "method""foreach", "params"["dhcp", "dnsmasq"]}' \\

         http://192.168.1.1/cgi-bin/luci/rpc/uci?auth=$AUTH_TOKEN \\

         | jq '.result | map({terraformId.[".name"]})' # This command will output something like# [

         {

         "terraformId""cfg123456",

         } ] # We'd then use the information to import the appropriate resource

        ```sh
         $ pulumi import openwrt:index/dhcpDnsmasq:DhcpDnsmasq this cfg123456
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] authoritative: Force dnsmasq into authoritative mode. This speeds up DHCP leasing. Used if this is the only server on the network.
        :param pulumi.Input[str] domain: DNS domain handed out to DHCP clients.
        :param pulumi.Input[bool] domainneeded: Never forward queries for plain names, without dots or domain parts, to upstream nameservers.
        :param pulumi.Input[int] ednspacket_max: Specify the largest EDNS.0 UDP packet which is supported by the DNS forwarder.
        :param pulumi.Input[bool] expandhosts: Never forward queries for plain names, without dots or domain parts, to upstream nameservers.
        :param pulumi.Input[str] leasefile: Store DHCP leases in this file.
        :param pulumi.Input[str] local: Look up DNS entries for this domain from `/etc/hosts`.
        :param pulumi.Input[bool] localise_queries: Choose IP address to match the incoming interface if multiple addresses are assigned to a host name in `/etc/hosts`.
        :param pulumi.Input[bool] localservice: Accept DNS queries only from hosts whose address is on a local subnet.
        :param pulumi.Input[bool] readethers: Read static lease entries from `/etc/ethers`, re-read on SIGHUP.
        :param pulumi.Input[bool] rebind_localhost: Allows upstream 127.0.0.0/8 responses, required for DNS based blocklist services. Only takes effect if rebind protection is enabled.
        :param pulumi.Input[bool] rebind_protection: Enables DNS rebind attack protection by discarding upstream RFC1918 responses.
        :param pulumi.Input[str] resolvfile: Specifies an alternative resolv file.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[DhcpDnsmasqArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A lightweight DHCP and caching DNS server.

        ## Import

        Find the Terraform id from LuCI's JSON-RPC API. One way to find this information is with `curl` and `jq`# curl \\

         --data '{"id"0, "method""foreach", "params"["dhcp", "dnsmasq"]}' \\

         http://192.168.1.1/cgi-bin/luci/rpc/uci?auth=$AUTH_TOKEN \\

         | jq '.result | map({terraformId.[".name"]})' # This command will output something like# [

         {

         "terraformId""cfg123456",

         } ] # We'd then use the information to import the appropriate resource

        ```sh
         $ pulumi import openwrt:index/dhcpDnsmasq:DhcpDnsmasq this cfg123456
        ```

        :param str resource_name: The name of the resource.
        :param DhcpDnsmasqArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DhcpDnsmasqArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authoritative: Optional[pulumi.Input[bool]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 domainneeded: Optional[pulumi.Input[bool]] = None,
                 ednspacket_max: Optional[pulumi.Input[int]] = None,
                 expandhosts: Optional[pulumi.Input[bool]] = None,
                 leasefile: Optional[pulumi.Input[str]] = None,
                 local: Optional[pulumi.Input[str]] = None,
                 localise_queries: Optional[pulumi.Input[bool]] = None,
                 localservice: Optional[pulumi.Input[bool]] = None,
                 readethers: Optional[pulumi.Input[bool]] = None,
                 rebind_localhost: Optional[pulumi.Input[bool]] = None,
                 rebind_protection: Optional[pulumi.Input[bool]] = None,
                 resolvfile: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DhcpDnsmasqArgs.__new__(DhcpDnsmasqArgs)

            __props__.__dict__["authoritative"] = authoritative
            __props__.__dict__["domain"] = domain
            __props__.__dict__["domainneeded"] = domainneeded
            __props__.__dict__["ednspacket_max"] = ednspacket_max
            __props__.__dict__["expandhosts"] = expandhosts
            __props__.__dict__["leasefile"] = leasefile
            __props__.__dict__["local"] = local
            __props__.__dict__["localise_queries"] = localise_queries
            __props__.__dict__["localservice"] = localservice
            __props__.__dict__["readethers"] = readethers
            __props__.__dict__["rebind_localhost"] = rebind_localhost
            __props__.__dict__["rebind_protection"] = rebind_protection
            __props__.__dict__["resolvfile"] = resolvfile
        super(DhcpDnsmasq, __self__).__init__(
            'openwrt:index/dhcpDnsmasq:DhcpDnsmasq',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            authoritative: Optional[pulumi.Input[bool]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            domainneeded: Optional[pulumi.Input[bool]] = None,
            ednspacket_max: Optional[pulumi.Input[int]] = None,
            expandhosts: Optional[pulumi.Input[bool]] = None,
            leasefile: Optional[pulumi.Input[str]] = None,
            local: Optional[pulumi.Input[str]] = None,
            localise_queries: Optional[pulumi.Input[bool]] = None,
            localservice: Optional[pulumi.Input[bool]] = None,
            readethers: Optional[pulumi.Input[bool]] = None,
            rebind_localhost: Optional[pulumi.Input[bool]] = None,
            rebind_protection: Optional[pulumi.Input[bool]] = None,
            resolvfile: Optional[pulumi.Input[str]] = None) -> 'DhcpDnsmasq':
        """
        Get an existing DhcpDnsmasq resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] authoritative: Force dnsmasq into authoritative mode. This speeds up DHCP leasing. Used if this is the only server on the network.
        :param pulumi.Input[str] domain: DNS domain handed out to DHCP clients.
        :param pulumi.Input[bool] domainneeded: Never forward queries for plain names, without dots or domain parts, to upstream nameservers.
        :param pulumi.Input[int] ednspacket_max: Specify the largest EDNS.0 UDP packet which is supported by the DNS forwarder.
        :param pulumi.Input[bool] expandhosts: Never forward queries for plain names, without dots or domain parts, to upstream nameservers.
        :param pulumi.Input[str] leasefile: Store DHCP leases in this file.
        :param pulumi.Input[str] local: Look up DNS entries for this domain from `/etc/hosts`.
        :param pulumi.Input[bool] localise_queries: Choose IP address to match the incoming interface if multiple addresses are assigned to a host name in `/etc/hosts`.
        :param pulumi.Input[bool] localservice: Accept DNS queries only from hosts whose address is on a local subnet.
        :param pulumi.Input[bool] readethers: Read static lease entries from `/etc/ethers`, re-read on SIGHUP.
        :param pulumi.Input[bool] rebind_localhost: Allows upstream 127.0.0.0/8 responses, required for DNS based blocklist services. Only takes effect if rebind protection is enabled.
        :param pulumi.Input[bool] rebind_protection: Enables DNS rebind attack protection by discarding upstream RFC1918 responses.
        :param pulumi.Input[str] resolvfile: Specifies an alternative resolv file.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DhcpDnsmasqState.__new__(_DhcpDnsmasqState)

        __props__.__dict__["authoritative"] = authoritative
        __props__.__dict__["domain"] = domain
        __props__.__dict__["domainneeded"] = domainneeded
        __props__.__dict__["ednspacket_max"] = ednspacket_max
        __props__.__dict__["expandhosts"] = expandhosts
        __props__.__dict__["leasefile"] = leasefile
        __props__.__dict__["local"] = local
        __props__.__dict__["localise_queries"] = localise_queries
        __props__.__dict__["localservice"] = localservice
        __props__.__dict__["readethers"] = readethers
        __props__.__dict__["rebind_localhost"] = rebind_localhost
        __props__.__dict__["rebind_protection"] = rebind_protection
        __props__.__dict__["resolvfile"] = resolvfile
        return DhcpDnsmasq(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def authoritative(self) -> pulumi.Output[bool]:
        """
        Force dnsmasq into authoritative mode. This speeds up DHCP leasing. Used if this is the only server on the network.
        """
        return pulumi.get(self, "authoritative")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        DNS domain handed out to DHCP clients.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def domainneeded(self) -> pulumi.Output[bool]:
        """
        Never forward queries for plain names, without dots or domain parts, to upstream nameservers.
        """
        return pulumi.get(self, "domainneeded")

    @property
    @pulumi.getter(name="ednspacketMax")
    def ednspacket_max(self) -> pulumi.Output[int]:
        """
        Specify the largest EDNS.0 UDP packet which is supported by the DNS forwarder.
        """
        return pulumi.get(self, "ednspacket_max")

    @property
    @pulumi.getter
    def expandhosts(self) -> pulumi.Output[bool]:
        """
        Never forward queries for plain names, without dots or domain parts, to upstream nameservers.
        """
        return pulumi.get(self, "expandhosts")

    @property
    @pulumi.getter
    def leasefile(self) -> pulumi.Output[str]:
        """
        Store DHCP leases in this file.
        """
        return pulumi.get(self, "leasefile")

    @property
    @pulumi.getter
    def local(self) -> pulumi.Output[str]:
        """
        Look up DNS entries for this domain from `/etc/hosts`.
        """
        return pulumi.get(self, "local")

    @property
    @pulumi.getter(name="localiseQueries")
    def localise_queries(self) -> pulumi.Output[bool]:
        """
        Choose IP address to match the incoming interface if multiple addresses are assigned to a host name in `/etc/hosts`.
        """
        return pulumi.get(self, "localise_queries")

    @property
    @pulumi.getter
    def localservice(self) -> pulumi.Output[bool]:
        """
        Accept DNS queries only from hosts whose address is on a local subnet.
        """
        return pulumi.get(self, "localservice")

    @property
    @pulumi.getter
    def readethers(self) -> pulumi.Output[bool]:
        """
        Read static lease entries from `/etc/ethers`, re-read on SIGHUP.
        """
        return pulumi.get(self, "readethers")

    @property
    @pulumi.getter(name="rebindLocalhost")
    def rebind_localhost(self) -> pulumi.Output[bool]:
        """
        Allows upstream 127.0.0.0/8 responses, required for DNS based blocklist services. Only takes effect if rebind protection is enabled.
        """
        return pulumi.get(self, "rebind_localhost")

    @property
    @pulumi.getter(name="rebindProtection")
    def rebind_protection(self) -> pulumi.Output[bool]:
        """
        Enables DNS rebind attack protection by discarding upstream RFC1918 responses.
        """
        return pulumi.get(self, "rebind_protection")

    @property
    @pulumi.getter
    def resolvfile(self) -> pulumi.Output[str]:
        """
        Specifies an alternative resolv file.
        """
        return pulumi.get(self, "resolvfile")


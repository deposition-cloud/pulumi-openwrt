# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['NetworkSwitchArgs', 'NetworkSwitch']

@pulumi.input_type
class NetworkSwitchArgs:
    def __init__(__self__, *,
                 enable_mirror_rx: Optional[pulumi.Input[bool]] = None,
                 enable_mirror_tx: Optional[pulumi.Input[bool]] = None,
                 enable_vlan: Optional[pulumi.Input[bool]] = None,
                 mirror_monitor_port: Optional[pulumi.Input[int]] = None,
                 mirror_source_port: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 reset: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a NetworkSwitch resource.
        :param pulumi.Input[bool] enable_mirror_rx: Mirror received packets from the `mirror_source_port` to the `mirror_monitor_port`.
        :param pulumi.Input[bool] enable_mirror_tx: Mirror transmitted packets from the `mirror_source_port` to the `mirror_monitor_port`.
        :param pulumi.Input[bool] enable_vlan: Enables VLAN functionality.
        :param pulumi.Input[int] mirror_monitor_port: Switch port to which packets are mirrored.
        :param pulumi.Input[int] mirror_source_port: Switch port from which packets are mirrored.
        :param pulumi.Input[str] name: Name of the switch. This name is what is shown in LuCI or the `name` field in Terraform. This is not the UCI config
               name.
        :param pulumi.Input[bool] reset: Reset the switch.
        """
        if enable_mirror_rx is not None:
            pulumi.set(__self__, "enable_mirror_rx", enable_mirror_rx)
        if enable_mirror_tx is not None:
            pulumi.set(__self__, "enable_mirror_tx", enable_mirror_tx)
        if enable_vlan is not None:
            pulumi.set(__self__, "enable_vlan", enable_vlan)
        if mirror_monitor_port is not None:
            pulumi.set(__self__, "mirror_monitor_port", mirror_monitor_port)
        if mirror_source_port is not None:
            pulumi.set(__self__, "mirror_source_port", mirror_source_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if reset is not None:
            pulumi.set(__self__, "reset", reset)

    @property
    @pulumi.getter(name="enableMirrorRx")
    def enable_mirror_rx(self) -> Optional[pulumi.Input[bool]]:
        """
        Mirror received packets from the `mirror_source_port` to the `mirror_monitor_port`.
        """
        return pulumi.get(self, "enable_mirror_rx")

    @enable_mirror_rx.setter
    def enable_mirror_rx(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_mirror_rx", value)

    @property
    @pulumi.getter(name="enableMirrorTx")
    def enable_mirror_tx(self) -> Optional[pulumi.Input[bool]]:
        """
        Mirror transmitted packets from the `mirror_source_port` to the `mirror_monitor_port`.
        """
        return pulumi.get(self, "enable_mirror_tx")

    @enable_mirror_tx.setter
    def enable_mirror_tx(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_mirror_tx", value)

    @property
    @pulumi.getter(name="enableVlan")
    def enable_vlan(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables VLAN functionality.
        """
        return pulumi.get(self, "enable_vlan")

    @enable_vlan.setter
    def enable_vlan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_vlan", value)

    @property
    @pulumi.getter(name="mirrorMonitorPort")
    def mirror_monitor_port(self) -> Optional[pulumi.Input[int]]:
        """
        Switch port to which packets are mirrored.
        """
        return pulumi.get(self, "mirror_monitor_port")

    @mirror_monitor_port.setter
    def mirror_monitor_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mirror_monitor_port", value)

    @property
    @pulumi.getter(name="mirrorSourcePort")
    def mirror_source_port(self) -> Optional[pulumi.Input[int]]:
        """
        Switch port from which packets are mirrored.
        """
        return pulumi.get(self, "mirror_source_port")

    @mirror_source_port.setter
    def mirror_source_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mirror_source_port", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the switch. This name is what is shown in LuCI or the `name` field in Terraform. This is not the UCI config
        name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def reset(self) -> Optional[pulumi.Input[bool]]:
        """
        Reset the switch.
        """
        return pulumi.get(self, "reset")

    @reset.setter
    def reset(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reset", value)


@pulumi.input_type
class _NetworkSwitchState:
    def __init__(__self__, *,
                 enable_mirror_rx: Optional[pulumi.Input[bool]] = None,
                 enable_mirror_tx: Optional[pulumi.Input[bool]] = None,
                 enable_vlan: Optional[pulumi.Input[bool]] = None,
                 mirror_monitor_port: Optional[pulumi.Input[int]] = None,
                 mirror_source_port: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 reset: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering NetworkSwitch resources.
        :param pulumi.Input[bool] enable_mirror_rx: Mirror received packets from the `mirror_source_port` to the `mirror_monitor_port`.
        :param pulumi.Input[bool] enable_mirror_tx: Mirror transmitted packets from the `mirror_source_port` to the `mirror_monitor_port`.
        :param pulumi.Input[bool] enable_vlan: Enables VLAN functionality.
        :param pulumi.Input[int] mirror_monitor_port: Switch port to which packets are mirrored.
        :param pulumi.Input[int] mirror_source_port: Switch port from which packets are mirrored.
        :param pulumi.Input[str] name: Name of the switch. This name is what is shown in LuCI or the `name` field in Terraform. This is not the UCI config
               name.
        :param pulumi.Input[bool] reset: Reset the switch.
        """
        if enable_mirror_rx is not None:
            pulumi.set(__self__, "enable_mirror_rx", enable_mirror_rx)
        if enable_mirror_tx is not None:
            pulumi.set(__self__, "enable_mirror_tx", enable_mirror_tx)
        if enable_vlan is not None:
            pulumi.set(__self__, "enable_vlan", enable_vlan)
        if mirror_monitor_port is not None:
            pulumi.set(__self__, "mirror_monitor_port", mirror_monitor_port)
        if mirror_source_port is not None:
            pulumi.set(__self__, "mirror_source_port", mirror_source_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if reset is not None:
            pulumi.set(__self__, "reset", reset)

    @property
    @pulumi.getter(name="enableMirrorRx")
    def enable_mirror_rx(self) -> Optional[pulumi.Input[bool]]:
        """
        Mirror received packets from the `mirror_source_port` to the `mirror_monitor_port`.
        """
        return pulumi.get(self, "enable_mirror_rx")

    @enable_mirror_rx.setter
    def enable_mirror_rx(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_mirror_rx", value)

    @property
    @pulumi.getter(name="enableMirrorTx")
    def enable_mirror_tx(self) -> Optional[pulumi.Input[bool]]:
        """
        Mirror transmitted packets from the `mirror_source_port` to the `mirror_monitor_port`.
        """
        return pulumi.get(self, "enable_mirror_tx")

    @enable_mirror_tx.setter
    def enable_mirror_tx(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_mirror_tx", value)

    @property
    @pulumi.getter(name="enableVlan")
    def enable_vlan(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables VLAN functionality.
        """
        return pulumi.get(self, "enable_vlan")

    @enable_vlan.setter
    def enable_vlan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_vlan", value)

    @property
    @pulumi.getter(name="mirrorMonitorPort")
    def mirror_monitor_port(self) -> Optional[pulumi.Input[int]]:
        """
        Switch port to which packets are mirrored.
        """
        return pulumi.get(self, "mirror_monitor_port")

    @mirror_monitor_port.setter
    def mirror_monitor_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mirror_monitor_port", value)

    @property
    @pulumi.getter(name="mirrorSourcePort")
    def mirror_source_port(self) -> Optional[pulumi.Input[int]]:
        """
        Switch port from which packets are mirrored.
        """
        return pulumi.get(self, "mirror_source_port")

    @mirror_source_port.setter
    def mirror_source_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mirror_source_port", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the switch. This name is what is shown in LuCI or the `name` field in Terraform. This is not the UCI config
        name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def reset(self) -> Optional[pulumi.Input[bool]]:
        """
        Reset the switch.
        """
        return pulumi.get(self, "reset")

    @reset.setter
    def reset(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reset", value)


class NetworkSwitch(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_mirror_rx: Optional[pulumi.Input[bool]] = None,
                 enable_mirror_tx: Optional[pulumi.Input[bool]] = None,
                 enable_vlan: Optional[pulumi.Input[bool]] = None,
                 mirror_monitor_port: Optional[pulumi.Input[int]] = None,
                 mirror_source_port: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 reset: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Legacy `swconfig` configuration

        ## Import

        The name can be found through LuCI's web UI. It will be in quotes on `/cgi-bin/luci/admin/network/switch`. The page might say:

         Switch "switch0" # The "switch0" is the name. The name can also be found from LuCI's JSON-RPC API. # Find the Terraform id and UCI name from LuCI's JSON-RPC API. One way to find this information is with `curl` and `jq`# curl \\

         --data '{"id"0, "method""foreach", "params"["network", "switch"]}' \\

         http://192.168.1.1/cgi-bin/luci/rpc/uci?auth=$AUTH_TOKEN \\

         | jq '.result | map({terraformId.[".name"], uciName.name})' # This command will output something like# [

         {

         "terraformId""cfg123456",

         "uciName""switch0"

         } ] # We'd then use the information to import the appropriate resource

        ```sh
         $ pulumi import openwrt:index/networkSwitch:NetworkSwitch switch0 cfg123456
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enable_mirror_rx: Mirror received packets from the `mirror_source_port` to the `mirror_monitor_port`.
        :param pulumi.Input[bool] enable_mirror_tx: Mirror transmitted packets from the `mirror_source_port` to the `mirror_monitor_port`.
        :param pulumi.Input[bool] enable_vlan: Enables VLAN functionality.
        :param pulumi.Input[int] mirror_monitor_port: Switch port to which packets are mirrored.
        :param pulumi.Input[int] mirror_source_port: Switch port from which packets are mirrored.
        :param pulumi.Input[str] name: Name of the switch. This name is what is shown in LuCI or the `name` field in Terraform. This is not the UCI config
               name.
        :param pulumi.Input[bool] reset: Reset the switch.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[NetworkSwitchArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Legacy `swconfig` configuration

        ## Import

        The name can be found through LuCI's web UI. It will be in quotes on `/cgi-bin/luci/admin/network/switch`. The page might say:

         Switch "switch0" # The "switch0" is the name. The name can also be found from LuCI's JSON-RPC API. # Find the Terraform id and UCI name from LuCI's JSON-RPC API. One way to find this information is with `curl` and `jq`# curl \\

         --data '{"id"0, "method""foreach", "params"["network", "switch"]}' \\

         http://192.168.1.1/cgi-bin/luci/rpc/uci?auth=$AUTH_TOKEN \\

         | jq '.result | map({terraformId.[".name"], uciName.name})' # This command will output something like# [

         {

         "terraformId""cfg123456",

         "uciName""switch0"

         } ] # We'd then use the information to import the appropriate resource

        ```sh
         $ pulumi import openwrt:index/networkSwitch:NetworkSwitch switch0 cfg123456
        ```

        :param str resource_name: The name of the resource.
        :param NetworkSwitchArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkSwitchArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_mirror_rx: Optional[pulumi.Input[bool]] = None,
                 enable_mirror_tx: Optional[pulumi.Input[bool]] = None,
                 enable_vlan: Optional[pulumi.Input[bool]] = None,
                 mirror_monitor_port: Optional[pulumi.Input[int]] = None,
                 mirror_source_port: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 reset: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkSwitchArgs.__new__(NetworkSwitchArgs)

            __props__.__dict__["enable_mirror_rx"] = enable_mirror_rx
            __props__.__dict__["enable_mirror_tx"] = enable_mirror_tx
            __props__.__dict__["enable_vlan"] = enable_vlan
            __props__.__dict__["mirror_monitor_port"] = mirror_monitor_port
            __props__.__dict__["mirror_source_port"] = mirror_source_port
            __props__.__dict__["name"] = name
            __props__.__dict__["reset"] = reset
        super(NetworkSwitch, __self__).__init__(
            'openwrt:index/networkSwitch:NetworkSwitch',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_mirror_rx: Optional[pulumi.Input[bool]] = None,
            enable_mirror_tx: Optional[pulumi.Input[bool]] = None,
            enable_vlan: Optional[pulumi.Input[bool]] = None,
            mirror_monitor_port: Optional[pulumi.Input[int]] = None,
            mirror_source_port: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            reset: Optional[pulumi.Input[bool]] = None) -> 'NetworkSwitch':
        """
        Get an existing NetworkSwitch resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enable_mirror_rx: Mirror received packets from the `mirror_source_port` to the `mirror_monitor_port`.
        :param pulumi.Input[bool] enable_mirror_tx: Mirror transmitted packets from the `mirror_source_port` to the `mirror_monitor_port`.
        :param pulumi.Input[bool] enable_vlan: Enables VLAN functionality.
        :param pulumi.Input[int] mirror_monitor_port: Switch port to which packets are mirrored.
        :param pulumi.Input[int] mirror_source_port: Switch port from which packets are mirrored.
        :param pulumi.Input[str] name: Name of the switch. This name is what is shown in LuCI or the `name` field in Terraform. This is not the UCI config
               name.
        :param pulumi.Input[bool] reset: Reset the switch.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetworkSwitchState.__new__(_NetworkSwitchState)

        __props__.__dict__["enable_mirror_rx"] = enable_mirror_rx
        __props__.__dict__["enable_mirror_tx"] = enable_mirror_tx
        __props__.__dict__["enable_vlan"] = enable_vlan
        __props__.__dict__["mirror_monitor_port"] = mirror_monitor_port
        __props__.__dict__["mirror_source_port"] = mirror_source_port
        __props__.__dict__["name"] = name
        __props__.__dict__["reset"] = reset
        return NetworkSwitch(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="enableMirrorRx")
    def enable_mirror_rx(self) -> pulumi.Output[bool]:
        """
        Mirror received packets from the `mirror_source_port` to the `mirror_monitor_port`.
        """
        return pulumi.get(self, "enable_mirror_rx")

    @property
    @pulumi.getter(name="enableMirrorTx")
    def enable_mirror_tx(self) -> pulumi.Output[bool]:
        """
        Mirror transmitted packets from the `mirror_source_port` to the `mirror_monitor_port`.
        """
        return pulumi.get(self, "enable_mirror_tx")

    @property
    @pulumi.getter(name="enableVlan")
    def enable_vlan(self) -> pulumi.Output[bool]:
        """
        Enables VLAN functionality.
        """
        return pulumi.get(self, "enable_vlan")

    @property
    @pulumi.getter(name="mirrorMonitorPort")
    def mirror_monitor_port(self) -> pulumi.Output[int]:
        """
        Switch port to which packets are mirrored.
        """
        return pulumi.get(self, "mirror_monitor_port")

    @property
    @pulumi.getter(name="mirrorSourcePort")
    def mirror_source_port(self) -> pulumi.Output[int]:
        """
        Switch port from which packets are mirrored.
        """
        return pulumi.get(self, "mirror_source_port")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the switch. This name is what is shown in LuCI or the `name` field in Terraform. This is not the UCI config
        name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def reset(self) -> pulumi.Output[bool]:
        """
        Reset the switch.
        """
        return pulumi.get(self, "reset")


# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['WirelessWifiIfaceArgs', 'WirelessWifiIface']

@pulumi.input_type
class WirelessWifiIfaceArgs:
    def __init__(__self__, *,
                 device: pulumi.Input[str],
                 mode: pulumi.Input[str],
                 network: pulumi.Input[str],
                 ssid: pulumi.Input[str],
                 encryption: Optional[pulumi.Input[str]] = None,
                 isolate: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 wpa_disable_eapol_key_retries: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a WirelessWifiIface resource.
        :param pulumi.Input[str] device: Name of the physical device. This name is what the device is known as in LuCI/UCI, or the `id` field in Terraform.
        :param pulumi.Input[str] mode: The operation mode of the wireless network interface controller.. Currently only "ap" is supported.
        :param pulumi.Input[str] network: Network interface to attach the wireless network. This name is what the interface is known as in UCI, or the `id` field
               in Terraform.
        :param pulumi.Input[str] ssid: The broadcasted SSID of the wireless network. This is what actual clients will see the network as.
        :param pulumi.Input[str] encryption: Encryption method. Currently, only PSK encryption methods are supported. Must be one of: "none", "psk", "psk2", "psk2+aes", "psk2+ccmp", "psk2+tkip", "psk2+tkip+aes", "psk2+tkip+ccmp", "psk+aes", "psk+ccmp", "psk-mixed", "psk-mixed+aes", "psk-mixed+ccmp", "psk-mixed+tkip", "psk-mixed+tkip+aes", "psk-mixed+tkip+ccmp", "psk+tkip", "psk+tkip+aes", "psk+tkip+ccmp", "sae", "sae-mixed".
        :param pulumi.Input[bool] isolate: Isolate wireless clients from each other.
        :param pulumi.Input[str] key: The pre-shared passphrase from which the pre-shared key will be derived. The clear text key has to be 8-63 characters long.
        :param pulumi.Input[bool] wpa_disable_eapol_key_retries: Enable WPA key reinstallation attack (KRACK) workaround. This should be `true` to enable KRACK workaround (you almost surely want this enabled).
        """
        pulumi.set(__self__, "device", device)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "ssid", ssid)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if isolate is not None:
            pulumi.set(__self__, "isolate", isolate)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if wpa_disable_eapol_key_retries is not None:
            pulumi.set(__self__, "wpa_disable_eapol_key_retries", wpa_disable_eapol_key_retries)

    @property
    @pulumi.getter
    def device(self) -> pulumi.Input[str]:
        """
        Name of the physical device. This name is what the device is known as in LuCI/UCI, or the `id` field in Terraform.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: pulumi.Input[str]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        """
        The operation mode of the wireless network interface controller.. Currently only "ap" is supported.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def network(self) -> pulumi.Input[str]:
        """
        Network interface to attach the wireless network. This name is what the interface is known as in UCI, or the `id` field
        in Terraform.
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: pulumi.Input[str]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def ssid(self) -> pulumi.Input[str]:
        """
        The broadcasted SSID of the wireless network. This is what actual clients will see the network as.
        """
        return pulumi.get(self, "ssid")

    @ssid.setter
    def ssid(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssid", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input[str]]:
        """
        Encryption method. Currently, only PSK encryption methods are supported. Must be one of: "none", "psk", "psk2", "psk2+aes", "psk2+ccmp", "psk2+tkip", "psk2+tkip+aes", "psk2+tkip+ccmp", "psk+aes", "psk+ccmp", "psk-mixed", "psk-mixed+aes", "psk-mixed+ccmp", "psk-mixed+tkip", "psk-mixed+tkip+aes", "psk-mixed+tkip+ccmp", "psk+tkip", "psk+tkip+aes", "psk+tkip+ccmp", "sae", "sae-mixed".
        """
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter
    def isolate(self) -> Optional[pulumi.Input[bool]]:
        """
        Isolate wireless clients from each other.
        """
        return pulumi.get(self, "isolate")

    @isolate.setter
    def isolate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "isolate", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The pre-shared passphrase from which the pre-shared key will be derived. The clear text key has to be 8-63 characters long.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="wpaDisableEapolKeyRetries")
    def wpa_disable_eapol_key_retries(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable WPA key reinstallation attack (KRACK) workaround. This should be `true` to enable KRACK workaround (you almost surely want this enabled).
        """
        return pulumi.get(self, "wpa_disable_eapol_key_retries")

    @wpa_disable_eapol_key_retries.setter
    def wpa_disable_eapol_key_retries(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wpa_disable_eapol_key_retries", value)


@pulumi.input_type
class _WirelessWifiIfaceState:
    def __init__(__self__, *,
                 device: Optional[pulumi.Input[str]] = None,
                 encryption: Optional[pulumi.Input[str]] = None,
                 isolate: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 ssid: Optional[pulumi.Input[str]] = None,
                 wpa_disable_eapol_key_retries: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering WirelessWifiIface resources.
        :param pulumi.Input[str] device: Name of the physical device. This name is what the device is known as in LuCI/UCI, or the `id` field in Terraform.
        :param pulumi.Input[str] encryption: Encryption method. Currently, only PSK encryption methods are supported. Must be one of: "none", "psk", "psk2", "psk2+aes", "psk2+ccmp", "psk2+tkip", "psk2+tkip+aes", "psk2+tkip+ccmp", "psk+aes", "psk+ccmp", "psk-mixed", "psk-mixed+aes", "psk-mixed+ccmp", "psk-mixed+tkip", "psk-mixed+tkip+aes", "psk-mixed+tkip+ccmp", "psk+tkip", "psk+tkip+aes", "psk+tkip+ccmp", "sae", "sae-mixed".
        :param pulumi.Input[bool] isolate: Isolate wireless clients from each other.
        :param pulumi.Input[str] key: The pre-shared passphrase from which the pre-shared key will be derived. The clear text key has to be 8-63 characters long.
        :param pulumi.Input[str] mode: The operation mode of the wireless network interface controller.. Currently only "ap" is supported.
        :param pulumi.Input[str] network: Network interface to attach the wireless network. This name is what the interface is known as in UCI, or the `id` field
               in Terraform.
        :param pulumi.Input[str] ssid: The broadcasted SSID of the wireless network. This is what actual clients will see the network as.
        :param pulumi.Input[bool] wpa_disable_eapol_key_retries: Enable WPA key reinstallation attack (KRACK) workaround. This should be `true` to enable KRACK workaround (you almost surely want this enabled).
        """
        if device is not None:
            pulumi.set(__self__, "device", device)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if isolate is not None:
            pulumi.set(__self__, "isolate", isolate)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if ssid is not None:
            pulumi.set(__self__, "ssid", ssid)
        if wpa_disable_eapol_key_retries is not None:
            pulumi.set(__self__, "wpa_disable_eapol_key_retries", wpa_disable_eapol_key_retries)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the physical device. This name is what the device is known as in LuCI/UCI, or the `id` field in Terraform.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input[str]]:
        """
        Encryption method. Currently, only PSK encryption methods are supported. Must be one of: "none", "psk", "psk2", "psk2+aes", "psk2+ccmp", "psk2+tkip", "psk2+tkip+aes", "psk2+tkip+ccmp", "psk+aes", "psk+ccmp", "psk-mixed", "psk-mixed+aes", "psk-mixed+ccmp", "psk-mixed+tkip", "psk-mixed+tkip+aes", "psk-mixed+tkip+ccmp", "psk+tkip", "psk+tkip+aes", "psk+tkip+ccmp", "sae", "sae-mixed".
        """
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter
    def isolate(self) -> Optional[pulumi.Input[bool]]:
        """
        Isolate wireless clients from each other.
        """
        return pulumi.get(self, "isolate")

    @isolate.setter
    def isolate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "isolate", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The pre-shared passphrase from which the pre-shared key will be derived. The clear text key has to be 8-63 characters long.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        The operation mode of the wireless network interface controller.. Currently only "ap" is supported.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        Network interface to attach the wireless network. This name is what the interface is known as in UCI, or the `id` field
        in Terraform.
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def ssid(self) -> Optional[pulumi.Input[str]]:
        """
        The broadcasted SSID of the wireless network. This is what actual clients will see the network as.
        """
        return pulumi.get(self, "ssid")

    @ssid.setter
    def ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssid", value)

    @property
    @pulumi.getter(name="wpaDisableEapolKeyRetries")
    def wpa_disable_eapol_key_retries(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable WPA key reinstallation attack (KRACK) workaround. This should be `true` to enable KRACK workaround (you almost surely want this enabled).
        """
        return pulumi.get(self, "wpa_disable_eapol_key_retries")

    @wpa_disable_eapol_key_retries.setter
    def wpa_disable_eapol_key_retries(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wpa_disable_eapol_key_retries", value)


class WirelessWifiIface(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 encryption: Optional[pulumi.Input[str]] = None,
                 isolate: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 ssid: Optional[pulumi.Input[str]] = None,
                 wpa_disable_eapol_key_retries: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        A wireless network.

        ## Import

        Find the Terraform id from LuCI's JSON-RPC API. One way to find this information is with `curl` and `jq`# curl \\

         --data '{"id"0, "method""foreach", "params"["wireless", "wifi-iface"]}' \\

         http://192.168.1.1/cgi-bin/luci/rpc/uci?auth=$AUTH_TOKEN \\

         | jq '.result | map({terraformId.[".name"]})' # This command will output something like# [

         {

         "terraformId""cfg123456",

         },

         {

         "terraformId""cfg123457",

         } ] # We'd then use the information to import the appropriate resource

        ```sh
         $ pulumi import openwrt:index/wirelessWifiIface:WirelessWifiIface home_network cfg123456
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device: Name of the physical device. This name is what the device is known as in LuCI/UCI, or the `id` field in Terraform.
        :param pulumi.Input[str] encryption: Encryption method. Currently, only PSK encryption methods are supported. Must be one of: "none", "psk", "psk2", "psk2+aes", "psk2+ccmp", "psk2+tkip", "psk2+tkip+aes", "psk2+tkip+ccmp", "psk+aes", "psk+ccmp", "psk-mixed", "psk-mixed+aes", "psk-mixed+ccmp", "psk-mixed+tkip", "psk-mixed+tkip+aes", "psk-mixed+tkip+ccmp", "psk+tkip", "psk+tkip+aes", "psk+tkip+ccmp", "sae", "sae-mixed".
        :param pulumi.Input[bool] isolate: Isolate wireless clients from each other.
        :param pulumi.Input[str] key: The pre-shared passphrase from which the pre-shared key will be derived. The clear text key has to be 8-63 characters long.
        :param pulumi.Input[str] mode: The operation mode of the wireless network interface controller.. Currently only "ap" is supported.
        :param pulumi.Input[str] network: Network interface to attach the wireless network. This name is what the interface is known as in UCI, or the `id` field
               in Terraform.
        :param pulumi.Input[str] ssid: The broadcasted SSID of the wireless network. This is what actual clients will see the network as.
        :param pulumi.Input[bool] wpa_disable_eapol_key_retries: Enable WPA key reinstallation attack (KRACK) workaround. This should be `true` to enable KRACK workaround (you almost surely want this enabled).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WirelessWifiIfaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A wireless network.

        ## Import

        Find the Terraform id from LuCI's JSON-RPC API. One way to find this information is with `curl` and `jq`# curl \\

         --data '{"id"0, "method""foreach", "params"["wireless", "wifi-iface"]}' \\

         http://192.168.1.1/cgi-bin/luci/rpc/uci?auth=$AUTH_TOKEN \\

         | jq '.result | map({terraformId.[".name"]})' # This command will output something like# [

         {

         "terraformId""cfg123456",

         },

         {

         "terraformId""cfg123457",

         } ] # We'd then use the information to import the appropriate resource

        ```sh
         $ pulumi import openwrt:index/wirelessWifiIface:WirelessWifiIface home_network cfg123456
        ```

        :param str resource_name: The name of the resource.
        :param WirelessWifiIfaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WirelessWifiIfaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 encryption: Optional[pulumi.Input[str]] = None,
                 isolate: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 ssid: Optional[pulumi.Input[str]] = None,
                 wpa_disable_eapol_key_retries: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WirelessWifiIfaceArgs.__new__(WirelessWifiIfaceArgs)

            if device is None and not opts.urn:
                raise TypeError("Missing required property 'device'")
            __props__.__dict__["device"] = device
            __props__.__dict__["encryption"] = encryption
            __props__.__dict__["isolate"] = isolate
            __props__.__dict__["key"] = None if key is None else pulumi.Output.secret(key)
            if mode is None and not opts.urn:
                raise TypeError("Missing required property 'mode'")
            __props__.__dict__["mode"] = mode
            if network is None and not opts.urn:
                raise TypeError("Missing required property 'network'")
            __props__.__dict__["network"] = network
            if ssid is None and not opts.urn:
                raise TypeError("Missing required property 'ssid'")
            __props__.__dict__["ssid"] = ssid
            __props__.__dict__["wpa_disable_eapol_key_retries"] = wpa_disable_eapol_key_retries
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["key"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(WirelessWifiIface, __self__).__init__(
            'openwrt:index/wirelessWifiIface:WirelessWifiIface',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            device: Optional[pulumi.Input[str]] = None,
            encryption: Optional[pulumi.Input[str]] = None,
            isolate: Optional[pulumi.Input[bool]] = None,
            key: Optional[pulumi.Input[str]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            network: Optional[pulumi.Input[str]] = None,
            ssid: Optional[pulumi.Input[str]] = None,
            wpa_disable_eapol_key_retries: Optional[pulumi.Input[bool]] = None) -> 'WirelessWifiIface':
        """
        Get an existing WirelessWifiIface resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device: Name of the physical device. This name is what the device is known as in LuCI/UCI, or the `id` field in Terraform.
        :param pulumi.Input[str] encryption: Encryption method. Currently, only PSK encryption methods are supported. Must be one of: "none", "psk", "psk2", "psk2+aes", "psk2+ccmp", "psk2+tkip", "psk2+tkip+aes", "psk2+tkip+ccmp", "psk+aes", "psk+ccmp", "psk-mixed", "psk-mixed+aes", "psk-mixed+ccmp", "psk-mixed+tkip", "psk-mixed+tkip+aes", "psk-mixed+tkip+ccmp", "psk+tkip", "psk+tkip+aes", "psk+tkip+ccmp", "sae", "sae-mixed".
        :param pulumi.Input[bool] isolate: Isolate wireless clients from each other.
        :param pulumi.Input[str] key: The pre-shared passphrase from which the pre-shared key will be derived. The clear text key has to be 8-63 characters long.
        :param pulumi.Input[str] mode: The operation mode of the wireless network interface controller.. Currently only "ap" is supported.
        :param pulumi.Input[str] network: Network interface to attach the wireless network. This name is what the interface is known as in UCI, or the `id` field
               in Terraform.
        :param pulumi.Input[str] ssid: The broadcasted SSID of the wireless network. This is what actual clients will see the network as.
        :param pulumi.Input[bool] wpa_disable_eapol_key_retries: Enable WPA key reinstallation attack (KRACK) workaround. This should be `true` to enable KRACK workaround (you almost surely want this enabled).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WirelessWifiIfaceState.__new__(_WirelessWifiIfaceState)

        __props__.__dict__["device"] = device
        __props__.__dict__["encryption"] = encryption
        __props__.__dict__["isolate"] = isolate
        __props__.__dict__["key"] = key
        __props__.__dict__["mode"] = mode
        __props__.__dict__["network"] = network
        __props__.__dict__["ssid"] = ssid
        __props__.__dict__["wpa_disable_eapol_key_retries"] = wpa_disable_eapol_key_retries
        return WirelessWifiIface(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[str]:
        """
        Name of the physical device. This name is what the device is known as in LuCI/UCI, or the `id` field in Terraform.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def encryption(self) -> pulumi.Output[str]:
        """
        Encryption method. Currently, only PSK encryption methods are supported. Must be one of: "none", "psk", "psk2", "psk2+aes", "psk2+ccmp", "psk2+tkip", "psk2+tkip+aes", "psk2+tkip+ccmp", "psk+aes", "psk+ccmp", "psk-mixed", "psk-mixed+aes", "psk-mixed+ccmp", "psk-mixed+tkip", "psk-mixed+tkip+aes", "psk-mixed+tkip+ccmp", "psk+tkip", "psk+tkip+aes", "psk+tkip+ccmp", "sae", "sae-mixed".
        """
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter
    def isolate(self) -> pulumi.Output[bool]:
        """
        Isolate wireless clients from each other.
        """
        return pulumi.get(self, "isolate")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[str]:
        """
        The pre-shared passphrase from which the pre-shared key will be derived. The clear text key has to be 8-63 characters long.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[str]:
        """
        The operation mode of the wireless network interface controller.. Currently only "ap" is supported.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def network(self) -> pulumi.Output[str]:
        """
        Network interface to attach the wireless network. This name is what the interface is known as in UCI, or the `id` field
        in Terraform.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def ssid(self) -> pulumi.Output[str]:
        """
        The broadcasted SSID of the wireless network. This is what actual clients will see the network as.
        """
        return pulumi.get(self, "ssid")

    @property
    @pulumi.getter(name="wpaDisableEapolKeyRetries")
    def wpa_disable_eapol_key_retries(self) -> pulumi.Output[bool]:
        """
        Enable WPA key reinstallation attack (KRACK) workaround. This should be `true` to enable KRACK workaround (you almost surely want this enabled).
        """
        return pulumi.get(self, "wpa_disable_eapol_key_retries")


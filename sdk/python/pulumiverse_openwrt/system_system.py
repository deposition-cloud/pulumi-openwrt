# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SystemSystemArgs', 'SystemSystem']

@pulumi.input_type
class SystemSystemArgs:
    def __init__(__self__, *,
                 conloglevel: Optional[pulumi.Input[int]] = None,
                 cronloglevel: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 log_size: Optional[pulumi.Input[int]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 ttylogin: Optional[pulumi.Input[bool]] = None,
                 zonename: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SystemSystem resource.
        :param pulumi.Input[int] conloglevel: The maximum log level for kernel messages to be logged to the console.
        :param pulumi.Input[int] cronloglevel: The minimum level for cron messages to be logged to syslog.
        :param pulumi.Input[str] description: The hostname for the system.
        :param pulumi.Input[str] hostname: A short single-line description for the system.
        :param pulumi.Input[int] log_size: Size of the file based log buffer in KiB.
        :param pulumi.Input[str] notes: Multi-line free-form text about the system.
        :param pulumi.Input[str] timezone: The POSIX.1 time zone string. This has no corresponding value in LuCI. See: https://github.com/openwrt/luci/blob/cd82ccacef78d3bb8b8af6b87dabb9e892e2b2aa/modules/luci-base/luasrc/sys/zoneinfo/tzdata.lua.
        :param pulumi.Input[bool] ttylogin: Require authentication for local users to log in the system.
        :param pulumi.Input[str] zonename: The IANA/Olson time zone string. This corresponds to "Timezone" in LuCI. See: https://github.com/openwrt/luci/blob/cd82ccacef78d3bb8b8af6b87dabb9e892e2b2aa/modules/luci-base/luasrc/sys/zoneinfo/tzdata.lua.
        """
        if conloglevel is not None:
            pulumi.set(__self__, "conloglevel", conloglevel)
        if cronloglevel is not None:
            pulumi.set(__self__, "cronloglevel", cronloglevel)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if log_size is not None:
            pulumi.set(__self__, "log_size", log_size)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if ttylogin is not None:
            pulumi.set(__self__, "ttylogin", ttylogin)
        if zonename is not None:
            pulumi.set(__self__, "zonename", zonename)

    @property
    @pulumi.getter
    def conloglevel(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum log level for kernel messages to be logged to the console.
        """
        return pulumi.get(self, "conloglevel")

    @conloglevel.setter
    def conloglevel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conloglevel", value)

    @property
    @pulumi.getter
    def cronloglevel(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum level for cron messages to be logged to syslog.
        """
        return pulumi.get(self, "cronloglevel")

    @cronloglevel.setter
    def cronloglevel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cronloglevel", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The hostname for the system.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        A short single-line description for the system.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="logSize")
    def log_size(self) -> Optional[pulumi.Input[int]]:
        """
        Size of the file based log buffer in KiB.
        """
        return pulumi.get(self, "log_size")

    @log_size.setter
    def log_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_size", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        """
        Multi-line free-form text about the system.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        """
        The POSIX.1 time zone string. This has no corresponding value in LuCI. See: https://github.com/openwrt/luci/blob/cd82ccacef78d3bb8b8af6b87dabb9e892e2b2aa/modules/luci-base/luasrc/sys/zoneinfo/tzdata.lua.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)

    @property
    @pulumi.getter
    def ttylogin(self) -> Optional[pulumi.Input[bool]]:
        """
        Require authentication for local users to log in the system.
        """
        return pulumi.get(self, "ttylogin")

    @ttylogin.setter
    def ttylogin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ttylogin", value)

    @property
    @pulumi.getter
    def zonename(self) -> Optional[pulumi.Input[str]]:
        """
        The IANA/Olson time zone string. This corresponds to "Timezone" in LuCI. See: https://github.com/openwrt/luci/blob/cd82ccacef78d3bb8b8af6b87dabb9e892e2b2aa/modules/luci-base/luasrc/sys/zoneinfo/tzdata.lua.
        """
        return pulumi.get(self, "zonename")

    @zonename.setter
    def zonename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zonename", value)


@pulumi.input_type
class _SystemSystemState:
    def __init__(__self__, *,
                 conloglevel: Optional[pulumi.Input[int]] = None,
                 cronloglevel: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 log_size: Optional[pulumi.Input[int]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 ttylogin: Optional[pulumi.Input[bool]] = None,
                 zonename: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SystemSystem resources.
        :param pulumi.Input[int] conloglevel: The maximum log level for kernel messages to be logged to the console.
        :param pulumi.Input[int] cronloglevel: The minimum level for cron messages to be logged to syslog.
        :param pulumi.Input[str] description: The hostname for the system.
        :param pulumi.Input[str] hostname: A short single-line description for the system.
        :param pulumi.Input[int] log_size: Size of the file based log buffer in KiB.
        :param pulumi.Input[str] notes: Multi-line free-form text about the system.
        :param pulumi.Input[str] timezone: The POSIX.1 time zone string. This has no corresponding value in LuCI. See: https://github.com/openwrt/luci/blob/cd82ccacef78d3bb8b8af6b87dabb9e892e2b2aa/modules/luci-base/luasrc/sys/zoneinfo/tzdata.lua.
        :param pulumi.Input[bool] ttylogin: Require authentication for local users to log in the system.
        :param pulumi.Input[str] zonename: The IANA/Olson time zone string. This corresponds to "Timezone" in LuCI. See: https://github.com/openwrt/luci/blob/cd82ccacef78d3bb8b8af6b87dabb9e892e2b2aa/modules/luci-base/luasrc/sys/zoneinfo/tzdata.lua.
        """
        if conloglevel is not None:
            pulumi.set(__self__, "conloglevel", conloglevel)
        if cronloglevel is not None:
            pulumi.set(__self__, "cronloglevel", cronloglevel)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if log_size is not None:
            pulumi.set(__self__, "log_size", log_size)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if ttylogin is not None:
            pulumi.set(__self__, "ttylogin", ttylogin)
        if zonename is not None:
            pulumi.set(__self__, "zonename", zonename)

    @property
    @pulumi.getter
    def conloglevel(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum log level for kernel messages to be logged to the console.
        """
        return pulumi.get(self, "conloglevel")

    @conloglevel.setter
    def conloglevel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conloglevel", value)

    @property
    @pulumi.getter
    def cronloglevel(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum level for cron messages to be logged to syslog.
        """
        return pulumi.get(self, "cronloglevel")

    @cronloglevel.setter
    def cronloglevel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cronloglevel", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The hostname for the system.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        A short single-line description for the system.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="logSize")
    def log_size(self) -> Optional[pulumi.Input[int]]:
        """
        Size of the file based log buffer in KiB.
        """
        return pulumi.get(self, "log_size")

    @log_size.setter
    def log_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_size", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        """
        Multi-line free-form text about the system.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        """
        The POSIX.1 time zone string. This has no corresponding value in LuCI. See: https://github.com/openwrt/luci/blob/cd82ccacef78d3bb8b8af6b87dabb9e892e2b2aa/modules/luci-base/luasrc/sys/zoneinfo/tzdata.lua.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)

    @property
    @pulumi.getter
    def ttylogin(self) -> Optional[pulumi.Input[bool]]:
        """
        Require authentication for local users to log in the system.
        """
        return pulumi.get(self, "ttylogin")

    @ttylogin.setter
    def ttylogin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ttylogin", value)

    @property
    @pulumi.getter
    def zonename(self) -> Optional[pulumi.Input[str]]:
        """
        The IANA/Olson time zone string. This corresponds to "Timezone" in LuCI. See: https://github.com/openwrt/luci/blob/cd82ccacef78d3bb8b8af6b87dabb9e892e2b2aa/modules/luci-base/luasrc/sys/zoneinfo/tzdata.lua.
        """
        return pulumi.get(self, "zonename")

    @zonename.setter
    def zonename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zonename", value)


class SystemSystem(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conloglevel: Optional[pulumi.Input[int]] = None,
                 cronloglevel: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 log_size: Optional[pulumi.Input[int]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 ttylogin: Optional[pulumi.Input[bool]] = None,
                 zonename: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides system data about an OpenWrt device

        ## Import

        Every `system.system` seems to have the same UCI name of `cfg01e48a`

        ```sh
         $ pulumi import openwrt:index/systemSystem:SystemSystem this cfg01e48a
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] conloglevel: The maximum log level for kernel messages to be logged to the console.
        :param pulumi.Input[int] cronloglevel: The minimum level for cron messages to be logged to syslog.
        :param pulumi.Input[str] description: The hostname for the system.
        :param pulumi.Input[str] hostname: A short single-line description for the system.
        :param pulumi.Input[int] log_size: Size of the file based log buffer in KiB.
        :param pulumi.Input[str] notes: Multi-line free-form text about the system.
        :param pulumi.Input[str] timezone: The POSIX.1 time zone string. This has no corresponding value in LuCI. See: https://github.com/openwrt/luci/blob/cd82ccacef78d3bb8b8af6b87dabb9e892e2b2aa/modules/luci-base/luasrc/sys/zoneinfo/tzdata.lua.
        :param pulumi.Input[bool] ttylogin: Require authentication for local users to log in the system.
        :param pulumi.Input[str] zonename: The IANA/Olson time zone string. This corresponds to "Timezone" in LuCI. See: https://github.com/openwrt/luci/blob/cd82ccacef78d3bb8b8af6b87dabb9e892e2b2aa/modules/luci-base/luasrc/sys/zoneinfo/tzdata.lua.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SystemSystemArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides system data about an OpenWrt device

        ## Import

        Every `system.system` seems to have the same UCI name of `cfg01e48a`

        ```sh
         $ pulumi import openwrt:index/systemSystem:SystemSystem this cfg01e48a
        ```

        :param str resource_name: The name of the resource.
        :param SystemSystemArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemSystemArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conloglevel: Optional[pulumi.Input[int]] = None,
                 cronloglevel: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 log_size: Optional[pulumi.Input[int]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 ttylogin: Optional[pulumi.Input[bool]] = None,
                 zonename: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemSystemArgs.__new__(SystemSystemArgs)

            __props__.__dict__["conloglevel"] = conloglevel
            __props__.__dict__["cronloglevel"] = cronloglevel
            __props__.__dict__["description"] = description
            __props__.__dict__["hostname"] = hostname
            __props__.__dict__["log_size"] = log_size
            __props__.__dict__["notes"] = notes
            __props__.__dict__["timezone"] = timezone
            __props__.__dict__["ttylogin"] = ttylogin
            __props__.__dict__["zonename"] = zonename
        super(SystemSystem, __self__).__init__(
            'openwrt:index/systemSystem:SystemSystem',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            conloglevel: Optional[pulumi.Input[int]] = None,
            cronloglevel: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            hostname: Optional[pulumi.Input[str]] = None,
            log_size: Optional[pulumi.Input[int]] = None,
            notes: Optional[pulumi.Input[str]] = None,
            timezone: Optional[pulumi.Input[str]] = None,
            ttylogin: Optional[pulumi.Input[bool]] = None,
            zonename: Optional[pulumi.Input[str]] = None) -> 'SystemSystem':
        """
        Get an existing SystemSystem resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] conloglevel: The maximum log level for kernel messages to be logged to the console.
        :param pulumi.Input[int] cronloglevel: The minimum level for cron messages to be logged to syslog.
        :param pulumi.Input[str] description: The hostname for the system.
        :param pulumi.Input[str] hostname: A short single-line description for the system.
        :param pulumi.Input[int] log_size: Size of the file based log buffer in KiB.
        :param pulumi.Input[str] notes: Multi-line free-form text about the system.
        :param pulumi.Input[str] timezone: The POSIX.1 time zone string. This has no corresponding value in LuCI. See: https://github.com/openwrt/luci/blob/cd82ccacef78d3bb8b8af6b87dabb9e892e2b2aa/modules/luci-base/luasrc/sys/zoneinfo/tzdata.lua.
        :param pulumi.Input[bool] ttylogin: Require authentication for local users to log in the system.
        :param pulumi.Input[str] zonename: The IANA/Olson time zone string. This corresponds to "Timezone" in LuCI. See: https://github.com/openwrt/luci/blob/cd82ccacef78d3bb8b8af6b87dabb9e892e2b2aa/modules/luci-base/luasrc/sys/zoneinfo/tzdata.lua.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemSystemState.__new__(_SystemSystemState)

        __props__.__dict__["conloglevel"] = conloglevel
        __props__.__dict__["cronloglevel"] = cronloglevel
        __props__.__dict__["description"] = description
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["log_size"] = log_size
        __props__.__dict__["notes"] = notes
        __props__.__dict__["timezone"] = timezone
        __props__.__dict__["ttylogin"] = ttylogin
        __props__.__dict__["zonename"] = zonename
        return SystemSystem(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def conloglevel(self) -> pulumi.Output[int]:
        """
        The maximum log level for kernel messages to be logged to the console.
        """
        return pulumi.get(self, "conloglevel")

    @property
    @pulumi.getter
    def cronloglevel(self) -> pulumi.Output[int]:
        """
        The minimum level for cron messages to be logged to syslog.
        """
        return pulumi.get(self, "cronloglevel")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The hostname for the system.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[str]:
        """
        A short single-line description for the system.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="logSize")
    def log_size(self) -> pulumi.Output[int]:
        """
        Size of the file based log buffer in KiB.
        """
        return pulumi.get(self, "log_size")

    @property
    @pulumi.getter
    def notes(self) -> pulumi.Output[str]:
        """
        Multi-line free-form text about the system.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def timezone(self) -> pulumi.Output[str]:
        """
        The POSIX.1 time zone string. This has no corresponding value in LuCI. See: https://github.com/openwrt/luci/blob/cd82ccacef78d3bb8b8af6b87dabb9e892e2b2aa/modules/luci-base/luasrc/sys/zoneinfo/tzdata.lua.
        """
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter
    def ttylogin(self) -> pulumi.Output[bool]:
        """
        Require authentication for local users to log in the system.
        """
        return pulumi.get(self, "ttylogin")

    @property
    @pulumi.getter
    def zonename(self) -> pulumi.Output[str]:
        """
        The IANA/Olson time zone string. This corresponds to "Timezone" in LuCI. See: https://github.com/openwrt/luci/blob/cd82ccacef78d3bb8b8af6b87dabb9e892e2b2aa/modules/luci-base/luasrc/sys/zoneinfo/tzdata.lua.
        """
        return pulumi.get(self, "zonename")


# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetNetworkDeviceResult',
    'AwaitableGetNetworkDeviceResult',
    'get_network_device',
    'get_network_device_output',
]

@pulumi.output_type
class GetNetworkDeviceResult:
    """
    A collection of values returned by getNetworkDevice.
    """
    def __init__(__self__, bridge_empty=None, dadtransmits=None, id=None, ipv6=None, macaddr=None, mtu=None, mtu6=None, name=None, ports=None, txqueuelen=None, type=None):
        if bridge_empty and not isinstance(bridge_empty, bool):
            raise TypeError("Expected argument 'bridge_empty' to be a bool")
        pulumi.set(__self__, "bridge_empty", bridge_empty)
        if dadtransmits and not isinstance(dadtransmits, int):
            raise TypeError("Expected argument 'dadtransmits' to be a int")
        pulumi.set(__self__, "dadtransmits", dadtransmits)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ipv6 and not isinstance(ipv6, bool):
            raise TypeError("Expected argument 'ipv6' to be a bool")
        pulumi.set(__self__, "ipv6", ipv6)
        if macaddr and not isinstance(macaddr, str):
            raise TypeError("Expected argument 'macaddr' to be a str")
        pulumi.set(__self__, "macaddr", macaddr)
        if mtu and not isinstance(mtu, int):
            raise TypeError("Expected argument 'mtu' to be a int")
        pulumi.set(__self__, "mtu", mtu)
        if mtu6 and not isinstance(mtu6, int):
            raise TypeError("Expected argument 'mtu6' to be a int")
        pulumi.set(__self__, "mtu6", mtu6)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if ports and not isinstance(ports, list):
            raise TypeError("Expected argument 'ports' to be a list")
        pulumi.set(__self__, "ports", ports)
        if txqueuelen and not isinstance(txqueuelen, int):
            raise TypeError("Expected argument 'txqueuelen' to be a int")
        pulumi.set(__self__, "txqueuelen", txqueuelen)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="bridgeEmpty")
    def bridge_empty(self) -> bool:
        """
        Bring up the bridge device even if no ports are attached
        """
        return pulumi.get(self, "bridge_empty")

    @property
    @pulumi.getter
    def dadtransmits(self) -> int:
        """
        Amount of Duplicate Address Detection probes to send
        """
        return pulumi.get(self, "dadtransmits")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Name of the section. This name is only used when interacting with UCI directly.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ipv6(self) -> bool:
        """
        Enable IPv6 for the device.
        """
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter
    def macaddr(self) -> str:
        """
        MAC Address of the device.
        """
        return pulumi.get(self, "macaddr")

    @property
    @pulumi.getter
    def mtu(self) -> int:
        """
        Maximum Transmissible Unit.
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def mtu6(self) -> int:
        """
        Maximum Transmissible Unit for IPv6.
        """
        return pulumi.get(self, "mtu6")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the device. This name is referenced in other network configuration.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ports(self) -> Sequence[str]:
        """
        Specifies the wired ports to attach to this bridge.
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def txqueuelen(self) -> int:
        """
        Transmission queue length.
        """
        return pulumi.get(self, "txqueuelen")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of device. Currently, only "bridge" is supported.
        """
        return pulumi.get(self, "type")


class AwaitableGetNetworkDeviceResult(GetNetworkDeviceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkDeviceResult(
            bridge_empty=self.bridge_empty,
            dadtransmits=self.dadtransmits,
            id=self.id,
            ipv6=self.ipv6,
            macaddr=self.macaddr,
            mtu=self.mtu,
            mtu6=self.mtu6,
            name=self.name,
            ports=self.ports,
            txqueuelen=self.txqueuelen,
            type=self.type)


def get_network_device(id: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkDeviceResult:
    """
    A physical or virtual "device" in OpenWrt jargon. Commonly referred to as an "interface" in other networking jargon.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_openwrt as openwrt

    br_testing = openwrt.get_network_device(id="br_testing")
    ```


    :param str id: Name of the section. This name is only used when interacting with UCI directly.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('openwrt:index/getNetworkDevice:getNetworkDevice', __args__, opts=opts, typ=GetNetworkDeviceResult).value

    return AwaitableGetNetworkDeviceResult(
        bridge_empty=pulumi.get(__ret__, 'bridge_empty'),
        dadtransmits=pulumi.get(__ret__, 'dadtransmits'),
        id=pulumi.get(__ret__, 'id'),
        ipv6=pulumi.get(__ret__, 'ipv6'),
        macaddr=pulumi.get(__ret__, 'macaddr'),
        mtu=pulumi.get(__ret__, 'mtu'),
        mtu6=pulumi.get(__ret__, 'mtu6'),
        name=pulumi.get(__ret__, 'name'),
        ports=pulumi.get(__ret__, 'ports'),
        txqueuelen=pulumi.get(__ret__, 'txqueuelen'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_network_device)
def get_network_device_output(id: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNetworkDeviceResult]:
    """
    A physical or virtual "device" in OpenWrt jargon. Commonly referred to as an "interface" in other networking jargon.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_openwrt as openwrt

    br_testing = openwrt.get_network_device(id="br_testing")
    ```


    :param str id: Name of the section. This name is only used when interacting with UCI directly.
    """
    ...

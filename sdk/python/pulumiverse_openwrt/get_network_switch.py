# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetNetworkSwitchResult',
    'AwaitableGetNetworkSwitchResult',
    'get_network_switch',
    'get_network_switch_output',
]

@pulumi.output_type
class GetNetworkSwitchResult:
    """
    A collection of values returned by getNetworkSwitch.
    """
    def __init__(__self__, enable_mirror_rx=None, enable_mirror_tx=None, enable_vlan=None, id=None, mirror_monitor_port=None, mirror_source_port=None, name=None, reset=None):
        if enable_mirror_rx and not isinstance(enable_mirror_rx, bool):
            raise TypeError("Expected argument 'enable_mirror_rx' to be a bool")
        pulumi.set(__self__, "enable_mirror_rx", enable_mirror_rx)
        if enable_mirror_tx and not isinstance(enable_mirror_tx, bool):
            raise TypeError("Expected argument 'enable_mirror_tx' to be a bool")
        pulumi.set(__self__, "enable_mirror_tx", enable_mirror_tx)
        if enable_vlan and not isinstance(enable_vlan, bool):
            raise TypeError("Expected argument 'enable_vlan' to be a bool")
        pulumi.set(__self__, "enable_vlan", enable_vlan)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if mirror_monitor_port and not isinstance(mirror_monitor_port, int):
            raise TypeError("Expected argument 'mirror_monitor_port' to be a int")
        pulumi.set(__self__, "mirror_monitor_port", mirror_monitor_port)
        if mirror_source_port and not isinstance(mirror_source_port, int):
            raise TypeError("Expected argument 'mirror_source_port' to be a int")
        pulumi.set(__self__, "mirror_source_port", mirror_source_port)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if reset and not isinstance(reset, bool):
            raise TypeError("Expected argument 'reset' to be a bool")
        pulumi.set(__self__, "reset", reset)

    @property
    @pulumi.getter(name="enableMirrorRx")
    def enable_mirror_rx(self) -> bool:
        """
        Mirror received packets from the `mirror_source_port` to the `mirror_monitor_port`.
        """
        return pulumi.get(self, "enable_mirror_rx")

    @property
    @pulumi.getter(name="enableMirrorTx")
    def enable_mirror_tx(self) -> bool:
        """
        Mirror transmitted packets from the `mirror_source_port` to the `mirror_monitor_port`.
        """
        return pulumi.get(self, "enable_mirror_tx")

    @property
    @pulumi.getter(name="enableVlan")
    def enable_vlan(self) -> bool:
        """
        Enables VLAN functionality.
        """
        return pulumi.get(self, "enable_vlan")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Name of the section. This name is only used when interacting with UCI directly.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="mirrorMonitorPort")
    def mirror_monitor_port(self) -> int:
        """
        Switch port to which packets are mirrored.
        """
        return pulumi.get(self, "mirror_monitor_port")

    @property
    @pulumi.getter(name="mirrorSourcePort")
    def mirror_source_port(self) -> int:
        """
        Switch port from which packets are mirrored.
        """
        return pulumi.get(self, "mirror_source_port")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def reset(self) -> bool:
        """
        Reset the switch.
        """
        return pulumi.get(self, "reset")


class AwaitableGetNetworkSwitchResult(GetNetworkSwitchResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkSwitchResult(
            enable_mirror_rx=self.enable_mirror_rx,
            enable_mirror_tx=self.enable_mirror_tx,
            enable_vlan=self.enable_vlan,
            id=self.id,
            mirror_monitor_port=self.mirror_monitor_port,
            mirror_source_port=self.mirror_source_port,
            name=self.name,
            reset=self.reset)


def get_network_switch(id: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkSwitchResult:
    """
    Legacy `swconfig` configuration

    ## Example Usage

    ```python
    import pulumi
    import pulumi_openwrt as openwrt

    testing = openwrt.get_network_switch(id="testing")
    ```


    :param str id: Name of the section. This name is only used when interacting with UCI directly.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('openwrt:index/getNetworkSwitch:getNetworkSwitch', __args__, opts=opts, typ=GetNetworkSwitchResult).value

    return AwaitableGetNetworkSwitchResult(
        enable_mirror_rx=pulumi.get(__ret__, 'enable_mirror_rx'),
        enable_mirror_tx=pulumi.get(__ret__, 'enable_mirror_tx'),
        enable_vlan=pulumi.get(__ret__, 'enable_vlan'),
        id=pulumi.get(__ret__, 'id'),
        mirror_monitor_port=pulumi.get(__ret__, 'mirror_monitor_port'),
        mirror_source_port=pulumi.get(__ret__, 'mirror_source_port'),
        name=pulumi.get(__ret__, 'name'),
        reset=pulumi.get(__ret__, 'reset'))


@_utilities.lift_output_func(get_network_switch)
def get_network_switch_output(id: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNetworkSwitchResult]:
    """
    Legacy `swconfig` configuration

    ## Example Usage

    ```python
    import pulumi
    import pulumi_openwrt as openwrt

    testing = openwrt.get_network_switch(id="testing")
    ```


    :param str id: Name of the section. This name is only used when interacting with UCI directly.
    """
    ...

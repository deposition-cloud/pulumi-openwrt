# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetSystemSystemResult',
    'AwaitableGetSystemSystemResult',
    'get_system_system',
    'get_system_system_output',
]

@pulumi.output_type
class GetSystemSystemResult:
    """
    A collection of values returned by getSystemSystem.
    """
    def __init__(__self__, conloglevel=None, cronloglevel=None, description=None, hostname=None, id=None, log_size=None, notes=None, timezone=None, ttylogin=None, zonename=None):
        if conloglevel and not isinstance(conloglevel, int):
            raise TypeError("Expected argument 'conloglevel' to be a int")
        pulumi.set(__self__, "conloglevel", conloglevel)
        if cronloglevel and not isinstance(cronloglevel, int):
            raise TypeError("Expected argument 'cronloglevel' to be a int")
        pulumi.set(__self__, "cronloglevel", cronloglevel)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if hostname and not isinstance(hostname, str):
            raise TypeError("Expected argument 'hostname' to be a str")
        pulumi.set(__self__, "hostname", hostname)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if log_size and not isinstance(log_size, int):
            raise TypeError("Expected argument 'log_size' to be a int")
        pulumi.set(__self__, "log_size", log_size)
        if notes and not isinstance(notes, str):
            raise TypeError("Expected argument 'notes' to be a str")
        pulumi.set(__self__, "notes", notes)
        if timezone and not isinstance(timezone, str):
            raise TypeError("Expected argument 'timezone' to be a str")
        pulumi.set(__self__, "timezone", timezone)
        if ttylogin and not isinstance(ttylogin, bool):
            raise TypeError("Expected argument 'ttylogin' to be a bool")
        pulumi.set(__self__, "ttylogin", ttylogin)
        if zonename and not isinstance(zonename, str):
            raise TypeError("Expected argument 'zonename' to be a str")
        pulumi.set(__self__, "zonename", zonename)

    @property
    @pulumi.getter
    def conloglevel(self) -> int:
        """
        The maximum log level for kernel messages to be logged to the console.
        """
        return pulumi.get(self, "conloglevel")

    @property
    @pulumi.getter
    def cronloglevel(self) -> int:
        """
        The minimum level for cron messages to be logged to syslog.
        """
        return pulumi.get(self, "cronloglevel")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The hostname for the system.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        A short single-line description for the system.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Name of the section. This name is only used when interacting with UCI directly.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="logSize")
    def log_size(self) -> int:
        """
        Size of the file based log buffer in KiB.
        """
        return pulumi.get(self, "log_size")

    @property
    @pulumi.getter
    def notes(self) -> str:
        """
        Multi-line free-form text about the system.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        """
        The POSIX.1 time zone string. This has no corresponding value in LuCI. See: https://github.com/openwrt/luci/blob/cd82ccacef78d3bb8b8af6b87dabb9e892e2b2aa/modules/luci-base/luasrc/sys/zoneinfo/tzdata.lua.
        """
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter
    def ttylogin(self) -> bool:
        """
        Require authentication for local users to log in the system.
        """
        return pulumi.get(self, "ttylogin")

    @property
    @pulumi.getter
    def zonename(self) -> str:
        """
        The IANA/Olson time zone string. This corresponds to "Timezone" in LuCI. See: https://github.com/openwrt/luci/blob/cd82ccacef78d3bb8b8af6b87dabb9e892e2b2aa/modules/luci-base/luasrc/sys/zoneinfo/tzdata.lua.
        """
        return pulumi.get(self, "zonename")


class AwaitableGetSystemSystemResult(GetSystemSystemResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSystemSystemResult(
            conloglevel=self.conloglevel,
            cronloglevel=self.cronloglevel,
            description=self.description,
            hostname=self.hostname,
            id=self.id,
            log_size=self.log_size,
            notes=self.notes,
            timezone=self.timezone,
            ttylogin=self.ttylogin,
            zonename=self.zonename)


def get_system_system(id: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSystemSystemResult:
    """
    Provides system data about an OpenWrt device

    ## Example Usage

    ```python
    import pulumi
    import pulumi_openwrt as openwrt

    this = openwrt.get_system_system(id="cfg01e48a")
    ```


    :param str id: Name of the section. This name is only used when interacting with UCI directly.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('openwrt:index/getSystemSystem:getSystemSystem', __args__, opts=opts, typ=GetSystemSystemResult).value

    return AwaitableGetSystemSystemResult(
        conloglevel=pulumi.get(__ret__, 'conloglevel'),
        cronloglevel=pulumi.get(__ret__, 'cronloglevel'),
        description=pulumi.get(__ret__, 'description'),
        hostname=pulumi.get(__ret__, 'hostname'),
        id=pulumi.get(__ret__, 'id'),
        log_size=pulumi.get(__ret__, 'log_size'),
        notes=pulumi.get(__ret__, 'notes'),
        timezone=pulumi.get(__ret__, 'timezone'),
        ttylogin=pulumi.get(__ret__, 'ttylogin'),
        zonename=pulumi.get(__ret__, 'zonename'))


@_utilities.lift_output_func(get_system_system)
def get_system_system_output(id: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSystemSystemResult]:
    """
    Provides system data about an OpenWrt device

    ## Example Usage

    ```python
    import pulumi
    import pulumi_openwrt as openwrt

    this = openwrt.get_system_system(id="cfg01e48a")
    ```


    :param str id: Name of the section. This name is only used when interacting with UCI directly.
    """
    ...

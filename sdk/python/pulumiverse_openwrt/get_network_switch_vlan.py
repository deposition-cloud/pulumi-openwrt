# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetNetworkSwitchVlanResult',
    'AwaitableGetNetworkSwitchVlanResult',
    'get_network_switch_vlan',
    'get_network_switch_vlan_output',
]

@pulumi.output_type
class GetNetworkSwitchVlanResult:
    """
    A collection of values returned by getNetworkSwitchVlan.
    """
    def __init__(__self__, description=None, device=None, id=None, ports=None, vid=None, vlan=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ports and not isinstance(ports, str):
            raise TypeError("Expected argument 'ports' to be a str")
        pulumi.set(__self__, "ports", ports)
        if vid and not isinstance(vid, int):
            raise TypeError("Expected argument 'vid' to be a int")
        pulumi.set(__self__, "vid", vid)
        if vlan and not isinstance(vlan, int):
            raise TypeError("Expected argument 'vlan' to be a int")
        pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A human-readable description of the VLAN configuration.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def device(self) -> str:
        """
        The switch to configure.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Name of the section. This name is only used when interacting with UCI directly.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ports(self) -> str:
        """
        A string of space-separated port indicies that should be associated with the VLAN. Adding the suffix `"t"` to a port indicates that egress packets should be tagged, for example `"0 1 3t 5t"`.
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def vid(self) -> int:
        """
        The VLAN tag number to use.
        """
        return pulumi.get(self, "vid")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        """
        The VLAN "table index" to configure. This index corresponds to the order on LuCI's UI
        """
        return pulumi.get(self, "vlan")


class AwaitableGetNetworkSwitchVlanResult(GetNetworkSwitchVlanResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkSwitchVlanResult(
            description=self.description,
            device=self.device,
            id=self.id,
            ports=self.ports,
            vid=self.vid,
            vlan=self.vlan)


def get_network_switch_vlan(id: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkSwitchVlanResult:
    """
    Legacy VLAN configuration

    ## Example Usage

    ```python
    import pulumi
    import pulumi_openwrt as openwrt

    testing = openwrt.get_network_switch_vlan(id="testing")
    ```


    :param str id: Name of the section. This name is only used when interacting with UCI directly.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('openwrt:index/getNetworkSwitchVlan:getNetworkSwitchVlan', __args__, opts=opts, typ=GetNetworkSwitchVlanResult).value

    return AwaitableGetNetworkSwitchVlanResult(
        description=pulumi.get(__ret__, 'description'),
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        ports=pulumi.get(__ret__, 'ports'),
        vid=pulumi.get(__ret__, 'vid'),
        vlan=pulumi.get(__ret__, 'vlan'))


@_utilities.lift_output_func(get_network_switch_vlan)
def get_network_switch_vlan_output(id: Optional[pulumi.Input[str]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNetworkSwitchVlanResult]:
    """
    Legacy VLAN configuration

    ## Example Usage

    ```python
    import pulumi
    import pulumi_openwrt as openwrt

    testing = openwrt.get_network_switch_vlan(id="testing")
    ```


    :param str id: Name of the section. This name is only used when interacting with UCI directly.
    """
    ...

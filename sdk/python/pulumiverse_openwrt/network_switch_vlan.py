# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['NetworkSwitchVlanArgs', 'NetworkSwitchVlan']

@pulumi.input_type
class NetworkSwitchVlanArgs:
    def __init__(__self__, *,
                 device: pulumi.Input[str],
                 ports: pulumi.Input[str],
                 vlan: pulumi.Input[int],
                 description: Optional[pulumi.Input[str]] = None,
                 vid: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a NetworkSwitchVlan resource.
        :param pulumi.Input[str] device: The switch to configure.
        :param pulumi.Input[str] ports: A string of space-separated port indicies that should be associated with the VLAN. Adding the suffix `"t"` to a port indicates that egress packets should be tagged, for example `"0 1 3t 5t"`.
        :param pulumi.Input[int] vlan: The VLAN "table index" to configure. This index corresponds to the order on LuCI's UI
        :param pulumi.Input[str] description: A human-readable description of the VLAN configuration.
        :param pulumi.Input[int] vid: The VLAN tag number to use.
        """
        pulumi.set(__self__, "device", device)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "vlan", vlan)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if vid is not None:
            pulumi.set(__self__, "vid", vid)

    @property
    @pulumi.getter
    def device(self) -> pulumi.Input[str]:
        """
        The switch to configure.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: pulumi.Input[str]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def ports(self) -> pulumi.Input[str]:
        """
        A string of space-separated port indicies that should be associated with the VLAN. Adding the suffix `"t"` to a port indicates that egress packets should be tagged, for example `"0 1 3t 5t"`.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: pulumi.Input[str]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter
    def vlan(self) -> pulumi.Input[int]:
        """
        The VLAN "table index" to configure. This index corresponds to the order on LuCI's UI
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: pulumi.Input[int]):
        pulumi.set(self, "vlan", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A human-readable description of the VLAN configuration.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def vid(self) -> Optional[pulumi.Input[int]]:
        """
        The VLAN tag number to use.
        """
        return pulumi.get(self, "vid")

    @vid.setter
    def vid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vid", value)


@pulumi.input_type
class _NetworkSwitchVlanState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 vid: Optional[pulumi.Input[int]] = None,
                 vlan: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering NetworkSwitchVlan resources.
        :param pulumi.Input[str] description: A human-readable description of the VLAN configuration.
        :param pulumi.Input[str] device: The switch to configure.
        :param pulumi.Input[str] ports: A string of space-separated port indicies that should be associated with the VLAN. Adding the suffix `"t"` to a port indicates that egress packets should be tagged, for example `"0 1 3t 5t"`.
        :param pulumi.Input[int] vid: The VLAN tag number to use.
        :param pulumi.Input[int] vlan: The VLAN "table index" to configure. This index corresponds to the order on LuCI's UI
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if vid is not None:
            pulumi.set(__self__, "vid", vid)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A human-readable description of the VLAN configuration.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        The switch to configure.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[str]]:
        """
        A string of space-separated port indicies that should be associated with the VLAN. Adding the suffix `"t"` to a port indicates that egress packets should be tagged, for example `"0 1 3t 5t"`.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter
    def vid(self) -> Optional[pulumi.Input[int]]:
        """
        The VLAN tag number to use.
        """
        return pulumi.get(self, "vid")

    @vid.setter
    def vid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vid", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        """
        The VLAN "table index" to configure. This index corresponds to the order on LuCI's UI
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)


class NetworkSwitchVlan(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 vid: Optional[pulumi.Input[int]] = None,
                 vlan: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Legacy VLAN configuration

        ## Import

        Find the Terraform id from LuCI's JSON-RPC API. One way to find this information is with `curl` and `jq`# curl \\

         --data '{"id"0, "method""foreach", "params"["network", "switch_vlan"]}' \\

         http://192.168.1.1/cgi-bin/luci/rpc/uci?auth=$AUTH_TOKEN \\

         | jq '.result | map({terraformId.[".name"]})' # This command will output something like# [

         {

         "terraformId""cfg123456",

         },

         {

         "terraformId""cfg123457",

         } ] # We'd then use the information to import the appropriate resource

        ```sh
         $ pulumi import openwrt:index/networkSwitchVlan:NetworkSwitchVlan administration cfg123456
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A human-readable description of the VLAN configuration.
        :param pulumi.Input[str] device: The switch to configure.
        :param pulumi.Input[str] ports: A string of space-separated port indicies that should be associated with the VLAN. Adding the suffix `"t"` to a port indicates that egress packets should be tagged, for example `"0 1 3t 5t"`.
        :param pulumi.Input[int] vid: The VLAN tag number to use.
        :param pulumi.Input[int] vlan: The VLAN "table index" to configure. This index corresponds to the order on LuCI's UI
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NetworkSwitchVlanArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Legacy VLAN configuration

        ## Import

        Find the Terraform id from LuCI's JSON-RPC API. One way to find this information is with `curl` and `jq`# curl \\

         --data '{"id"0, "method""foreach", "params"["network", "switch_vlan"]}' \\

         http://192.168.1.1/cgi-bin/luci/rpc/uci?auth=$AUTH_TOKEN \\

         | jq '.result | map({terraformId.[".name"]})' # This command will output something like# [

         {

         "terraformId""cfg123456",

         },

         {

         "terraformId""cfg123457",

         } ] # We'd then use the information to import the appropriate resource

        ```sh
         $ pulumi import openwrt:index/networkSwitchVlan:NetworkSwitchVlan administration cfg123456
        ```

        :param str resource_name: The name of the resource.
        :param NetworkSwitchVlanArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkSwitchVlanArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 vid: Optional[pulumi.Input[int]] = None,
                 vlan: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkSwitchVlanArgs.__new__(NetworkSwitchVlanArgs)

            __props__.__dict__["description"] = description
            if device is None and not opts.urn:
                raise TypeError("Missing required property 'device'")
            __props__.__dict__["device"] = device
            if ports is None and not opts.urn:
                raise TypeError("Missing required property 'ports'")
            __props__.__dict__["ports"] = ports
            __props__.__dict__["vid"] = vid
            if vlan is None and not opts.urn:
                raise TypeError("Missing required property 'vlan'")
            __props__.__dict__["vlan"] = vlan
        super(NetworkSwitchVlan, __self__).__init__(
            'openwrt:index/networkSwitchVlan:NetworkSwitchVlan',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            ports: Optional[pulumi.Input[str]] = None,
            vid: Optional[pulumi.Input[int]] = None,
            vlan: Optional[pulumi.Input[int]] = None) -> 'NetworkSwitchVlan':
        """
        Get an existing NetworkSwitchVlan resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A human-readable description of the VLAN configuration.
        :param pulumi.Input[str] device: The switch to configure.
        :param pulumi.Input[str] ports: A string of space-separated port indicies that should be associated with the VLAN. Adding the suffix `"t"` to a port indicates that egress packets should be tagged, for example `"0 1 3t 5t"`.
        :param pulumi.Input[int] vid: The VLAN tag number to use.
        :param pulumi.Input[int] vlan: The VLAN "table index" to configure. This index corresponds to the order on LuCI's UI
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetworkSwitchVlanState.__new__(_NetworkSwitchVlanState)

        __props__.__dict__["description"] = description
        __props__.__dict__["device"] = device
        __props__.__dict__["ports"] = ports
        __props__.__dict__["vid"] = vid
        __props__.__dict__["vlan"] = vlan
        return NetworkSwitchVlan(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        A human-readable description of the VLAN configuration.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[str]:
        """
        The switch to configure.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def ports(self) -> pulumi.Output[str]:
        """
        A string of space-separated port indicies that should be associated with the VLAN. Adding the suffix `"t"` to a port indicates that egress packets should be tagged, for example `"0 1 3t 5t"`.
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def vid(self) -> pulumi.Output[int]:
        """
        The VLAN tag number to use.
        """
        return pulumi.get(self, "vid")

    @property
    @pulumi.getter
    def vlan(self) -> pulumi.Output[int]:
        """
        The VLAN "table index" to configure. This index corresponds to the order on LuCI's UI
        """
        return pulumi.get(self, "vlan")


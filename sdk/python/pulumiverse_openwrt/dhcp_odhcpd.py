# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['DhcpOdhcpdArgs', 'DhcpOdhcpd']

@pulumi.input_type
class DhcpOdhcpdArgs:
    def __init__(__self__, *,
                 leasefile: Optional[pulumi.Input[str]] = None,
                 leasetrigger: Optional[pulumi.Input[str]] = None,
                 legacy: Optional[pulumi.Input[bool]] = None,
                 loglevel: Optional[pulumi.Input[int]] = None,
                 maindhcp: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a DhcpOdhcpd resource.
        :param pulumi.Input[str] leasefile: Location of the lease/hostfile for DHCPv4 and DHCPv6.
        :param pulumi.Input[str] leasetrigger: Location of the lease trigger script.
        :param pulumi.Input[bool] legacy: Enable DHCPv4 if the 'dhcp' section constains a `start` option, but no `dhcpv4` option set.
        :param pulumi.Input[int] loglevel: Syslog level priority (0-7).
        :param pulumi.Input[bool] maindhcp: Use odhcpd as the main DHCPv4 service.
        """
        if leasefile is not None:
            pulumi.set(__self__, "leasefile", leasefile)
        if leasetrigger is not None:
            pulumi.set(__self__, "leasetrigger", leasetrigger)
        if legacy is not None:
            pulumi.set(__self__, "legacy", legacy)
        if loglevel is not None:
            pulumi.set(__self__, "loglevel", loglevel)
        if maindhcp is not None:
            pulumi.set(__self__, "maindhcp", maindhcp)

    @property
    @pulumi.getter
    def leasefile(self) -> Optional[pulumi.Input[str]]:
        """
        Location of the lease/hostfile for DHCPv4 and DHCPv6.
        """
        return pulumi.get(self, "leasefile")

    @leasefile.setter
    def leasefile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "leasefile", value)

    @property
    @pulumi.getter
    def leasetrigger(self) -> Optional[pulumi.Input[str]]:
        """
        Location of the lease trigger script.
        """
        return pulumi.get(self, "leasetrigger")

    @leasetrigger.setter
    def leasetrigger(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "leasetrigger", value)

    @property
    @pulumi.getter
    def legacy(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable DHCPv4 if the 'dhcp' section constains a `start` option, but no `dhcpv4` option set.
        """
        return pulumi.get(self, "legacy")

    @legacy.setter
    def legacy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "legacy", value)

    @property
    @pulumi.getter
    def loglevel(self) -> Optional[pulumi.Input[int]]:
        """
        Syslog level priority (0-7).
        """
        return pulumi.get(self, "loglevel")

    @loglevel.setter
    def loglevel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "loglevel", value)

    @property
    @pulumi.getter
    def maindhcp(self) -> Optional[pulumi.Input[bool]]:
        """
        Use odhcpd as the main DHCPv4 service.
        """
        return pulumi.get(self, "maindhcp")

    @maindhcp.setter
    def maindhcp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "maindhcp", value)


@pulumi.input_type
class _DhcpOdhcpdState:
    def __init__(__self__, *,
                 leasefile: Optional[pulumi.Input[str]] = None,
                 leasetrigger: Optional[pulumi.Input[str]] = None,
                 legacy: Optional[pulumi.Input[bool]] = None,
                 loglevel: Optional[pulumi.Input[int]] = None,
                 maindhcp: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering DhcpOdhcpd resources.
        :param pulumi.Input[str] leasefile: Location of the lease/hostfile for DHCPv4 and DHCPv6.
        :param pulumi.Input[str] leasetrigger: Location of the lease trigger script.
        :param pulumi.Input[bool] legacy: Enable DHCPv4 if the 'dhcp' section constains a `start` option, but no `dhcpv4` option set.
        :param pulumi.Input[int] loglevel: Syslog level priority (0-7).
        :param pulumi.Input[bool] maindhcp: Use odhcpd as the main DHCPv4 service.
        """
        if leasefile is not None:
            pulumi.set(__self__, "leasefile", leasefile)
        if leasetrigger is not None:
            pulumi.set(__self__, "leasetrigger", leasetrigger)
        if legacy is not None:
            pulumi.set(__self__, "legacy", legacy)
        if loglevel is not None:
            pulumi.set(__self__, "loglevel", loglevel)
        if maindhcp is not None:
            pulumi.set(__self__, "maindhcp", maindhcp)

    @property
    @pulumi.getter
    def leasefile(self) -> Optional[pulumi.Input[str]]:
        """
        Location of the lease/hostfile for DHCPv4 and DHCPv6.
        """
        return pulumi.get(self, "leasefile")

    @leasefile.setter
    def leasefile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "leasefile", value)

    @property
    @pulumi.getter
    def leasetrigger(self) -> Optional[pulumi.Input[str]]:
        """
        Location of the lease trigger script.
        """
        return pulumi.get(self, "leasetrigger")

    @leasetrigger.setter
    def leasetrigger(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "leasetrigger", value)

    @property
    @pulumi.getter
    def legacy(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable DHCPv4 if the 'dhcp' section constains a `start` option, but no `dhcpv4` option set.
        """
        return pulumi.get(self, "legacy")

    @legacy.setter
    def legacy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "legacy", value)

    @property
    @pulumi.getter
    def loglevel(self) -> Optional[pulumi.Input[int]]:
        """
        Syslog level priority (0-7).
        """
        return pulumi.get(self, "loglevel")

    @loglevel.setter
    def loglevel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "loglevel", value)

    @property
    @pulumi.getter
    def maindhcp(self) -> Optional[pulumi.Input[bool]]:
        """
        Use odhcpd as the main DHCPv4 service.
        """
        return pulumi.get(self, "maindhcp")

    @maindhcp.setter
    def maindhcp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "maindhcp", value)


class DhcpOdhcpd(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 leasefile: Optional[pulumi.Input[str]] = None,
                 leasetrigger: Optional[pulumi.Input[str]] = None,
                 legacy: Optional[pulumi.Input[bool]] = None,
                 loglevel: Optional[pulumi.Input[int]] = None,
                 maindhcp: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        An embedded DHCP/DHCPv6/RA server & NDP relay.

        ## Import

        Find the Terraform id from LuCI's JSON-RPC API. One way to find this information is with `curl` and `jq`# curl \\

         --data '{"id"0, "method""foreach", "params"["dhcp", "odhcpd"]}' \\

         http://192.168.1.1/cgi-bin/luci/rpc/uci?auth=$AUTH_TOKEN \\

         | jq '.result | map({terraformId.[".name"]})' # This command will output something like# [

         {

         "terraformId""cfg123456",

         } ] # We'd then use the information to import the appropriate resource

        ```sh
         $ pulumi import openwrt:index/dhcpOdhcpd:DhcpOdhcpd this cfg123456
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] leasefile: Location of the lease/hostfile for DHCPv4 and DHCPv6.
        :param pulumi.Input[str] leasetrigger: Location of the lease trigger script.
        :param pulumi.Input[bool] legacy: Enable DHCPv4 if the 'dhcp' section constains a `start` option, but no `dhcpv4` option set.
        :param pulumi.Input[int] loglevel: Syslog level priority (0-7).
        :param pulumi.Input[bool] maindhcp: Use odhcpd as the main DHCPv4 service.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[DhcpOdhcpdArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        An embedded DHCP/DHCPv6/RA server & NDP relay.

        ## Import

        Find the Terraform id from LuCI's JSON-RPC API. One way to find this information is with `curl` and `jq`# curl \\

         --data '{"id"0, "method""foreach", "params"["dhcp", "odhcpd"]}' \\

         http://192.168.1.1/cgi-bin/luci/rpc/uci?auth=$AUTH_TOKEN \\

         | jq '.result | map({terraformId.[".name"]})' # This command will output something like# [

         {

         "terraformId""cfg123456",

         } ] # We'd then use the information to import the appropriate resource

        ```sh
         $ pulumi import openwrt:index/dhcpOdhcpd:DhcpOdhcpd this cfg123456
        ```

        :param str resource_name: The name of the resource.
        :param DhcpOdhcpdArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DhcpOdhcpdArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 leasefile: Optional[pulumi.Input[str]] = None,
                 leasetrigger: Optional[pulumi.Input[str]] = None,
                 legacy: Optional[pulumi.Input[bool]] = None,
                 loglevel: Optional[pulumi.Input[int]] = None,
                 maindhcp: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DhcpOdhcpdArgs.__new__(DhcpOdhcpdArgs)

            __props__.__dict__["leasefile"] = leasefile
            __props__.__dict__["leasetrigger"] = leasetrigger
            __props__.__dict__["legacy"] = legacy
            __props__.__dict__["loglevel"] = loglevel
            __props__.__dict__["maindhcp"] = maindhcp
        super(DhcpOdhcpd, __self__).__init__(
            'openwrt:index/dhcpOdhcpd:DhcpOdhcpd',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            leasefile: Optional[pulumi.Input[str]] = None,
            leasetrigger: Optional[pulumi.Input[str]] = None,
            legacy: Optional[pulumi.Input[bool]] = None,
            loglevel: Optional[pulumi.Input[int]] = None,
            maindhcp: Optional[pulumi.Input[bool]] = None) -> 'DhcpOdhcpd':
        """
        Get an existing DhcpOdhcpd resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] leasefile: Location of the lease/hostfile for DHCPv4 and DHCPv6.
        :param pulumi.Input[str] leasetrigger: Location of the lease trigger script.
        :param pulumi.Input[bool] legacy: Enable DHCPv4 if the 'dhcp' section constains a `start` option, but no `dhcpv4` option set.
        :param pulumi.Input[int] loglevel: Syslog level priority (0-7).
        :param pulumi.Input[bool] maindhcp: Use odhcpd as the main DHCPv4 service.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DhcpOdhcpdState.__new__(_DhcpOdhcpdState)

        __props__.__dict__["leasefile"] = leasefile
        __props__.__dict__["leasetrigger"] = leasetrigger
        __props__.__dict__["legacy"] = legacy
        __props__.__dict__["loglevel"] = loglevel
        __props__.__dict__["maindhcp"] = maindhcp
        return DhcpOdhcpd(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def leasefile(self) -> pulumi.Output[str]:
        """
        Location of the lease/hostfile for DHCPv4 and DHCPv6.
        """
        return pulumi.get(self, "leasefile")

    @property
    @pulumi.getter
    def leasetrigger(self) -> pulumi.Output[str]:
        """
        Location of the lease trigger script.
        """
        return pulumi.get(self, "leasetrigger")

    @property
    @pulumi.getter
    def legacy(self) -> pulumi.Output[bool]:
        """
        Enable DHCPv4 if the 'dhcp' section constains a `start` option, but no `dhcpv4` option set.
        """
        return pulumi.get(self, "legacy")

    @property
    @pulumi.getter
    def loglevel(self) -> pulumi.Output[int]:
        """
        Syslog level priority (0-7).
        """
        return pulumi.get(self, "loglevel")

    @property
    @pulumi.getter
    def maindhcp(self) -> pulumi.Output[bool]:
        """
        Use odhcpd as the main DHCPv4 service.
        """
        return pulumi.get(self, "maindhcp")


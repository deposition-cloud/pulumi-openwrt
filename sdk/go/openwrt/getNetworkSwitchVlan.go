// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openwrt

import (
	"context"
	"reflect"

	"github.com/deposition-cloud/pulumi-openwrt/sdk/go/openwrt/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Legacy VLAN configuration
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/deposition-cloud/pulumi-openwrt/sdk/go/openwrt"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := openwrt.LookupNetworkSwitchVlan(ctx, &openwrt.LookupNetworkSwitchVlanArgs{
//				Id: "testing",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupNetworkSwitchVlan(ctx *pulumi.Context, args *LookupNetworkSwitchVlanArgs, opts ...pulumi.InvokeOption) (*LookupNetworkSwitchVlanResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNetworkSwitchVlanResult
	err := ctx.Invoke("openwrt:index/getNetworkSwitchVlan:getNetworkSwitchVlan", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNetworkSwitchVlan.
type LookupNetworkSwitchVlanArgs struct {
	// Name of the section. This name is only used when interacting with UCI directly.
	Id string `pulumi:"id"`
}

// A collection of values returned by getNetworkSwitchVlan.
type LookupNetworkSwitchVlanResult struct {
	// A human-readable description of the VLAN configuration.
	Description string `pulumi:"description"`
	// The switch to configure.
	Device string `pulumi:"device"`
	// Name of the section. This name is only used when interacting with UCI directly.
	Id string `pulumi:"id"`
	// A string of space-separated port indicies that should be associated with the VLAN. Adding the suffix `"t"` to a port indicates that egress packets should be tagged, for example `"0 1 3t 5t"`.
	Ports string `pulumi:"ports"`
	// The VLAN tag number to use.
	Vid int `pulumi:"vid"`
	// The VLAN "table index" to configure. This index corresponds to the order on LuCI's UI
	Vlan int `pulumi:"vlan"`
}

func LookupNetworkSwitchVlanOutput(ctx *pulumi.Context, args LookupNetworkSwitchVlanOutputArgs, opts ...pulumi.InvokeOption) LookupNetworkSwitchVlanResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNetworkSwitchVlanResult, error) {
			args := v.(LookupNetworkSwitchVlanArgs)
			r, err := LookupNetworkSwitchVlan(ctx, &args, opts...)
			var s LookupNetworkSwitchVlanResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNetworkSwitchVlanResultOutput)
}

// A collection of arguments for invoking getNetworkSwitchVlan.
type LookupNetworkSwitchVlanOutputArgs struct {
	// Name of the section. This name is only used when interacting with UCI directly.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupNetworkSwitchVlanOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkSwitchVlanArgs)(nil)).Elem()
}

// A collection of values returned by getNetworkSwitchVlan.
type LookupNetworkSwitchVlanResultOutput struct{ *pulumi.OutputState }

func (LookupNetworkSwitchVlanResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkSwitchVlanResult)(nil)).Elem()
}

func (o LookupNetworkSwitchVlanResultOutput) ToLookupNetworkSwitchVlanResultOutput() LookupNetworkSwitchVlanResultOutput {
	return o
}

func (o LookupNetworkSwitchVlanResultOutput) ToLookupNetworkSwitchVlanResultOutputWithContext(ctx context.Context) LookupNetworkSwitchVlanResultOutput {
	return o
}

func (o LookupNetworkSwitchVlanResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupNetworkSwitchVlanResult] {
	return pulumix.Output[LookupNetworkSwitchVlanResult]{
		OutputState: o.OutputState,
	}
}

// A human-readable description of the VLAN configuration.
func (o LookupNetworkSwitchVlanResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkSwitchVlanResult) string { return v.Description }).(pulumi.StringOutput)
}

// The switch to configure.
func (o LookupNetworkSwitchVlanResultOutput) Device() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkSwitchVlanResult) string { return v.Device }).(pulumi.StringOutput)
}

// Name of the section. This name is only used when interacting with UCI directly.
func (o LookupNetworkSwitchVlanResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkSwitchVlanResult) string { return v.Id }).(pulumi.StringOutput)
}

// A string of space-separated port indicies that should be associated with the VLAN. Adding the suffix `"t"` to a port indicates that egress packets should be tagged, for example `"0 1 3t 5t"`.
func (o LookupNetworkSwitchVlanResultOutput) Ports() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkSwitchVlanResult) string { return v.Ports }).(pulumi.StringOutput)
}

// The VLAN tag number to use.
func (o LookupNetworkSwitchVlanResultOutput) Vid() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNetworkSwitchVlanResult) int { return v.Vid }).(pulumi.IntOutput)
}

// The VLAN "table index" to configure. This index corresponds to the order on LuCI's UI
func (o LookupNetworkSwitchVlanResultOutput) Vlan() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNetworkSwitchVlanResult) int { return v.Vlan }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNetworkSwitchVlanResultOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openwrt

import (
	"context"
	"reflect"

	"github.com/deposition-cloud/pulumi-openwrt/sdk/go/openwrt/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Assign a fixed IP address to hosts.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/deposition-cloud/pulumi-openwrt/sdk/go/openwrt"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := openwrt.LookupDhcpHost(ctx, &openwrt.LookupDhcpHostArgs{
//				Id: "testing",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDhcpHost(ctx *pulumi.Context, args *LookupDhcpHostArgs, opts ...pulumi.InvokeOption) (*LookupDhcpHostResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDhcpHostResult
	err := ctx.Invoke("openwrt:index/getDhcpHost:getDhcpHost", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDhcpHost.
type LookupDhcpHostArgs struct {
	// Name of the section. This name is only used when interacting with UCI directly.
	Id string `pulumi:"id"`
}

// A collection of values returned by getDhcpHost.
type LookupDhcpHostResult struct {
	// Add static forward and reverse DNS entries for this host.
	Dns bool `pulumi:"dns"`
	// Name of the section. This name is only used when interacting with UCI directly.
	Id string `pulumi:"id"`
	// The IP address to be used for this host, or `ignore` to ignore any DHCP request from this host.
	Ip string `pulumi:"ip"`
	// The hardware address(es) of this host, separated by spaces.
	Mac string `pulumi:"mac"`
	// Hostname to assign.
	Name string `pulumi:"name"`
}

func LookupDhcpHostOutput(ctx *pulumi.Context, args LookupDhcpHostOutputArgs, opts ...pulumi.InvokeOption) LookupDhcpHostResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDhcpHostResult, error) {
			args := v.(LookupDhcpHostArgs)
			r, err := LookupDhcpHost(ctx, &args, opts...)
			var s LookupDhcpHostResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDhcpHostResultOutput)
}

// A collection of arguments for invoking getDhcpHost.
type LookupDhcpHostOutputArgs struct {
	// Name of the section. This name is only used when interacting with UCI directly.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupDhcpHostOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDhcpHostArgs)(nil)).Elem()
}

// A collection of values returned by getDhcpHost.
type LookupDhcpHostResultOutput struct{ *pulumi.OutputState }

func (LookupDhcpHostResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDhcpHostResult)(nil)).Elem()
}

func (o LookupDhcpHostResultOutput) ToLookupDhcpHostResultOutput() LookupDhcpHostResultOutput {
	return o
}

func (o LookupDhcpHostResultOutput) ToLookupDhcpHostResultOutputWithContext(ctx context.Context) LookupDhcpHostResultOutput {
	return o
}

func (o LookupDhcpHostResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupDhcpHostResult] {
	return pulumix.Output[LookupDhcpHostResult]{
		OutputState: o.OutputState,
	}
}

// Add static forward and reverse DNS entries for this host.
func (o LookupDhcpHostResultOutput) Dns() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDhcpHostResult) bool { return v.Dns }).(pulumi.BoolOutput)
}

// Name of the section. This name is only used when interacting with UCI directly.
func (o LookupDhcpHostResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDhcpHostResult) string { return v.Id }).(pulumi.StringOutput)
}

// The IP address to be used for this host, or `ignore` to ignore any DHCP request from this host.
func (o LookupDhcpHostResultOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDhcpHostResult) string { return v.Ip }).(pulumi.StringOutput)
}

// The hardware address(es) of this host, separated by spaces.
func (o LookupDhcpHostResultOutput) Mac() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDhcpHostResult) string { return v.Mac }).(pulumi.StringOutput)
}

// Hostname to assign.
func (o LookupDhcpHostResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDhcpHostResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDhcpHostResultOutput{})
}

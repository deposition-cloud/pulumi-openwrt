// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openwrt

import (
	"context"
	"reflect"

	"github.com/deposition-cloud/pulumi-openwrt/sdk/go/openwrt/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Assign a fixed IP address to hosts.
//
// ## Import
//
// Find the Terraform id from LuCI's JSON-RPC API. One way to find this information is with `curl` and `jq`# curl \
//
//	--data '{"id"0, "method""foreach", "params"["dhcp", "host"]}' \
//
//	http://192.168.1.1/cgi-bin/luci/rpc/uci?auth=$AUTH_TOKEN \
//
//	| jq '.result | map({terraformId.[".name"]})' # This command will output something like# [
//
//	{
//
//	"terraformId""cfg123456",
//
//	} ] # We'd then use the information to import the appropriate resource
//
// ```sh
//
//	$ pulumi import openwrt:index/dhcpHost:DhcpHost this cfg123456
//
// ```
type DhcpHost struct {
	pulumi.CustomResourceState

	// Add static forward and reverse DNS entries for this host.
	Dns pulumi.BoolOutput `pulumi:"dns"`
	// The IP address to be used for this host, or `ignore` to ignore any DHCP request from this host.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// The hardware address(es) of this host, separated by spaces.
	Mac pulumi.StringOutput `pulumi:"mac"`
	// Hostname to assign.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewDhcpHost registers a new resource with the given unique name, arguments, and options.
func NewDhcpHost(ctx *pulumi.Context,
	name string, args *DhcpHostArgs, opts ...pulumi.ResourceOption) (*DhcpHost, error) {
	if args == nil {
		args = &DhcpHostArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DhcpHost
	err := ctx.RegisterResource("openwrt:index/dhcpHost:DhcpHost", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDhcpHost gets an existing DhcpHost resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDhcpHost(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DhcpHostState, opts ...pulumi.ResourceOption) (*DhcpHost, error) {
	var resource DhcpHost
	err := ctx.ReadResource("openwrt:index/dhcpHost:DhcpHost", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DhcpHost resources.
type dhcpHostState struct {
	// Add static forward and reverse DNS entries for this host.
	Dns *bool `pulumi:"dns"`
	// The IP address to be used for this host, or `ignore` to ignore any DHCP request from this host.
	Ip *string `pulumi:"ip"`
	// The hardware address(es) of this host, separated by spaces.
	Mac *string `pulumi:"mac"`
	// Hostname to assign.
	Name *string `pulumi:"name"`
}

type DhcpHostState struct {
	// Add static forward and reverse DNS entries for this host.
	Dns pulumi.BoolPtrInput
	// The IP address to be used for this host, or `ignore` to ignore any DHCP request from this host.
	Ip pulumi.StringPtrInput
	// The hardware address(es) of this host, separated by spaces.
	Mac pulumi.StringPtrInput
	// Hostname to assign.
	Name pulumi.StringPtrInput
}

func (DhcpHostState) ElementType() reflect.Type {
	return reflect.TypeOf((*dhcpHostState)(nil)).Elem()
}

type dhcpHostArgs struct {
	// Add static forward and reverse DNS entries for this host.
	Dns *bool `pulumi:"dns"`
	// The IP address to be used for this host, or `ignore` to ignore any DHCP request from this host.
	Ip *string `pulumi:"ip"`
	// The hardware address(es) of this host, separated by spaces.
	Mac *string `pulumi:"mac"`
	// Hostname to assign.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a DhcpHost resource.
type DhcpHostArgs struct {
	// Add static forward and reverse DNS entries for this host.
	Dns pulumi.BoolPtrInput
	// The IP address to be used for this host, or `ignore` to ignore any DHCP request from this host.
	Ip pulumi.StringPtrInput
	// The hardware address(es) of this host, separated by spaces.
	Mac pulumi.StringPtrInput
	// Hostname to assign.
	Name pulumi.StringPtrInput
}

func (DhcpHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dhcpHostArgs)(nil)).Elem()
}

type DhcpHostInput interface {
	pulumi.Input

	ToDhcpHostOutput() DhcpHostOutput
	ToDhcpHostOutputWithContext(ctx context.Context) DhcpHostOutput
}

func (*DhcpHost) ElementType() reflect.Type {
	return reflect.TypeOf((**DhcpHost)(nil)).Elem()
}

func (i *DhcpHost) ToDhcpHostOutput() DhcpHostOutput {
	return i.ToDhcpHostOutputWithContext(context.Background())
}

func (i *DhcpHost) ToDhcpHostOutputWithContext(ctx context.Context) DhcpHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DhcpHostOutput)
}

func (i *DhcpHost) ToOutput(ctx context.Context) pulumix.Output[*DhcpHost] {
	return pulumix.Output[*DhcpHost]{
		OutputState: i.ToDhcpHostOutputWithContext(ctx).OutputState,
	}
}

// DhcpHostArrayInput is an input type that accepts DhcpHostArray and DhcpHostArrayOutput values.
// You can construct a concrete instance of `DhcpHostArrayInput` via:
//
//	DhcpHostArray{ DhcpHostArgs{...} }
type DhcpHostArrayInput interface {
	pulumi.Input

	ToDhcpHostArrayOutput() DhcpHostArrayOutput
	ToDhcpHostArrayOutputWithContext(context.Context) DhcpHostArrayOutput
}

type DhcpHostArray []DhcpHostInput

func (DhcpHostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DhcpHost)(nil)).Elem()
}

func (i DhcpHostArray) ToDhcpHostArrayOutput() DhcpHostArrayOutput {
	return i.ToDhcpHostArrayOutputWithContext(context.Background())
}

func (i DhcpHostArray) ToDhcpHostArrayOutputWithContext(ctx context.Context) DhcpHostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DhcpHostArrayOutput)
}

func (i DhcpHostArray) ToOutput(ctx context.Context) pulumix.Output[[]*DhcpHost] {
	return pulumix.Output[[]*DhcpHost]{
		OutputState: i.ToDhcpHostArrayOutputWithContext(ctx).OutputState,
	}
}

// DhcpHostMapInput is an input type that accepts DhcpHostMap and DhcpHostMapOutput values.
// You can construct a concrete instance of `DhcpHostMapInput` via:
//
//	DhcpHostMap{ "key": DhcpHostArgs{...} }
type DhcpHostMapInput interface {
	pulumi.Input

	ToDhcpHostMapOutput() DhcpHostMapOutput
	ToDhcpHostMapOutputWithContext(context.Context) DhcpHostMapOutput
}

type DhcpHostMap map[string]DhcpHostInput

func (DhcpHostMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DhcpHost)(nil)).Elem()
}

func (i DhcpHostMap) ToDhcpHostMapOutput() DhcpHostMapOutput {
	return i.ToDhcpHostMapOutputWithContext(context.Background())
}

func (i DhcpHostMap) ToDhcpHostMapOutputWithContext(ctx context.Context) DhcpHostMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DhcpHostMapOutput)
}

func (i DhcpHostMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*DhcpHost] {
	return pulumix.Output[map[string]*DhcpHost]{
		OutputState: i.ToDhcpHostMapOutputWithContext(ctx).OutputState,
	}
}

type DhcpHostOutput struct{ *pulumi.OutputState }

func (DhcpHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DhcpHost)(nil)).Elem()
}

func (o DhcpHostOutput) ToDhcpHostOutput() DhcpHostOutput {
	return o
}

func (o DhcpHostOutput) ToDhcpHostOutputWithContext(ctx context.Context) DhcpHostOutput {
	return o
}

func (o DhcpHostOutput) ToOutput(ctx context.Context) pulumix.Output[*DhcpHost] {
	return pulumix.Output[*DhcpHost]{
		OutputState: o.OutputState,
	}
}

// Add static forward and reverse DNS entries for this host.
func (o DhcpHostOutput) Dns() pulumi.BoolOutput {
	return o.ApplyT(func(v *DhcpHost) pulumi.BoolOutput { return v.Dns }).(pulumi.BoolOutput)
}

// The IP address to be used for this host, or `ignore` to ignore any DHCP request from this host.
func (o DhcpHostOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *DhcpHost) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// The hardware address(es) of this host, separated by spaces.
func (o DhcpHostOutput) Mac() pulumi.StringOutput {
	return o.ApplyT(func(v *DhcpHost) pulumi.StringOutput { return v.Mac }).(pulumi.StringOutput)
}

// Hostname to assign.
func (o DhcpHostOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DhcpHost) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type DhcpHostArrayOutput struct{ *pulumi.OutputState }

func (DhcpHostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DhcpHost)(nil)).Elem()
}

func (o DhcpHostArrayOutput) ToDhcpHostArrayOutput() DhcpHostArrayOutput {
	return o
}

func (o DhcpHostArrayOutput) ToDhcpHostArrayOutputWithContext(ctx context.Context) DhcpHostArrayOutput {
	return o
}

func (o DhcpHostArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*DhcpHost] {
	return pulumix.Output[[]*DhcpHost]{
		OutputState: o.OutputState,
	}
}

func (o DhcpHostArrayOutput) Index(i pulumi.IntInput) DhcpHostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DhcpHost {
		return vs[0].([]*DhcpHost)[vs[1].(int)]
	}).(DhcpHostOutput)
}

type DhcpHostMapOutput struct{ *pulumi.OutputState }

func (DhcpHostMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DhcpHost)(nil)).Elem()
}

func (o DhcpHostMapOutput) ToDhcpHostMapOutput() DhcpHostMapOutput {
	return o
}

func (o DhcpHostMapOutput) ToDhcpHostMapOutputWithContext(ctx context.Context) DhcpHostMapOutput {
	return o
}

func (o DhcpHostMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*DhcpHost] {
	return pulumix.Output[map[string]*DhcpHost]{
		OutputState: o.OutputState,
	}
}

func (o DhcpHostMapOutput) MapIndex(k pulumi.StringInput) DhcpHostOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DhcpHost {
		return vs[0].(map[string]*DhcpHost)[vs[1].(string)]
	}).(DhcpHostOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DhcpHostInput)(nil)).Elem(), &DhcpHost{})
	pulumi.RegisterInputType(reflect.TypeOf((*DhcpHostArrayInput)(nil)).Elem(), DhcpHostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DhcpHostMapInput)(nil)).Elem(), DhcpHostMap{})
	pulumi.RegisterOutputType(DhcpHostOutput{})
	pulumi.RegisterOutputType(DhcpHostArrayOutput{})
	pulumi.RegisterOutputType(DhcpHostMapOutput{})
}

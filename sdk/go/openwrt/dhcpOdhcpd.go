// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openwrt

import (
	"context"
	"reflect"

	"github.com/deposition-cloud/pulumi-openwrt/sdk/go/openwrt/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// An embedded DHCP/DHCPv6/RA server & NDP relay.
//
// ## Import
//
// Find the Terraform id from LuCI's JSON-RPC API. One way to find this information is with `curl` and `jq`# curl \
//
//	--data '{"id"0, "method""foreach", "params"["dhcp", "odhcpd"]}' \
//
//	http://192.168.1.1/cgi-bin/luci/rpc/uci?auth=$AUTH_TOKEN \
//
//	| jq '.result | map({terraformId.[".name"]})' # This command will output something like# [
//
//	{
//
//	"terraformId""cfg123456",
//
//	} ] # We'd then use the information to import the appropriate resource
//
// ```sh
//
//	$ pulumi import openwrt:index/dhcpOdhcpd:DhcpOdhcpd this cfg123456
//
// ```
type DhcpOdhcpd struct {
	pulumi.CustomResourceState

	// Location of the lease/hostfile for DHCPv4 and DHCPv6.
	Leasefile pulumi.StringOutput `pulumi:"leasefile"`
	// Location of the lease trigger script.
	Leasetrigger pulumi.StringOutput `pulumi:"leasetrigger"`
	// Enable DHCPv4 if the 'dhcp' section constains a `start` option, but no `dhcpv4` option set.
	Legacy pulumi.BoolOutput `pulumi:"legacy"`
	// Syslog level priority (0-7).
	Loglevel pulumi.IntOutput `pulumi:"loglevel"`
	// Use odhcpd as the main DHCPv4 service.
	Maindhcp pulumi.BoolOutput `pulumi:"maindhcp"`
}

// NewDhcpOdhcpd registers a new resource with the given unique name, arguments, and options.
func NewDhcpOdhcpd(ctx *pulumi.Context,
	name string, args *DhcpOdhcpdArgs, opts ...pulumi.ResourceOption) (*DhcpOdhcpd, error) {
	if args == nil {
		args = &DhcpOdhcpdArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DhcpOdhcpd
	err := ctx.RegisterResource("openwrt:index/dhcpOdhcpd:DhcpOdhcpd", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDhcpOdhcpd gets an existing DhcpOdhcpd resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDhcpOdhcpd(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DhcpOdhcpdState, opts ...pulumi.ResourceOption) (*DhcpOdhcpd, error) {
	var resource DhcpOdhcpd
	err := ctx.ReadResource("openwrt:index/dhcpOdhcpd:DhcpOdhcpd", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DhcpOdhcpd resources.
type dhcpOdhcpdState struct {
	// Location of the lease/hostfile for DHCPv4 and DHCPv6.
	Leasefile *string `pulumi:"leasefile"`
	// Location of the lease trigger script.
	Leasetrigger *string `pulumi:"leasetrigger"`
	// Enable DHCPv4 if the 'dhcp' section constains a `start` option, but no `dhcpv4` option set.
	Legacy *bool `pulumi:"legacy"`
	// Syslog level priority (0-7).
	Loglevel *int `pulumi:"loglevel"`
	// Use odhcpd as the main DHCPv4 service.
	Maindhcp *bool `pulumi:"maindhcp"`
}

type DhcpOdhcpdState struct {
	// Location of the lease/hostfile for DHCPv4 and DHCPv6.
	Leasefile pulumi.StringPtrInput
	// Location of the lease trigger script.
	Leasetrigger pulumi.StringPtrInput
	// Enable DHCPv4 if the 'dhcp' section constains a `start` option, but no `dhcpv4` option set.
	Legacy pulumi.BoolPtrInput
	// Syslog level priority (0-7).
	Loglevel pulumi.IntPtrInput
	// Use odhcpd as the main DHCPv4 service.
	Maindhcp pulumi.BoolPtrInput
}

func (DhcpOdhcpdState) ElementType() reflect.Type {
	return reflect.TypeOf((*dhcpOdhcpdState)(nil)).Elem()
}

type dhcpOdhcpdArgs struct {
	// Location of the lease/hostfile for DHCPv4 and DHCPv6.
	Leasefile *string `pulumi:"leasefile"`
	// Location of the lease trigger script.
	Leasetrigger *string `pulumi:"leasetrigger"`
	// Enable DHCPv4 if the 'dhcp' section constains a `start` option, but no `dhcpv4` option set.
	Legacy *bool `pulumi:"legacy"`
	// Syslog level priority (0-7).
	Loglevel *int `pulumi:"loglevel"`
	// Use odhcpd as the main DHCPv4 service.
	Maindhcp *bool `pulumi:"maindhcp"`
}

// The set of arguments for constructing a DhcpOdhcpd resource.
type DhcpOdhcpdArgs struct {
	// Location of the lease/hostfile for DHCPv4 and DHCPv6.
	Leasefile pulumi.StringPtrInput
	// Location of the lease trigger script.
	Leasetrigger pulumi.StringPtrInput
	// Enable DHCPv4 if the 'dhcp' section constains a `start` option, but no `dhcpv4` option set.
	Legacy pulumi.BoolPtrInput
	// Syslog level priority (0-7).
	Loglevel pulumi.IntPtrInput
	// Use odhcpd as the main DHCPv4 service.
	Maindhcp pulumi.BoolPtrInput
}

func (DhcpOdhcpdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dhcpOdhcpdArgs)(nil)).Elem()
}

type DhcpOdhcpdInput interface {
	pulumi.Input

	ToDhcpOdhcpdOutput() DhcpOdhcpdOutput
	ToDhcpOdhcpdOutputWithContext(ctx context.Context) DhcpOdhcpdOutput
}

func (*DhcpOdhcpd) ElementType() reflect.Type {
	return reflect.TypeOf((**DhcpOdhcpd)(nil)).Elem()
}

func (i *DhcpOdhcpd) ToDhcpOdhcpdOutput() DhcpOdhcpdOutput {
	return i.ToDhcpOdhcpdOutputWithContext(context.Background())
}

func (i *DhcpOdhcpd) ToDhcpOdhcpdOutputWithContext(ctx context.Context) DhcpOdhcpdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DhcpOdhcpdOutput)
}

func (i *DhcpOdhcpd) ToOutput(ctx context.Context) pulumix.Output[*DhcpOdhcpd] {
	return pulumix.Output[*DhcpOdhcpd]{
		OutputState: i.ToDhcpOdhcpdOutputWithContext(ctx).OutputState,
	}
}

// DhcpOdhcpdArrayInput is an input type that accepts DhcpOdhcpdArray and DhcpOdhcpdArrayOutput values.
// You can construct a concrete instance of `DhcpOdhcpdArrayInput` via:
//
//	DhcpOdhcpdArray{ DhcpOdhcpdArgs{...} }
type DhcpOdhcpdArrayInput interface {
	pulumi.Input

	ToDhcpOdhcpdArrayOutput() DhcpOdhcpdArrayOutput
	ToDhcpOdhcpdArrayOutputWithContext(context.Context) DhcpOdhcpdArrayOutput
}

type DhcpOdhcpdArray []DhcpOdhcpdInput

func (DhcpOdhcpdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DhcpOdhcpd)(nil)).Elem()
}

func (i DhcpOdhcpdArray) ToDhcpOdhcpdArrayOutput() DhcpOdhcpdArrayOutput {
	return i.ToDhcpOdhcpdArrayOutputWithContext(context.Background())
}

func (i DhcpOdhcpdArray) ToDhcpOdhcpdArrayOutputWithContext(ctx context.Context) DhcpOdhcpdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DhcpOdhcpdArrayOutput)
}

func (i DhcpOdhcpdArray) ToOutput(ctx context.Context) pulumix.Output[[]*DhcpOdhcpd] {
	return pulumix.Output[[]*DhcpOdhcpd]{
		OutputState: i.ToDhcpOdhcpdArrayOutputWithContext(ctx).OutputState,
	}
}

// DhcpOdhcpdMapInput is an input type that accepts DhcpOdhcpdMap and DhcpOdhcpdMapOutput values.
// You can construct a concrete instance of `DhcpOdhcpdMapInput` via:
//
//	DhcpOdhcpdMap{ "key": DhcpOdhcpdArgs{...} }
type DhcpOdhcpdMapInput interface {
	pulumi.Input

	ToDhcpOdhcpdMapOutput() DhcpOdhcpdMapOutput
	ToDhcpOdhcpdMapOutputWithContext(context.Context) DhcpOdhcpdMapOutput
}

type DhcpOdhcpdMap map[string]DhcpOdhcpdInput

func (DhcpOdhcpdMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DhcpOdhcpd)(nil)).Elem()
}

func (i DhcpOdhcpdMap) ToDhcpOdhcpdMapOutput() DhcpOdhcpdMapOutput {
	return i.ToDhcpOdhcpdMapOutputWithContext(context.Background())
}

func (i DhcpOdhcpdMap) ToDhcpOdhcpdMapOutputWithContext(ctx context.Context) DhcpOdhcpdMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DhcpOdhcpdMapOutput)
}

func (i DhcpOdhcpdMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*DhcpOdhcpd] {
	return pulumix.Output[map[string]*DhcpOdhcpd]{
		OutputState: i.ToDhcpOdhcpdMapOutputWithContext(ctx).OutputState,
	}
}

type DhcpOdhcpdOutput struct{ *pulumi.OutputState }

func (DhcpOdhcpdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DhcpOdhcpd)(nil)).Elem()
}

func (o DhcpOdhcpdOutput) ToDhcpOdhcpdOutput() DhcpOdhcpdOutput {
	return o
}

func (o DhcpOdhcpdOutput) ToDhcpOdhcpdOutputWithContext(ctx context.Context) DhcpOdhcpdOutput {
	return o
}

func (o DhcpOdhcpdOutput) ToOutput(ctx context.Context) pulumix.Output[*DhcpOdhcpd] {
	return pulumix.Output[*DhcpOdhcpd]{
		OutputState: o.OutputState,
	}
}

// Location of the lease/hostfile for DHCPv4 and DHCPv6.
func (o DhcpOdhcpdOutput) Leasefile() pulumi.StringOutput {
	return o.ApplyT(func(v *DhcpOdhcpd) pulumi.StringOutput { return v.Leasefile }).(pulumi.StringOutput)
}

// Location of the lease trigger script.
func (o DhcpOdhcpdOutput) Leasetrigger() pulumi.StringOutput {
	return o.ApplyT(func(v *DhcpOdhcpd) pulumi.StringOutput { return v.Leasetrigger }).(pulumi.StringOutput)
}

// Enable DHCPv4 if the 'dhcp' section constains a `start` option, but no `dhcpv4` option set.
func (o DhcpOdhcpdOutput) Legacy() pulumi.BoolOutput {
	return o.ApplyT(func(v *DhcpOdhcpd) pulumi.BoolOutput { return v.Legacy }).(pulumi.BoolOutput)
}

// Syslog level priority (0-7).
func (o DhcpOdhcpdOutput) Loglevel() pulumi.IntOutput {
	return o.ApplyT(func(v *DhcpOdhcpd) pulumi.IntOutput { return v.Loglevel }).(pulumi.IntOutput)
}

// Use odhcpd as the main DHCPv4 service.
func (o DhcpOdhcpdOutput) Maindhcp() pulumi.BoolOutput {
	return o.ApplyT(func(v *DhcpOdhcpd) pulumi.BoolOutput { return v.Maindhcp }).(pulumi.BoolOutput)
}

type DhcpOdhcpdArrayOutput struct{ *pulumi.OutputState }

func (DhcpOdhcpdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DhcpOdhcpd)(nil)).Elem()
}

func (o DhcpOdhcpdArrayOutput) ToDhcpOdhcpdArrayOutput() DhcpOdhcpdArrayOutput {
	return o
}

func (o DhcpOdhcpdArrayOutput) ToDhcpOdhcpdArrayOutputWithContext(ctx context.Context) DhcpOdhcpdArrayOutput {
	return o
}

func (o DhcpOdhcpdArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*DhcpOdhcpd] {
	return pulumix.Output[[]*DhcpOdhcpd]{
		OutputState: o.OutputState,
	}
}

func (o DhcpOdhcpdArrayOutput) Index(i pulumi.IntInput) DhcpOdhcpdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DhcpOdhcpd {
		return vs[0].([]*DhcpOdhcpd)[vs[1].(int)]
	}).(DhcpOdhcpdOutput)
}

type DhcpOdhcpdMapOutput struct{ *pulumi.OutputState }

func (DhcpOdhcpdMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DhcpOdhcpd)(nil)).Elem()
}

func (o DhcpOdhcpdMapOutput) ToDhcpOdhcpdMapOutput() DhcpOdhcpdMapOutput {
	return o
}

func (o DhcpOdhcpdMapOutput) ToDhcpOdhcpdMapOutputWithContext(ctx context.Context) DhcpOdhcpdMapOutput {
	return o
}

func (o DhcpOdhcpdMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*DhcpOdhcpd] {
	return pulumix.Output[map[string]*DhcpOdhcpd]{
		OutputState: o.OutputState,
	}
}

func (o DhcpOdhcpdMapOutput) MapIndex(k pulumi.StringInput) DhcpOdhcpdOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DhcpOdhcpd {
		return vs[0].(map[string]*DhcpOdhcpd)[vs[1].(string)]
	}).(DhcpOdhcpdOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DhcpOdhcpdInput)(nil)).Elem(), &DhcpOdhcpd{})
	pulumi.RegisterInputType(reflect.TypeOf((*DhcpOdhcpdArrayInput)(nil)).Elem(), DhcpOdhcpdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DhcpOdhcpdMapInput)(nil)).Elem(), DhcpOdhcpdMap{})
	pulumi.RegisterOutputType(DhcpOdhcpdOutput{})
	pulumi.RegisterOutputType(DhcpOdhcpdArrayOutput{})
	pulumi.RegisterOutputType(DhcpOdhcpdMapOutput{})
}

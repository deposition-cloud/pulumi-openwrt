// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openwrt

import (
	"context"
	"reflect"

	"github.com/deposition-cloud/pulumi-openwrt/sdk/go/openwrt/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// A physical or virtual "device" in OpenWrt jargon. Commonly referred to as an "interface" in other networking jargon.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/deposition-cloud/pulumi-openwrt/sdk/go/openwrt"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := openwrt.LookupNetworkDevice(ctx, &openwrt.LookupNetworkDeviceArgs{
//				Id: "br_testing",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupNetworkDevice(ctx *pulumi.Context, args *LookupNetworkDeviceArgs, opts ...pulumi.InvokeOption) (*LookupNetworkDeviceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNetworkDeviceResult
	err := ctx.Invoke("openwrt:index/getNetworkDevice:getNetworkDevice", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNetworkDevice.
type LookupNetworkDeviceArgs struct {
	// Name of the section. This name is only used when interacting with UCI directly.
	Id string `pulumi:"id"`
}

// A collection of values returned by getNetworkDevice.
type LookupNetworkDeviceResult struct {
	// Bring up the bridge device even if no ports are attached
	BridgeEmpty bool `pulumi:"bridgeEmpty"`
	// Amount of Duplicate Address Detection probes to send
	Dadtransmits int `pulumi:"dadtransmits"`
	// Name of the section. This name is only used when interacting with UCI directly.
	Id string `pulumi:"id"`
	// Enable IPv6 for the device.
	Ipv6 bool `pulumi:"ipv6"`
	// MAC Address of the device.
	Macaddr string `pulumi:"macaddr"`
	// Maximum Transmissible Unit.
	Mtu int `pulumi:"mtu"`
	// Maximum Transmissible Unit for IPv6.
	Mtu6 int `pulumi:"mtu6"`
	// Name of the device. This name is referenced in other network configuration.
	Name string `pulumi:"name"`
	// Specifies the wired ports to attach to this bridge.
	Ports []string `pulumi:"ports"`
	// Transmission queue length.
	Txqueuelen int `pulumi:"txqueuelen"`
	// The type of device. Currently, only "bridge" is supported.
	Type string `pulumi:"type"`
}

func LookupNetworkDeviceOutput(ctx *pulumi.Context, args LookupNetworkDeviceOutputArgs, opts ...pulumi.InvokeOption) LookupNetworkDeviceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNetworkDeviceResult, error) {
			args := v.(LookupNetworkDeviceArgs)
			r, err := LookupNetworkDevice(ctx, &args, opts...)
			var s LookupNetworkDeviceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNetworkDeviceResultOutput)
}

// A collection of arguments for invoking getNetworkDevice.
type LookupNetworkDeviceOutputArgs struct {
	// Name of the section. This name is only used when interacting with UCI directly.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupNetworkDeviceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkDeviceArgs)(nil)).Elem()
}

// A collection of values returned by getNetworkDevice.
type LookupNetworkDeviceResultOutput struct{ *pulumi.OutputState }

func (LookupNetworkDeviceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkDeviceResult)(nil)).Elem()
}

func (o LookupNetworkDeviceResultOutput) ToLookupNetworkDeviceResultOutput() LookupNetworkDeviceResultOutput {
	return o
}

func (o LookupNetworkDeviceResultOutput) ToLookupNetworkDeviceResultOutputWithContext(ctx context.Context) LookupNetworkDeviceResultOutput {
	return o
}

func (o LookupNetworkDeviceResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupNetworkDeviceResult] {
	return pulumix.Output[LookupNetworkDeviceResult]{
		OutputState: o.OutputState,
	}
}

// Bring up the bridge device even if no ports are attached
func (o LookupNetworkDeviceResultOutput) BridgeEmpty() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNetworkDeviceResult) bool { return v.BridgeEmpty }).(pulumi.BoolOutput)
}

// Amount of Duplicate Address Detection probes to send
func (o LookupNetworkDeviceResultOutput) Dadtransmits() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNetworkDeviceResult) int { return v.Dadtransmits }).(pulumi.IntOutput)
}

// Name of the section. This name is only used when interacting with UCI directly.
func (o LookupNetworkDeviceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkDeviceResult) string { return v.Id }).(pulumi.StringOutput)
}

// Enable IPv6 for the device.
func (o LookupNetworkDeviceResultOutput) Ipv6() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNetworkDeviceResult) bool { return v.Ipv6 }).(pulumi.BoolOutput)
}

// MAC Address of the device.
func (o LookupNetworkDeviceResultOutput) Macaddr() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkDeviceResult) string { return v.Macaddr }).(pulumi.StringOutput)
}

// Maximum Transmissible Unit.
func (o LookupNetworkDeviceResultOutput) Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNetworkDeviceResult) int { return v.Mtu }).(pulumi.IntOutput)
}

// Maximum Transmissible Unit for IPv6.
func (o LookupNetworkDeviceResultOutput) Mtu6() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNetworkDeviceResult) int { return v.Mtu6 }).(pulumi.IntOutput)
}

// Name of the device. This name is referenced in other network configuration.
func (o LookupNetworkDeviceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkDeviceResult) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the wired ports to attach to this bridge.
func (o LookupNetworkDeviceResultOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNetworkDeviceResult) []string { return v.Ports }).(pulumi.StringArrayOutput)
}

// Transmission queue length.
func (o LookupNetworkDeviceResultOutput) Txqueuelen() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNetworkDeviceResult) int { return v.Txqueuelen }).(pulumi.IntOutput)
}

// The type of device. Currently, only "bridge" is supported.
func (o LookupNetworkDeviceResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkDeviceResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNetworkDeviceResultOutput{})
}

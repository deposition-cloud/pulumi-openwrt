// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openwrt

import (
	"context"
	"reflect"

	"github.com/deposition-cloud/pulumi-openwrt/sdk/go/openwrt/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// A logic network.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/deposition-cloud/pulumi-openwrt/sdk/go/openwrt"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := openwrt.LookupNetworkInterface(ctx, &openwrt.LookupNetworkInterfaceArgs{
//				Id: "testing",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupNetworkInterface(ctx *pulumi.Context, args *LookupNetworkInterfaceArgs, opts ...pulumi.InvokeOption) (*LookupNetworkInterfaceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNetworkInterfaceResult
	err := ctx.Invoke("openwrt:index/getNetworkInterface:getNetworkInterface", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNetworkInterface.
type LookupNetworkInterfaceArgs struct {
	// Name of the section. This name is only used when interacting with UCI directly.
	Id string `pulumi:"id"`
}

// A collection of values returned by getNetworkInterface.
type LookupNetworkInterfaceResult struct {
	// Specifies whether to bring up this interface on boot.
	Auto   bool   `pulumi:"auto"`
	Device string `pulumi:"device"`
	// Disables this interface.
	Disabled bool `pulumi:"disabled"`
	// DNS servers
	Dns []string `pulumi:"dns"`
	// Gateway of the interface
	Gateway string `pulumi:"gateway"`
	// Name of the section. This name is only used when interacting with UCI directly.
	Id string `pulumi:"id"`
	// Delegate a prefix of given length to this interface
	Ip6assign int `pulumi:"ip6assign"`
	// IP address of the interface
	Ipaddr string `pulumi:"ipaddr"`
	// Override the MAC Address of this interface.
	Macaddr string `pulumi:"macaddr"`
	// Override the default MTU on this interface.
	Mtu int `pulumi:"mtu"`
	// Netmask of the interface
	Netmask string `pulumi:"netmask"`
	// Use DHCP-provided DNS servers.
	Peerdns bool `pulumi:"peerdns"`
	// The protocol type of the interface. Currently, only "dhcp, and "static" are supported.
	Proto string `pulumi:"proto"`
	// Behavior for requesting address. Can only be one of "force", "try", or "none".
	Reqaddress string `pulumi:"reqaddress"`
	// Behavior for requesting prefixes. Currently, only "auto" is supported.
	Reqprefix string `pulumi:"reqprefix"`
}

func LookupNetworkInterfaceOutput(ctx *pulumi.Context, args LookupNetworkInterfaceOutputArgs, opts ...pulumi.InvokeOption) LookupNetworkInterfaceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNetworkInterfaceResult, error) {
			args := v.(LookupNetworkInterfaceArgs)
			r, err := LookupNetworkInterface(ctx, &args, opts...)
			var s LookupNetworkInterfaceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNetworkInterfaceResultOutput)
}

// A collection of arguments for invoking getNetworkInterface.
type LookupNetworkInterfaceOutputArgs struct {
	// Name of the section. This name is only used when interacting with UCI directly.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupNetworkInterfaceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkInterfaceArgs)(nil)).Elem()
}

// A collection of values returned by getNetworkInterface.
type LookupNetworkInterfaceResultOutput struct{ *pulumi.OutputState }

func (LookupNetworkInterfaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkInterfaceResult)(nil)).Elem()
}

func (o LookupNetworkInterfaceResultOutput) ToLookupNetworkInterfaceResultOutput() LookupNetworkInterfaceResultOutput {
	return o
}

func (o LookupNetworkInterfaceResultOutput) ToLookupNetworkInterfaceResultOutputWithContext(ctx context.Context) LookupNetworkInterfaceResultOutput {
	return o
}

func (o LookupNetworkInterfaceResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupNetworkInterfaceResult] {
	return pulumix.Output[LookupNetworkInterfaceResult]{
		OutputState: o.OutputState,
	}
}

// Specifies whether to bring up this interface on boot.
func (o LookupNetworkInterfaceResultOutput) Auto() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNetworkInterfaceResult) bool { return v.Auto }).(pulumi.BoolOutput)
}

func (o LookupNetworkInterfaceResultOutput) Device() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkInterfaceResult) string { return v.Device }).(pulumi.StringOutput)
}

// Disables this interface.
func (o LookupNetworkInterfaceResultOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNetworkInterfaceResult) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// DNS servers
func (o LookupNetworkInterfaceResultOutput) Dns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNetworkInterfaceResult) []string { return v.Dns }).(pulumi.StringArrayOutput)
}

// Gateway of the interface
func (o LookupNetworkInterfaceResultOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkInterfaceResult) string { return v.Gateway }).(pulumi.StringOutput)
}

// Name of the section. This name is only used when interacting with UCI directly.
func (o LookupNetworkInterfaceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkInterfaceResult) string { return v.Id }).(pulumi.StringOutput)
}

// Delegate a prefix of given length to this interface
func (o LookupNetworkInterfaceResultOutput) Ip6assign() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNetworkInterfaceResult) int { return v.Ip6assign }).(pulumi.IntOutput)
}

// IP address of the interface
func (o LookupNetworkInterfaceResultOutput) Ipaddr() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkInterfaceResult) string { return v.Ipaddr }).(pulumi.StringOutput)
}

// Override the MAC Address of this interface.
func (o LookupNetworkInterfaceResultOutput) Macaddr() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkInterfaceResult) string { return v.Macaddr }).(pulumi.StringOutput)
}

// Override the default MTU on this interface.
func (o LookupNetworkInterfaceResultOutput) Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNetworkInterfaceResult) int { return v.Mtu }).(pulumi.IntOutput)
}

// Netmask of the interface
func (o LookupNetworkInterfaceResultOutput) Netmask() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkInterfaceResult) string { return v.Netmask }).(pulumi.StringOutput)
}

// Use DHCP-provided DNS servers.
func (o LookupNetworkInterfaceResultOutput) Peerdns() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNetworkInterfaceResult) bool { return v.Peerdns }).(pulumi.BoolOutput)
}

// The protocol type of the interface. Currently, only "dhcp, and "static" are supported.
func (o LookupNetworkInterfaceResultOutput) Proto() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkInterfaceResult) string { return v.Proto }).(pulumi.StringOutput)
}

// Behavior for requesting address. Can only be one of "force", "try", or "none".
func (o LookupNetworkInterfaceResultOutput) Reqaddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkInterfaceResult) string { return v.Reqaddress }).(pulumi.StringOutput)
}

// Behavior for requesting prefixes. Currently, only "auto" is supported.
func (o LookupNetworkInterfaceResultOutput) Reqprefix() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkInterfaceResult) string { return v.Reqprefix }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNetworkInterfaceResultOutput{})
}

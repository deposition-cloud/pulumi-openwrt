// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openwrt

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/deposition-cloud/pulumi-openwrt/sdk/go/openwrt/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "openwrt:index/dhcpDhcp:DhcpDhcp":
		r = &DhcpDhcp{}
	case "openwrt:index/dhcpDnsmasq:DhcpDnsmasq":
		r = &DhcpDnsmasq{}
	case "openwrt:index/dhcpDomain:DhcpDomain":
		r = &DhcpDomain{}
	case "openwrt:index/dhcpHost:DhcpHost":
		r = &DhcpHost{}
	case "openwrt:index/dhcpOdhcpd:DhcpOdhcpd":
		r = &DhcpOdhcpd{}
	case "openwrt:index/networkDevice:NetworkDevice":
		r = &NetworkDevice{}
	case "openwrt:index/networkGlobals:NetworkGlobals":
		r = &NetworkGlobals{}
	case "openwrt:index/networkInterface:NetworkInterface":
		r = &NetworkInterface{}
	case "openwrt:index/networkSwitch:NetworkSwitch":
		r = &NetworkSwitch{}
	case "openwrt:index/networkSwitchVlan:NetworkSwitchVlan":
		r = &NetworkSwitchVlan{}
	case "openwrt:index/systemSystem:SystemSystem":
		r = &SystemSystem{}
	case "openwrt:index/wirelessWifiDevice:WirelessWifiDevice":
		r = &WirelessWifiDevice{}
	case "openwrt:index/wirelessWifiIface:WirelessWifiIface":
		r = &WirelessWifiIface{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:openwrt" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"openwrt",
		"index/dhcpDhcp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openwrt",
		"index/dhcpDnsmasq",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openwrt",
		"index/dhcpDomain",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openwrt",
		"index/dhcpHost",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openwrt",
		"index/dhcpOdhcpd",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openwrt",
		"index/networkDevice",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openwrt",
		"index/networkGlobals",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openwrt",
		"index/networkInterface",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openwrt",
		"index/networkSwitch",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openwrt",
		"index/networkSwitchVlan",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openwrt",
		"index/systemSystem",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openwrt",
		"index/wirelessWifiDevice",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openwrt",
		"index/wirelessWifiIface",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"openwrt",
		&pkg{version},
	)
}

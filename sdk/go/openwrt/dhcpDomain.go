// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openwrt

import (
	"context"
	"reflect"

	"errors"
	"github.com/deposition-cloud/pulumi-openwrt/sdk/go/openwrt/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Binds a domain name to an IP address.
//
// ## Import
//
// Find the Terraform id from LuCI's JSON-RPC API. One way to find this information is with `curl` and `jq`# curl \
//
//	--data '{"id"0, "method""foreach", "params"["dhcp", "domain"]}' \
//
//	http://192.168.1.1/cgi-bin/luci/rpc/uci?auth=$AUTH_TOKEN \
//
//	| jq '.result | map({terraformId.[".name"]})' # This command will output something like# [
//
//	{
//
//	"terraformId""cfg123456",
//
//	} ] # We'd then use the information to import the appropriate resource
//
// ```sh
//
//	$ pulumi import openwrt:index/dhcpDomain:DhcpDomain this cfg123456
//
// ```
type DhcpDomain struct {
	pulumi.CustomResourceState

	// The IP address to be used for this domain.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// Hostname to assign.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewDhcpDomain registers a new resource with the given unique name, arguments, and options.
func NewDhcpDomain(ctx *pulumi.Context,
	name string, args *DhcpDomainArgs, opts ...pulumi.ResourceOption) (*DhcpDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ip == nil {
		return nil, errors.New("invalid value for required argument 'Ip'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DhcpDomain
	err := ctx.RegisterResource("openwrt:index/dhcpDomain:DhcpDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDhcpDomain gets an existing DhcpDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDhcpDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DhcpDomainState, opts ...pulumi.ResourceOption) (*DhcpDomain, error) {
	var resource DhcpDomain
	err := ctx.ReadResource("openwrt:index/dhcpDomain:DhcpDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DhcpDomain resources.
type dhcpDomainState struct {
	// The IP address to be used for this domain.
	Ip *string `pulumi:"ip"`
	// Hostname to assign.
	Name *string `pulumi:"name"`
}

type DhcpDomainState struct {
	// The IP address to be used for this domain.
	Ip pulumi.StringPtrInput
	// Hostname to assign.
	Name pulumi.StringPtrInput
}

func (DhcpDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*dhcpDomainState)(nil)).Elem()
}

type dhcpDomainArgs struct {
	// The IP address to be used for this domain.
	Ip string `pulumi:"ip"`
	// Hostname to assign.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a DhcpDomain resource.
type DhcpDomainArgs struct {
	// The IP address to be used for this domain.
	Ip pulumi.StringInput
	// Hostname to assign.
	Name pulumi.StringPtrInput
}

func (DhcpDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dhcpDomainArgs)(nil)).Elem()
}

type DhcpDomainInput interface {
	pulumi.Input

	ToDhcpDomainOutput() DhcpDomainOutput
	ToDhcpDomainOutputWithContext(ctx context.Context) DhcpDomainOutput
}

func (*DhcpDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**DhcpDomain)(nil)).Elem()
}

func (i *DhcpDomain) ToDhcpDomainOutput() DhcpDomainOutput {
	return i.ToDhcpDomainOutputWithContext(context.Background())
}

func (i *DhcpDomain) ToDhcpDomainOutputWithContext(ctx context.Context) DhcpDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DhcpDomainOutput)
}

func (i *DhcpDomain) ToOutput(ctx context.Context) pulumix.Output[*DhcpDomain] {
	return pulumix.Output[*DhcpDomain]{
		OutputState: i.ToDhcpDomainOutputWithContext(ctx).OutputState,
	}
}

// DhcpDomainArrayInput is an input type that accepts DhcpDomainArray and DhcpDomainArrayOutput values.
// You can construct a concrete instance of `DhcpDomainArrayInput` via:
//
//	DhcpDomainArray{ DhcpDomainArgs{...} }
type DhcpDomainArrayInput interface {
	pulumi.Input

	ToDhcpDomainArrayOutput() DhcpDomainArrayOutput
	ToDhcpDomainArrayOutputWithContext(context.Context) DhcpDomainArrayOutput
}

type DhcpDomainArray []DhcpDomainInput

func (DhcpDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DhcpDomain)(nil)).Elem()
}

func (i DhcpDomainArray) ToDhcpDomainArrayOutput() DhcpDomainArrayOutput {
	return i.ToDhcpDomainArrayOutputWithContext(context.Background())
}

func (i DhcpDomainArray) ToDhcpDomainArrayOutputWithContext(ctx context.Context) DhcpDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DhcpDomainArrayOutput)
}

func (i DhcpDomainArray) ToOutput(ctx context.Context) pulumix.Output[[]*DhcpDomain] {
	return pulumix.Output[[]*DhcpDomain]{
		OutputState: i.ToDhcpDomainArrayOutputWithContext(ctx).OutputState,
	}
}

// DhcpDomainMapInput is an input type that accepts DhcpDomainMap and DhcpDomainMapOutput values.
// You can construct a concrete instance of `DhcpDomainMapInput` via:
//
//	DhcpDomainMap{ "key": DhcpDomainArgs{...} }
type DhcpDomainMapInput interface {
	pulumi.Input

	ToDhcpDomainMapOutput() DhcpDomainMapOutput
	ToDhcpDomainMapOutputWithContext(context.Context) DhcpDomainMapOutput
}

type DhcpDomainMap map[string]DhcpDomainInput

func (DhcpDomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DhcpDomain)(nil)).Elem()
}

func (i DhcpDomainMap) ToDhcpDomainMapOutput() DhcpDomainMapOutput {
	return i.ToDhcpDomainMapOutputWithContext(context.Background())
}

func (i DhcpDomainMap) ToDhcpDomainMapOutputWithContext(ctx context.Context) DhcpDomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DhcpDomainMapOutput)
}

func (i DhcpDomainMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*DhcpDomain] {
	return pulumix.Output[map[string]*DhcpDomain]{
		OutputState: i.ToDhcpDomainMapOutputWithContext(ctx).OutputState,
	}
}

type DhcpDomainOutput struct{ *pulumi.OutputState }

func (DhcpDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DhcpDomain)(nil)).Elem()
}

func (o DhcpDomainOutput) ToDhcpDomainOutput() DhcpDomainOutput {
	return o
}

func (o DhcpDomainOutput) ToDhcpDomainOutputWithContext(ctx context.Context) DhcpDomainOutput {
	return o
}

func (o DhcpDomainOutput) ToOutput(ctx context.Context) pulumix.Output[*DhcpDomain] {
	return pulumix.Output[*DhcpDomain]{
		OutputState: o.OutputState,
	}
}

// The IP address to be used for this domain.
func (o DhcpDomainOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *DhcpDomain) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// Hostname to assign.
func (o DhcpDomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DhcpDomain) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type DhcpDomainArrayOutput struct{ *pulumi.OutputState }

func (DhcpDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DhcpDomain)(nil)).Elem()
}

func (o DhcpDomainArrayOutput) ToDhcpDomainArrayOutput() DhcpDomainArrayOutput {
	return o
}

func (o DhcpDomainArrayOutput) ToDhcpDomainArrayOutputWithContext(ctx context.Context) DhcpDomainArrayOutput {
	return o
}

func (o DhcpDomainArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*DhcpDomain] {
	return pulumix.Output[[]*DhcpDomain]{
		OutputState: o.OutputState,
	}
}

func (o DhcpDomainArrayOutput) Index(i pulumi.IntInput) DhcpDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DhcpDomain {
		return vs[0].([]*DhcpDomain)[vs[1].(int)]
	}).(DhcpDomainOutput)
}

type DhcpDomainMapOutput struct{ *pulumi.OutputState }

func (DhcpDomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DhcpDomain)(nil)).Elem()
}

func (o DhcpDomainMapOutput) ToDhcpDomainMapOutput() DhcpDomainMapOutput {
	return o
}

func (o DhcpDomainMapOutput) ToDhcpDomainMapOutputWithContext(ctx context.Context) DhcpDomainMapOutput {
	return o
}

func (o DhcpDomainMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*DhcpDomain] {
	return pulumix.Output[map[string]*DhcpDomain]{
		OutputState: o.OutputState,
	}
}

func (o DhcpDomainMapOutput) MapIndex(k pulumi.StringInput) DhcpDomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DhcpDomain {
		return vs[0].(map[string]*DhcpDomain)[vs[1].(string)]
	}).(DhcpDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DhcpDomainInput)(nil)).Elem(), &DhcpDomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*DhcpDomainArrayInput)(nil)).Elem(), DhcpDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DhcpDomainMapInput)(nil)).Elem(), DhcpDomainMap{})
	pulumi.RegisterOutputType(DhcpDomainOutput{})
	pulumi.RegisterOutputType(DhcpDomainArrayOutput{})
	pulumi.RegisterOutputType(DhcpDomainMapOutput{})
}

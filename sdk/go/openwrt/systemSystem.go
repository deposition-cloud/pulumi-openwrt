// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openwrt

import (
	"context"
	"reflect"

	"github.com/deposition-cloud/pulumi-openwrt/sdk/go/openwrt/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides system data about an OpenWrt device
//
// ## Import
//
// Every `system.system` seems to have the same UCI name of `cfg01e48a`
//
// ```sh
//
//	$ pulumi import openwrt:index/systemSystem:SystemSystem this cfg01e48a
//
// ```
type SystemSystem struct {
	pulumi.CustomResourceState

	// The maximum log level for kernel messages to be logged to the console.
	Conloglevel pulumi.IntOutput `pulumi:"conloglevel"`
	// The minimum level for cron messages to be logged to syslog.
	Cronloglevel pulumi.IntOutput `pulumi:"cronloglevel"`
	// The hostname for the system.
	Description pulumi.StringOutput `pulumi:"description"`
	// A short single-line description for the system.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// Size of the file based log buffer in KiB.
	LogSize pulumi.IntOutput `pulumi:"logSize"`
	// Multi-line free-form text about the system.
	Notes pulumi.StringOutput `pulumi:"notes"`
	// The POSIX.1 time zone string. This has no corresponding value in LuCI. See: https://github.com/openwrt/luci/blob/cd82ccacef78d3bb8b8af6b87dabb9e892e2b2aa/modules/luci-base/luasrc/sys/zoneinfo/tzdata.lua.
	Timezone pulumi.StringOutput `pulumi:"timezone"`
	// Require authentication for local users to log in the system.
	Ttylogin pulumi.BoolOutput `pulumi:"ttylogin"`
	// The IANA/Olson time zone string. This corresponds to "Timezone" in LuCI. See: https://github.com/openwrt/luci/blob/cd82ccacef78d3bb8b8af6b87dabb9e892e2b2aa/modules/luci-base/luasrc/sys/zoneinfo/tzdata.lua.
	Zonename pulumi.StringOutput `pulumi:"zonename"`
}

// NewSystemSystem registers a new resource with the given unique name, arguments, and options.
func NewSystemSystem(ctx *pulumi.Context,
	name string, args *SystemSystemArgs, opts ...pulumi.ResourceOption) (*SystemSystem, error) {
	if args == nil {
		args = &SystemSystemArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemSystem
	err := ctx.RegisterResource("openwrt:index/systemSystem:SystemSystem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemSystem gets an existing SystemSystem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemSystem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemSystemState, opts ...pulumi.ResourceOption) (*SystemSystem, error) {
	var resource SystemSystem
	err := ctx.ReadResource("openwrt:index/systemSystem:SystemSystem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemSystem resources.
type systemSystemState struct {
	// The maximum log level for kernel messages to be logged to the console.
	Conloglevel *int `pulumi:"conloglevel"`
	// The minimum level for cron messages to be logged to syslog.
	Cronloglevel *int `pulumi:"cronloglevel"`
	// The hostname for the system.
	Description *string `pulumi:"description"`
	// A short single-line description for the system.
	Hostname *string `pulumi:"hostname"`
	// Size of the file based log buffer in KiB.
	LogSize *int `pulumi:"logSize"`
	// Multi-line free-form text about the system.
	Notes *string `pulumi:"notes"`
	// The POSIX.1 time zone string. This has no corresponding value in LuCI. See: https://github.com/openwrt/luci/blob/cd82ccacef78d3bb8b8af6b87dabb9e892e2b2aa/modules/luci-base/luasrc/sys/zoneinfo/tzdata.lua.
	Timezone *string `pulumi:"timezone"`
	// Require authentication for local users to log in the system.
	Ttylogin *bool `pulumi:"ttylogin"`
	// The IANA/Olson time zone string. This corresponds to "Timezone" in LuCI. See: https://github.com/openwrt/luci/blob/cd82ccacef78d3bb8b8af6b87dabb9e892e2b2aa/modules/luci-base/luasrc/sys/zoneinfo/tzdata.lua.
	Zonename *string `pulumi:"zonename"`
}

type SystemSystemState struct {
	// The maximum log level for kernel messages to be logged to the console.
	Conloglevel pulumi.IntPtrInput
	// The minimum level for cron messages to be logged to syslog.
	Cronloglevel pulumi.IntPtrInput
	// The hostname for the system.
	Description pulumi.StringPtrInput
	// A short single-line description for the system.
	Hostname pulumi.StringPtrInput
	// Size of the file based log buffer in KiB.
	LogSize pulumi.IntPtrInput
	// Multi-line free-form text about the system.
	Notes pulumi.StringPtrInput
	// The POSIX.1 time zone string. This has no corresponding value in LuCI. See: https://github.com/openwrt/luci/blob/cd82ccacef78d3bb8b8af6b87dabb9e892e2b2aa/modules/luci-base/luasrc/sys/zoneinfo/tzdata.lua.
	Timezone pulumi.StringPtrInput
	// Require authentication for local users to log in the system.
	Ttylogin pulumi.BoolPtrInput
	// The IANA/Olson time zone string. This corresponds to "Timezone" in LuCI. See: https://github.com/openwrt/luci/blob/cd82ccacef78d3bb8b8af6b87dabb9e892e2b2aa/modules/luci-base/luasrc/sys/zoneinfo/tzdata.lua.
	Zonename pulumi.StringPtrInput
}

func (SystemSystemState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemSystemState)(nil)).Elem()
}

type systemSystemArgs struct {
	// The maximum log level for kernel messages to be logged to the console.
	Conloglevel *int `pulumi:"conloglevel"`
	// The minimum level for cron messages to be logged to syslog.
	Cronloglevel *int `pulumi:"cronloglevel"`
	// The hostname for the system.
	Description *string `pulumi:"description"`
	// A short single-line description for the system.
	Hostname *string `pulumi:"hostname"`
	// Size of the file based log buffer in KiB.
	LogSize *int `pulumi:"logSize"`
	// Multi-line free-form text about the system.
	Notes *string `pulumi:"notes"`
	// The POSIX.1 time zone string. This has no corresponding value in LuCI. See: https://github.com/openwrt/luci/blob/cd82ccacef78d3bb8b8af6b87dabb9e892e2b2aa/modules/luci-base/luasrc/sys/zoneinfo/tzdata.lua.
	Timezone *string `pulumi:"timezone"`
	// Require authentication for local users to log in the system.
	Ttylogin *bool `pulumi:"ttylogin"`
	// The IANA/Olson time zone string. This corresponds to "Timezone" in LuCI. See: https://github.com/openwrt/luci/blob/cd82ccacef78d3bb8b8af6b87dabb9e892e2b2aa/modules/luci-base/luasrc/sys/zoneinfo/tzdata.lua.
	Zonename *string `pulumi:"zonename"`
}

// The set of arguments for constructing a SystemSystem resource.
type SystemSystemArgs struct {
	// The maximum log level for kernel messages to be logged to the console.
	Conloglevel pulumi.IntPtrInput
	// The minimum level for cron messages to be logged to syslog.
	Cronloglevel pulumi.IntPtrInput
	// The hostname for the system.
	Description pulumi.StringPtrInput
	// A short single-line description for the system.
	Hostname pulumi.StringPtrInput
	// Size of the file based log buffer in KiB.
	LogSize pulumi.IntPtrInput
	// Multi-line free-form text about the system.
	Notes pulumi.StringPtrInput
	// The POSIX.1 time zone string. This has no corresponding value in LuCI. See: https://github.com/openwrt/luci/blob/cd82ccacef78d3bb8b8af6b87dabb9e892e2b2aa/modules/luci-base/luasrc/sys/zoneinfo/tzdata.lua.
	Timezone pulumi.StringPtrInput
	// Require authentication for local users to log in the system.
	Ttylogin pulumi.BoolPtrInput
	// The IANA/Olson time zone string. This corresponds to "Timezone" in LuCI. See: https://github.com/openwrt/luci/blob/cd82ccacef78d3bb8b8af6b87dabb9e892e2b2aa/modules/luci-base/luasrc/sys/zoneinfo/tzdata.lua.
	Zonename pulumi.StringPtrInput
}

func (SystemSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemSystemArgs)(nil)).Elem()
}

type SystemSystemInput interface {
	pulumi.Input

	ToSystemSystemOutput() SystemSystemOutput
	ToSystemSystemOutputWithContext(ctx context.Context) SystemSystemOutput
}

func (*SystemSystem) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemSystem)(nil)).Elem()
}

func (i *SystemSystem) ToSystemSystemOutput() SystemSystemOutput {
	return i.ToSystemSystemOutputWithContext(context.Background())
}

func (i *SystemSystem) ToSystemSystemOutputWithContext(ctx context.Context) SystemSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemSystemOutput)
}

func (i *SystemSystem) ToOutput(ctx context.Context) pulumix.Output[*SystemSystem] {
	return pulumix.Output[*SystemSystem]{
		OutputState: i.ToSystemSystemOutputWithContext(ctx).OutputState,
	}
}

// SystemSystemArrayInput is an input type that accepts SystemSystemArray and SystemSystemArrayOutput values.
// You can construct a concrete instance of `SystemSystemArrayInput` via:
//
//	SystemSystemArray{ SystemSystemArgs{...} }
type SystemSystemArrayInput interface {
	pulumi.Input

	ToSystemSystemArrayOutput() SystemSystemArrayOutput
	ToSystemSystemArrayOutputWithContext(context.Context) SystemSystemArrayOutput
}

type SystemSystemArray []SystemSystemInput

func (SystemSystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemSystem)(nil)).Elem()
}

func (i SystemSystemArray) ToSystemSystemArrayOutput() SystemSystemArrayOutput {
	return i.ToSystemSystemArrayOutputWithContext(context.Background())
}

func (i SystemSystemArray) ToSystemSystemArrayOutputWithContext(ctx context.Context) SystemSystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemSystemArrayOutput)
}

func (i SystemSystemArray) ToOutput(ctx context.Context) pulumix.Output[[]*SystemSystem] {
	return pulumix.Output[[]*SystemSystem]{
		OutputState: i.ToSystemSystemArrayOutputWithContext(ctx).OutputState,
	}
}

// SystemSystemMapInput is an input type that accepts SystemSystemMap and SystemSystemMapOutput values.
// You can construct a concrete instance of `SystemSystemMapInput` via:
//
//	SystemSystemMap{ "key": SystemSystemArgs{...} }
type SystemSystemMapInput interface {
	pulumi.Input

	ToSystemSystemMapOutput() SystemSystemMapOutput
	ToSystemSystemMapOutputWithContext(context.Context) SystemSystemMapOutput
}

type SystemSystemMap map[string]SystemSystemInput

func (SystemSystemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemSystem)(nil)).Elem()
}

func (i SystemSystemMap) ToSystemSystemMapOutput() SystemSystemMapOutput {
	return i.ToSystemSystemMapOutputWithContext(context.Background())
}

func (i SystemSystemMap) ToSystemSystemMapOutputWithContext(ctx context.Context) SystemSystemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemSystemMapOutput)
}

func (i SystemSystemMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemSystem] {
	return pulumix.Output[map[string]*SystemSystem]{
		OutputState: i.ToSystemSystemMapOutputWithContext(ctx).OutputState,
	}
}

type SystemSystemOutput struct{ *pulumi.OutputState }

func (SystemSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemSystem)(nil)).Elem()
}

func (o SystemSystemOutput) ToSystemSystemOutput() SystemSystemOutput {
	return o
}

func (o SystemSystemOutput) ToSystemSystemOutputWithContext(ctx context.Context) SystemSystemOutput {
	return o
}

func (o SystemSystemOutput) ToOutput(ctx context.Context) pulumix.Output[*SystemSystem] {
	return pulumix.Output[*SystemSystem]{
		OutputState: o.OutputState,
	}
}

// The maximum log level for kernel messages to be logged to the console.
func (o SystemSystemOutput) Conloglevel() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemSystem) pulumi.IntOutput { return v.Conloglevel }).(pulumi.IntOutput)
}

// The minimum level for cron messages to be logged to syslog.
func (o SystemSystemOutput) Cronloglevel() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemSystem) pulumi.IntOutput { return v.Cronloglevel }).(pulumi.IntOutput)
}

// The hostname for the system.
func (o SystemSystemOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemSystem) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// A short single-line description for the system.
func (o SystemSystemOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemSystem) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// Size of the file based log buffer in KiB.
func (o SystemSystemOutput) LogSize() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemSystem) pulumi.IntOutput { return v.LogSize }).(pulumi.IntOutput)
}

// Multi-line free-form text about the system.
func (o SystemSystemOutput) Notes() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemSystem) pulumi.StringOutput { return v.Notes }).(pulumi.StringOutput)
}

// The POSIX.1 time zone string. This has no corresponding value in LuCI. See: https://github.com/openwrt/luci/blob/cd82ccacef78d3bb8b8af6b87dabb9e892e2b2aa/modules/luci-base/luasrc/sys/zoneinfo/tzdata.lua.
func (o SystemSystemOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemSystem) pulumi.StringOutput { return v.Timezone }).(pulumi.StringOutput)
}

// Require authentication for local users to log in the system.
func (o SystemSystemOutput) Ttylogin() pulumi.BoolOutput {
	return o.ApplyT(func(v *SystemSystem) pulumi.BoolOutput { return v.Ttylogin }).(pulumi.BoolOutput)
}

// The IANA/Olson time zone string. This corresponds to "Timezone" in LuCI. See: https://github.com/openwrt/luci/blob/cd82ccacef78d3bb8b8af6b87dabb9e892e2b2aa/modules/luci-base/luasrc/sys/zoneinfo/tzdata.lua.
func (o SystemSystemOutput) Zonename() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemSystem) pulumi.StringOutput { return v.Zonename }).(pulumi.StringOutput)
}

type SystemSystemArrayOutput struct{ *pulumi.OutputState }

func (SystemSystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemSystem)(nil)).Elem()
}

func (o SystemSystemArrayOutput) ToSystemSystemArrayOutput() SystemSystemArrayOutput {
	return o
}

func (o SystemSystemArrayOutput) ToSystemSystemArrayOutputWithContext(ctx context.Context) SystemSystemArrayOutput {
	return o
}

func (o SystemSystemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SystemSystem] {
	return pulumix.Output[[]*SystemSystem]{
		OutputState: o.OutputState,
	}
}

func (o SystemSystemArrayOutput) Index(i pulumi.IntInput) SystemSystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemSystem {
		return vs[0].([]*SystemSystem)[vs[1].(int)]
	}).(SystemSystemOutput)
}

type SystemSystemMapOutput struct{ *pulumi.OutputState }

func (SystemSystemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemSystem)(nil)).Elem()
}

func (o SystemSystemMapOutput) ToSystemSystemMapOutput() SystemSystemMapOutput {
	return o
}

func (o SystemSystemMapOutput) ToSystemSystemMapOutputWithContext(ctx context.Context) SystemSystemMapOutput {
	return o
}

func (o SystemSystemMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SystemSystem] {
	return pulumix.Output[map[string]*SystemSystem]{
		OutputState: o.OutputState,
	}
}

func (o SystemSystemMapOutput) MapIndex(k pulumi.StringInput) SystemSystemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemSystem {
		return vs[0].(map[string]*SystemSystem)[vs[1].(string)]
	}).(SystemSystemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemSystemInput)(nil)).Elem(), &SystemSystem{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemSystemArrayInput)(nil)).Elem(), SystemSystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemSystemMapInput)(nil)).Elem(), SystemSystemMap{})
	pulumi.RegisterOutputType(SystemSystemOutput{})
	pulumi.RegisterOutputType(SystemSystemArrayOutput{})
	pulumi.RegisterOutputType(SystemSystemMapOutput{})
}

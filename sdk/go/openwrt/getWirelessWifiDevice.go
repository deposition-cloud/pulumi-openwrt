// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openwrt

import (
	"context"
	"reflect"

	"github.com/deposition-cloud/pulumi-openwrt/sdk/go/openwrt/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The physical radio device.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/deposition-cloud/pulumi-openwrt/sdk/go/openwrt"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := openwrt.LookupWirelessWifiDevice(ctx, &openwrt.LookupWirelessWifiDeviceArgs{
//				Id: "testing",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupWirelessWifiDevice(ctx *pulumi.Context, args *LookupWirelessWifiDeviceArgs, opts ...pulumi.InvokeOption) (*LookupWirelessWifiDeviceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupWirelessWifiDeviceResult
	err := ctx.Invoke("openwrt:index/getWirelessWifiDevice:getWirelessWifiDevice", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getWirelessWifiDevice.
type LookupWirelessWifiDeviceArgs struct {
	// Name of the section. This name is only used when interacting with UCI directly.
	Id string `pulumi:"id"`
}

// A collection of values returned by getWirelessWifiDevice.
type LookupWirelessWifiDeviceResult struct {
	// Channel width. Must be one of: "2g", "5g", "6g".
	Band string `pulumi:"band"`
	// Configures data rates based on the coverage cell density. Must be one of 0, 1, 2, 3.
	CellDensity int `pulumi:"cellDensity"`
	// The wireless channel. Currently, only "auto" is supported.
	Channel string `pulumi:"channel"`
	// Two-digit country code. E.g. "US".
	Country string `pulumi:"country"`
	// Channel width. Must be one of: "HE20", "HE40", "HE80", "HE160", "HT20", "HT40", "HT40-", "HT40+", "NONE", "VHT20", "VHT40", "VHT80", "VHT160".
	Htmode string `pulumi:"htmode"`
	// Name of the section. This name is only used when interacting with UCI directly.
	Id string `pulumi:"id"`
	// Path of the device in `/sys/devices`.
	Path string `pulumi:"path"`
	// The type of device. Currently only "mac80211" is supported.
	Type string `pulumi:"type"`
}

func LookupWirelessWifiDeviceOutput(ctx *pulumi.Context, args LookupWirelessWifiDeviceOutputArgs, opts ...pulumi.InvokeOption) LookupWirelessWifiDeviceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupWirelessWifiDeviceResult, error) {
			args := v.(LookupWirelessWifiDeviceArgs)
			r, err := LookupWirelessWifiDevice(ctx, &args, opts...)
			var s LookupWirelessWifiDeviceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupWirelessWifiDeviceResultOutput)
}

// A collection of arguments for invoking getWirelessWifiDevice.
type LookupWirelessWifiDeviceOutputArgs struct {
	// Name of the section. This name is only used when interacting with UCI directly.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupWirelessWifiDeviceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWirelessWifiDeviceArgs)(nil)).Elem()
}

// A collection of values returned by getWirelessWifiDevice.
type LookupWirelessWifiDeviceResultOutput struct{ *pulumi.OutputState }

func (LookupWirelessWifiDeviceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWirelessWifiDeviceResult)(nil)).Elem()
}

func (o LookupWirelessWifiDeviceResultOutput) ToLookupWirelessWifiDeviceResultOutput() LookupWirelessWifiDeviceResultOutput {
	return o
}

func (o LookupWirelessWifiDeviceResultOutput) ToLookupWirelessWifiDeviceResultOutputWithContext(ctx context.Context) LookupWirelessWifiDeviceResultOutput {
	return o
}

func (o LookupWirelessWifiDeviceResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupWirelessWifiDeviceResult] {
	return pulumix.Output[LookupWirelessWifiDeviceResult]{
		OutputState: o.OutputState,
	}
}

// Channel width. Must be one of: "2g", "5g", "6g".
func (o LookupWirelessWifiDeviceResultOutput) Band() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWirelessWifiDeviceResult) string { return v.Band }).(pulumi.StringOutput)
}

// Configures data rates based on the coverage cell density. Must be one of 0, 1, 2, 3.
func (o LookupWirelessWifiDeviceResultOutput) CellDensity() pulumi.IntOutput {
	return o.ApplyT(func(v LookupWirelessWifiDeviceResult) int { return v.CellDensity }).(pulumi.IntOutput)
}

// The wireless channel. Currently, only "auto" is supported.
func (o LookupWirelessWifiDeviceResultOutput) Channel() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWirelessWifiDeviceResult) string { return v.Channel }).(pulumi.StringOutput)
}

// Two-digit country code. E.g. "US".
func (o LookupWirelessWifiDeviceResultOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWirelessWifiDeviceResult) string { return v.Country }).(pulumi.StringOutput)
}

// Channel width. Must be one of: "HE20", "HE40", "HE80", "HE160", "HT20", "HT40", "HT40-", "HT40+", "NONE", "VHT20", "VHT40", "VHT80", "VHT160".
func (o LookupWirelessWifiDeviceResultOutput) Htmode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWirelessWifiDeviceResult) string { return v.Htmode }).(pulumi.StringOutput)
}

// Name of the section. This name is only used when interacting with UCI directly.
func (o LookupWirelessWifiDeviceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWirelessWifiDeviceResult) string { return v.Id }).(pulumi.StringOutput)
}

// Path of the device in `/sys/devices`.
func (o LookupWirelessWifiDeviceResultOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWirelessWifiDeviceResult) string { return v.Path }).(pulumi.StringOutput)
}

// The type of device. Currently only "mac80211" is supported.
func (o LookupWirelessWifiDeviceResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWirelessWifiDeviceResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupWirelessWifiDeviceResultOutput{})
}

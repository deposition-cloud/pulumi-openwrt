// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openwrt

import (
	"context"
	"reflect"

	"errors"
	"github.com/deposition-cloud/pulumi-openwrt/sdk/go/openwrt/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The physical radio device.
//
// ## Import
//
// Find the Terraform id from LuCI's JSON-RPC API. One way to find this information is with `curl` and `jq`# curl \
//
//	--data '{"id"0, "method""foreach", "params"["wireless", "wifi-device"]}' \
//
//	http://192.168.1.1/cgi-bin/luci/rpc/uci?auth=$AUTH_TOKEN \
//
//	| jq '.result | map({terraformId.[".name"]})' # This command will output something like# [
//
//	{
//
//	"terraformId""cfg123456",
//
//	},
//
//	{
//
//	"terraformId""cfg123457",
//
//	} ] # We'd then use the information to import the appropriate resource
//
// ```sh
//
//	$ pulumi import openwrt:index/wirelessWifiDevice:WirelessWifiDevice five_ghz cfg123456
//
// ```
type WirelessWifiDevice struct {
	pulumi.CustomResourceState

	// Channel width. Must be one of: "2g", "5g", "6g".
	Band pulumi.StringOutput `pulumi:"band"`
	// Configures data rates based on the coverage cell density. Must be one of 0, 1, 2, 3.
	CellDensity pulumi.IntOutput `pulumi:"cellDensity"`
	// The wireless channel. Currently, only "auto" is supported.
	Channel pulumi.StringOutput `pulumi:"channel"`
	// Two-digit country code. E.g. "US".
	Country pulumi.StringOutput `pulumi:"country"`
	// Channel width. Must be one of: "HE20", "HE40", "HE80", "HE160", "HT20", "HT40", "HT40-", "HT40+", "NONE", "VHT20", "VHT40", "VHT80", "VHT160".
	Htmode pulumi.StringOutput `pulumi:"htmode"`
	// Path of the device in `/sys/devices`.
	Path pulumi.StringOutput `pulumi:"path"`
	// The type of device. Currently only "mac80211" is supported.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewWirelessWifiDevice registers a new resource with the given unique name, arguments, and options.
func NewWirelessWifiDevice(ctx *pulumi.Context,
	name string, args *WirelessWifiDeviceArgs, opts ...pulumi.ResourceOption) (*WirelessWifiDevice, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Channel == nil {
		return nil, errors.New("invalid value for required argument 'Channel'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WirelessWifiDevice
	err := ctx.RegisterResource("openwrt:index/wirelessWifiDevice:WirelessWifiDevice", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessWifiDevice gets an existing WirelessWifiDevice resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessWifiDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessWifiDeviceState, opts ...pulumi.ResourceOption) (*WirelessWifiDevice, error) {
	var resource WirelessWifiDevice
	err := ctx.ReadResource("openwrt:index/wirelessWifiDevice:WirelessWifiDevice", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessWifiDevice resources.
type wirelessWifiDeviceState struct {
	// Channel width. Must be one of: "2g", "5g", "6g".
	Band *string `pulumi:"band"`
	// Configures data rates based on the coverage cell density. Must be one of 0, 1, 2, 3.
	CellDensity *int `pulumi:"cellDensity"`
	// The wireless channel. Currently, only "auto" is supported.
	Channel *string `pulumi:"channel"`
	// Two-digit country code. E.g. "US".
	Country *string `pulumi:"country"`
	// Channel width. Must be one of: "HE20", "HE40", "HE80", "HE160", "HT20", "HT40", "HT40-", "HT40+", "NONE", "VHT20", "VHT40", "VHT80", "VHT160".
	Htmode *string `pulumi:"htmode"`
	// Path of the device in `/sys/devices`.
	Path *string `pulumi:"path"`
	// The type of device. Currently only "mac80211" is supported.
	Type *string `pulumi:"type"`
}

type WirelessWifiDeviceState struct {
	// Channel width. Must be one of: "2g", "5g", "6g".
	Band pulumi.StringPtrInput
	// Configures data rates based on the coverage cell density. Must be one of 0, 1, 2, 3.
	CellDensity pulumi.IntPtrInput
	// The wireless channel. Currently, only "auto" is supported.
	Channel pulumi.StringPtrInput
	// Two-digit country code. E.g. "US".
	Country pulumi.StringPtrInput
	// Channel width. Must be one of: "HE20", "HE40", "HE80", "HE160", "HT20", "HT40", "HT40-", "HT40+", "NONE", "VHT20", "VHT40", "VHT80", "VHT160".
	Htmode pulumi.StringPtrInput
	// Path of the device in `/sys/devices`.
	Path pulumi.StringPtrInput
	// The type of device. Currently only "mac80211" is supported.
	Type pulumi.StringPtrInput
}

func (WirelessWifiDeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessWifiDeviceState)(nil)).Elem()
}

type wirelessWifiDeviceArgs struct {
	// Channel width. Must be one of: "2g", "5g", "6g".
	Band *string `pulumi:"band"`
	// Configures data rates based on the coverage cell density. Must be one of 0, 1, 2, 3.
	CellDensity *int `pulumi:"cellDensity"`
	// The wireless channel. Currently, only "auto" is supported.
	Channel string `pulumi:"channel"`
	// Two-digit country code. E.g. "US".
	Country *string `pulumi:"country"`
	// Channel width. Must be one of: "HE20", "HE40", "HE80", "HE160", "HT20", "HT40", "HT40-", "HT40+", "NONE", "VHT20", "VHT40", "VHT80", "VHT160".
	Htmode *string `pulumi:"htmode"`
	// Path of the device in `/sys/devices`.
	Path *string `pulumi:"path"`
	// The type of device. Currently only "mac80211" is supported.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a WirelessWifiDevice resource.
type WirelessWifiDeviceArgs struct {
	// Channel width. Must be one of: "2g", "5g", "6g".
	Band pulumi.StringPtrInput
	// Configures data rates based on the coverage cell density. Must be one of 0, 1, 2, 3.
	CellDensity pulumi.IntPtrInput
	// The wireless channel. Currently, only "auto" is supported.
	Channel pulumi.StringInput
	// Two-digit country code. E.g. "US".
	Country pulumi.StringPtrInput
	// Channel width. Must be one of: "HE20", "HE40", "HE80", "HE160", "HT20", "HT40", "HT40-", "HT40+", "NONE", "VHT20", "VHT40", "VHT80", "VHT160".
	Htmode pulumi.StringPtrInput
	// Path of the device in `/sys/devices`.
	Path pulumi.StringPtrInput
	// The type of device. Currently only "mac80211" is supported.
	Type pulumi.StringInput
}

func (WirelessWifiDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessWifiDeviceArgs)(nil)).Elem()
}

type WirelessWifiDeviceInput interface {
	pulumi.Input

	ToWirelessWifiDeviceOutput() WirelessWifiDeviceOutput
	ToWirelessWifiDeviceOutputWithContext(ctx context.Context) WirelessWifiDeviceOutput
}

func (*WirelessWifiDevice) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessWifiDevice)(nil)).Elem()
}

func (i *WirelessWifiDevice) ToWirelessWifiDeviceOutput() WirelessWifiDeviceOutput {
	return i.ToWirelessWifiDeviceOutputWithContext(context.Background())
}

func (i *WirelessWifiDevice) ToWirelessWifiDeviceOutputWithContext(ctx context.Context) WirelessWifiDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessWifiDeviceOutput)
}

func (i *WirelessWifiDevice) ToOutput(ctx context.Context) pulumix.Output[*WirelessWifiDevice] {
	return pulumix.Output[*WirelessWifiDevice]{
		OutputState: i.ToWirelessWifiDeviceOutputWithContext(ctx).OutputState,
	}
}

// WirelessWifiDeviceArrayInput is an input type that accepts WirelessWifiDeviceArray and WirelessWifiDeviceArrayOutput values.
// You can construct a concrete instance of `WirelessWifiDeviceArrayInput` via:
//
//	WirelessWifiDeviceArray{ WirelessWifiDeviceArgs{...} }
type WirelessWifiDeviceArrayInput interface {
	pulumi.Input

	ToWirelessWifiDeviceArrayOutput() WirelessWifiDeviceArrayOutput
	ToWirelessWifiDeviceArrayOutputWithContext(context.Context) WirelessWifiDeviceArrayOutput
}

type WirelessWifiDeviceArray []WirelessWifiDeviceInput

func (WirelessWifiDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessWifiDevice)(nil)).Elem()
}

func (i WirelessWifiDeviceArray) ToWirelessWifiDeviceArrayOutput() WirelessWifiDeviceArrayOutput {
	return i.ToWirelessWifiDeviceArrayOutputWithContext(context.Background())
}

func (i WirelessWifiDeviceArray) ToWirelessWifiDeviceArrayOutputWithContext(ctx context.Context) WirelessWifiDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessWifiDeviceArrayOutput)
}

func (i WirelessWifiDeviceArray) ToOutput(ctx context.Context) pulumix.Output[[]*WirelessWifiDevice] {
	return pulumix.Output[[]*WirelessWifiDevice]{
		OutputState: i.ToWirelessWifiDeviceArrayOutputWithContext(ctx).OutputState,
	}
}

// WirelessWifiDeviceMapInput is an input type that accepts WirelessWifiDeviceMap and WirelessWifiDeviceMapOutput values.
// You can construct a concrete instance of `WirelessWifiDeviceMapInput` via:
//
//	WirelessWifiDeviceMap{ "key": WirelessWifiDeviceArgs{...} }
type WirelessWifiDeviceMapInput interface {
	pulumi.Input

	ToWirelessWifiDeviceMapOutput() WirelessWifiDeviceMapOutput
	ToWirelessWifiDeviceMapOutputWithContext(context.Context) WirelessWifiDeviceMapOutput
}

type WirelessWifiDeviceMap map[string]WirelessWifiDeviceInput

func (WirelessWifiDeviceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessWifiDevice)(nil)).Elem()
}

func (i WirelessWifiDeviceMap) ToWirelessWifiDeviceMapOutput() WirelessWifiDeviceMapOutput {
	return i.ToWirelessWifiDeviceMapOutputWithContext(context.Background())
}

func (i WirelessWifiDeviceMap) ToWirelessWifiDeviceMapOutputWithContext(ctx context.Context) WirelessWifiDeviceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessWifiDeviceMapOutput)
}

func (i WirelessWifiDeviceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*WirelessWifiDevice] {
	return pulumix.Output[map[string]*WirelessWifiDevice]{
		OutputState: i.ToWirelessWifiDeviceMapOutputWithContext(ctx).OutputState,
	}
}

type WirelessWifiDeviceOutput struct{ *pulumi.OutputState }

func (WirelessWifiDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessWifiDevice)(nil)).Elem()
}

func (o WirelessWifiDeviceOutput) ToWirelessWifiDeviceOutput() WirelessWifiDeviceOutput {
	return o
}

func (o WirelessWifiDeviceOutput) ToWirelessWifiDeviceOutputWithContext(ctx context.Context) WirelessWifiDeviceOutput {
	return o
}

func (o WirelessWifiDeviceOutput) ToOutput(ctx context.Context) pulumix.Output[*WirelessWifiDevice] {
	return pulumix.Output[*WirelessWifiDevice]{
		OutputState: o.OutputState,
	}
}

// Channel width. Must be one of: "2g", "5g", "6g".
func (o WirelessWifiDeviceOutput) Band() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessWifiDevice) pulumi.StringOutput { return v.Band }).(pulumi.StringOutput)
}

// Configures data rates based on the coverage cell density. Must be one of 0, 1, 2, 3.
func (o WirelessWifiDeviceOutput) CellDensity() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessWifiDevice) pulumi.IntOutput { return v.CellDensity }).(pulumi.IntOutput)
}

// The wireless channel. Currently, only "auto" is supported.
func (o WirelessWifiDeviceOutput) Channel() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessWifiDevice) pulumi.StringOutput { return v.Channel }).(pulumi.StringOutput)
}

// Two-digit country code. E.g. "US".
func (o WirelessWifiDeviceOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessWifiDevice) pulumi.StringOutput { return v.Country }).(pulumi.StringOutput)
}

// Channel width. Must be one of: "HE20", "HE40", "HE80", "HE160", "HT20", "HT40", "HT40-", "HT40+", "NONE", "VHT20", "VHT40", "VHT80", "VHT160".
func (o WirelessWifiDeviceOutput) Htmode() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessWifiDevice) pulumi.StringOutput { return v.Htmode }).(pulumi.StringOutput)
}

// Path of the device in `/sys/devices`.
func (o WirelessWifiDeviceOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessWifiDevice) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// The type of device. Currently only "mac80211" is supported.
func (o WirelessWifiDeviceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessWifiDevice) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type WirelessWifiDeviceArrayOutput struct{ *pulumi.OutputState }

func (WirelessWifiDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessWifiDevice)(nil)).Elem()
}

func (o WirelessWifiDeviceArrayOutput) ToWirelessWifiDeviceArrayOutput() WirelessWifiDeviceArrayOutput {
	return o
}

func (o WirelessWifiDeviceArrayOutput) ToWirelessWifiDeviceArrayOutputWithContext(ctx context.Context) WirelessWifiDeviceArrayOutput {
	return o
}

func (o WirelessWifiDeviceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*WirelessWifiDevice] {
	return pulumix.Output[[]*WirelessWifiDevice]{
		OutputState: o.OutputState,
	}
}

func (o WirelessWifiDeviceArrayOutput) Index(i pulumi.IntInput) WirelessWifiDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelessWifiDevice {
		return vs[0].([]*WirelessWifiDevice)[vs[1].(int)]
	}).(WirelessWifiDeviceOutput)
}

type WirelessWifiDeviceMapOutput struct{ *pulumi.OutputState }

func (WirelessWifiDeviceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessWifiDevice)(nil)).Elem()
}

func (o WirelessWifiDeviceMapOutput) ToWirelessWifiDeviceMapOutput() WirelessWifiDeviceMapOutput {
	return o
}

func (o WirelessWifiDeviceMapOutput) ToWirelessWifiDeviceMapOutputWithContext(ctx context.Context) WirelessWifiDeviceMapOutput {
	return o
}

func (o WirelessWifiDeviceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*WirelessWifiDevice] {
	return pulumix.Output[map[string]*WirelessWifiDevice]{
		OutputState: o.OutputState,
	}
}

func (o WirelessWifiDeviceMapOutput) MapIndex(k pulumi.StringInput) WirelessWifiDeviceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelessWifiDevice {
		return vs[0].(map[string]*WirelessWifiDevice)[vs[1].(string)]
	}).(WirelessWifiDeviceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessWifiDeviceInput)(nil)).Elem(), &WirelessWifiDevice{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessWifiDeviceArrayInput)(nil)).Elem(), WirelessWifiDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessWifiDeviceMapInput)(nil)).Elem(), WirelessWifiDeviceMap{})
	pulumi.RegisterOutputType(WirelessWifiDeviceOutput{})
	pulumi.RegisterOutputType(WirelessWifiDeviceArrayOutput{})
	pulumi.RegisterOutputType(WirelessWifiDeviceMapOutput{})
}

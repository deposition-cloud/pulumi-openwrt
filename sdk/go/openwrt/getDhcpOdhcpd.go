// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openwrt

import (
	"context"
	"reflect"

	"github.com/deposition-cloud/pulumi-openwrt/sdk/go/openwrt/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// An embedded DHCP/DHCPv6/RA server & NDP relay.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/deposition-cloud/pulumi-openwrt/sdk/go/openwrt"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := openwrt.LookupDhcpOdhcpd(ctx, &openwrt.LookupDhcpOdhcpdArgs{
//				Id: "testing",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDhcpOdhcpd(ctx *pulumi.Context, args *LookupDhcpOdhcpdArgs, opts ...pulumi.InvokeOption) (*LookupDhcpOdhcpdResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDhcpOdhcpdResult
	err := ctx.Invoke("openwrt:index/getDhcpOdhcpd:getDhcpOdhcpd", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDhcpOdhcpd.
type LookupDhcpOdhcpdArgs struct {
	// Name of the section. This name is only used when interacting with UCI directly.
	Id string `pulumi:"id"`
}

// A collection of values returned by getDhcpOdhcpd.
type LookupDhcpOdhcpdResult struct {
	// Name of the section. This name is only used when interacting with UCI directly.
	Id string `pulumi:"id"`
	// Location of the lease/hostfile for DHCPv4 and DHCPv6.
	Leasefile string `pulumi:"leasefile"`
	// Location of the lease trigger script.
	Leasetrigger string `pulumi:"leasetrigger"`
	// Enable DHCPv4 if the 'dhcp' section constains a `start` option, but no `dhcpv4` option set.
	Legacy bool `pulumi:"legacy"`
	// Syslog level priority (0-7).
	Loglevel int `pulumi:"loglevel"`
	// Use odhcpd as the main DHCPv4 service.
	Maindhcp bool `pulumi:"maindhcp"`
}

func LookupDhcpOdhcpdOutput(ctx *pulumi.Context, args LookupDhcpOdhcpdOutputArgs, opts ...pulumi.InvokeOption) LookupDhcpOdhcpdResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDhcpOdhcpdResult, error) {
			args := v.(LookupDhcpOdhcpdArgs)
			r, err := LookupDhcpOdhcpd(ctx, &args, opts...)
			var s LookupDhcpOdhcpdResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDhcpOdhcpdResultOutput)
}

// A collection of arguments for invoking getDhcpOdhcpd.
type LookupDhcpOdhcpdOutputArgs struct {
	// Name of the section. This name is only used when interacting with UCI directly.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupDhcpOdhcpdOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDhcpOdhcpdArgs)(nil)).Elem()
}

// A collection of values returned by getDhcpOdhcpd.
type LookupDhcpOdhcpdResultOutput struct{ *pulumi.OutputState }

func (LookupDhcpOdhcpdResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDhcpOdhcpdResult)(nil)).Elem()
}

func (o LookupDhcpOdhcpdResultOutput) ToLookupDhcpOdhcpdResultOutput() LookupDhcpOdhcpdResultOutput {
	return o
}

func (o LookupDhcpOdhcpdResultOutput) ToLookupDhcpOdhcpdResultOutputWithContext(ctx context.Context) LookupDhcpOdhcpdResultOutput {
	return o
}

func (o LookupDhcpOdhcpdResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupDhcpOdhcpdResult] {
	return pulumix.Output[LookupDhcpOdhcpdResult]{
		OutputState: o.OutputState,
	}
}

// Name of the section. This name is only used when interacting with UCI directly.
func (o LookupDhcpOdhcpdResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDhcpOdhcpdResult) string { return v.Id }).(pulumi.StringOutput)
}

// Location of the lease/hostfile for DHCPv4 and DHCPv6.
func (o LookupDhcpOdhcpdResultOutput) Leasefile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDhcpOdhcpdResult) string { return v.Leasefile }).(pulumi.StringOutput)
}

// Location of the lease trigger script.
func (o LookupDhcpOdhcpdResultOutput) Leasetrigger() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDhcpOdhcpdResult) string { return v.Leasetrigger }).(pulumi.StringOutput)
}

// Enable DHCPv4 if the 'dhcp' section constains a `start` option, but no `dhcpv4` option set.
func (o LookupDhcpOdhcpdResultOutput) Legacy() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDhcpOdhcpdResult) bool { return v.Legacy }).(pulumi.BoolOutput)
}

// Syslog level priority (0-7).
func (o LookupDhcpOdhcpdResultOutput) Loglevel() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDhcpOdhcpdResult) int { return v.Loglevel }).(pulumi.IntOutput)
}

// Use odhcpd as the main DHCPv4 service.
func (o LookupDhcpOdhcpdResultOutput) Maindhcp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDhcpOdhcpdResult) bool { return v.Maindhcp }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDhcpOdhcpdResultOutput{})
}

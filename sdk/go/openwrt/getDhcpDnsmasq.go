// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openwrt

import (
	"context"
	"reflect"

	"github.com/deposition-cloud/pulumi-openwrt/sdk/go/openwrt/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// A lightweight DHCP and caching DNS server.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/deposition-cloud/pulumi-openwrt/sdk/go/openwrt"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := openwrt.LookupDhcpDnsmasq(ctx, &openwrt.LookupDhcpDnsmasqArgs{
//				Id: "testing",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDhcpDnsmasq(ctx *pulumi.Context, args *LookupDhcpDnsmasqArgs, opts ...pulumi.InvokeOption) (*LookupDhcpDnsmasqResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDhcpDnsmasqResult
	err := ctx.Invoke("openwrt:index/getDhcpDnsmasq:getDhcpDnsmasq", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDhcpDnsmasq.
type LookupDhcpDnsmasqArgs struct {
	// Name of the section. This name is only used when interacting with UCI directly.
	Id string `pulumi:"id"`
}

// A collection of values returned by getDhcpDnsmasq.
type LookupDhcpDnsmasqResult struct {
	// Force dnsmasq into authoritative mode. This speeds up DHCP leasing. Used if this is the only server on the network.
	Authoritative bool `pulumi:"authoritative"`
	// DNS domain handed out to DHCP clients.
	Domain string `pulumi:"domain"`
	// Never forward queries for plain names, without dots or domain parts, to upstream nameservers.
	Domainneeded bool `pulumi:"domainneeded"`
	// Specify the largest EDNS.0 UDP packet which is supported by the DNS forwarder.
	EdnspacketMax int `pulumi:"ednspacketMax"`
	// Never forward queries for plain names, without dots or domain parts, to upstream nameservers.
	Expandhosts bool `pulumi:"expandhosts"`
	// Name of the section. This name is only used when interacting with UCI directly.
	Id string `pulumi:"id"`
	// Store DHCP leases in this file.
	Leasefile string `pulumi:"leasefile"`
	// Look up DNS entries for this domain from `/etc/hosts`.
	Local string `pulumi:"local"`
	// Choose IP address to match the incoming interface if multiple addresses are assigned to a host name in `/etc/hosts`.
	LocaliseQueries bool `pulumi:"localiseQueries"`
	// Accept DNS queries only from hosts whose address is on a local subnet.
	Localservice bool `pulumi:"localservice"`
	// Read static lease entries from `/etc/ethers`, re-read on SIGHUP.
	Readethers bool `pulumi:"readethers"`
	// Allows upstream 127.0.0.0/8 responses, required for DNS based blocklist services. Only takes effect if rebind protection is enabled.
	RebindLocalhost bool `pulumi:"rebindLocalhost"`
	// Enables DNS rebind attack protection by discarding upstream RFC1918 responses.
	RebindProtection bool `pulumi:"rebindProtection"`
	// Specifies an alternative resolv file.
	Resolvfile string `pulumi:"resolvfile"`
}

func LookupDhcpDnsmasqOutput(ctx *pulumi.Context, args LookupDhcpDnsmasqOutputArgs, opts ...pulumi.InvokeOption) LookupDhcpDnsmasqResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDhcpDnsmasqResult, error) {
			args := v.(LookupDhcpDnsmasqArgs)
			r, err := LookupDhcpDnsmasq(ctx, &args, opts...)
			var s LookupDhcpDnsmasqResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDhcpDnsmasqResultOutput)
}

// A collection of arguments for invoking getDhcpDnsmasq.
type LookupDhcpDnsmasqOutputArgs struct {
	// Name of the section. This name is only used when interacting with UCI directly.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupDhcpDnsmasqOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDhcpDnsmasqArgs)(nil)).Elem()
}

// A collection of values returned by getDhcpDnsmasq.
type LookupDhcpDnsmasqResultOutput struct{ *pulumi.OutputState }

func (LookupDhcpDnsmasqResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDhcpDnsmasqResult)(nil)).Elem()
}

func (o LookupDhcpDnsmasqResultOutput) ToLookupDhcpDnsmasqResultOutput() LookupDhcpDnsmasqResultOutput {
	return o
}

func (o LookupDhcpDnsmasqResultOutput) ToLookupDhcpDnsmasqResultOutputWithContext(ctx context.Context) LookupDhcpDnsmasqResultOutput {
	return o
}

func (o LookupDhcpDnsmasqResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupDhcpDnsmasqResult] {
	return pulumix.Output[LookupDhcpDnsmasqResult]{
		OutputState: o.OutputState,
	}
}

// Force dnsmasq into authoritative mode. This speeds up DHCP leasing. Used if this is the only server on the network.
func (o LookupDhcpDnsmasqResultOutput) Authoritative() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDhcpDnsmasqResult) bool { return v.Authoritative }).(pulumi.BoolOutput)
}

// DNS domain handed out to DHCP clients.
func (o LookupDhcpDnsmasqResultOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDhcpDnsmasqResult) string { return v.Domain }).(pulumi.StringOutput)
}

// Never forward queries for plain names, without dots or domain parts, to upstream nameservers.
func (o LookupDhcpDnsmasqResultOutput) Domainneeded() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDhcpDnsmasqResult) bool { return v.Domainneeded }).(pulumi.BoolOutput)
}

// Specify the largest EDNS.0 UDP packet which is supported by the DNS forwarder.
func (o LookupDhcpDnsmasqResultOutput) EdnspacketMax() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDhcpDnsmasqResult) int { return v.EdnspacketMax }).(pulumi.IntOutput)
}

// Never forward queries for plain names, without dots or domain parts, to upstream nameservers.
func (o LookupDhcpDnsmasqResultOutput) Expandhosts() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDhcpDnsmasqResult) bool { return v.Expandhosts }).(pulumi.BoolOutput)
}

// Name of the section. This name is only used when interacting with UCI directly.
func (o LookupDhcpDnsmasqResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDhcpDnsmasqResult) string { return v.Id }).(pulumi.StringOutput)
}

// Store DHCP leases in this file.
func (o LookupDhcpDnsmasqResultOutput) Leasefile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDhcpDnsmasqResult) string { return v.Leasefile }).(pulumi.StringOutput)
}

// Look up DNS entries for this domain from `/etc/hosts`.
func (o LookupDhcpDnsmasqResultOutput) Local() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDhcpDnsmasqResult) string { return v.Local }).(pulumi.StringOutput)
}

// Choose IP address to match the incoming interface if multiple addresses are assigned to a host name in `/etc/hosts`.
func (o LookupDhcpDnsmasqResultOutput) LocaliseQueries() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDhcpDnsmasqResult) bool { return v.LocaliseQueries }).(pulumi.BoolOutput)
}

// Accept DNS queries only from hosts whose address is on a local subnet.
func (o LookupDhcpDnsmasqResultOutput) Localservice() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDhcpDnsmasqResult) bool { return v.Localservice }).(pulumi.BoolOutput)
}

// Read static lease entries from `/etc/ethers`, re-read on SIGHUP.
func (o LookupDhcpDnsmasqResultOutput) Readethers() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDhcpDnsmasqResult) bool { return v.Readethers }).(pulumi.BoolOutput)
}

// Allows upstream 127.0.0.0/8 responses, required for DNS based blocklist services. Only takes effect if rebind protection is enabled.
func (o LookupDhcpDnsmasqResultOutput) RebindLocalhost() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDhcpDnsmasqResult) bool { return v.RebindLocalhost }).(pulumi.BoolOutput)
}

// Enables DNS rebind attack protection by discarding upstream RFC1918 responses.
func (o LookupDhcpDnsmasqResultOutput) RebindProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDhcpDnsmasqResult) bool { return v.RebindProtection }).(pulumi.BoolOutput)
}

// Specifies an alternative resolv file.
func (o LookupDhcpDnsmasqResultOutput) Resolvfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDhcpDnsmasqResult) string { return v.Resolvfile }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDhcpDnsmasqResultOutput{})
}

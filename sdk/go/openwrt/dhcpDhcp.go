// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openwrt

import (
	"context"
	"reflect"

	"github.com/deposition-cloud/pulumi-openwrt/sdk/go/openwrt/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Per interface lease pools and settings for serving DHCP requests.
//
// ## Import
//
// Find the Terraform id from LuCI's JSON-RPC API. One way to find this information is with `curl` and `jq`# curl \
//
//	--data '{"id"0, "method""foreach", "params"["dhcp", "dhcp"]}' \
//
//	http://192.168.1.1/cgi-bin/luci/rpc/uci?auth=$AUTH_TOKEN \
//
//	| jq '.result | map({name.[".name"]})' # This command will output something like# [
//
//	{
//
//	"name""lan",
//
//	},
//
//	{
//
//	"name""guest",
//
//	} ] # We'd then use the information to import the appropriate resource
//
// ```sh
//
//	$ pulumi import openwrt:index/dhcpDhcp:DhcpDhcp lan lan
//
// ```
type DhcpDhcp struct {
	pulumi.CustomResourceState

	// The mode of the DHCPv4 server. Must be one of: "disabled", "server".
	Dhcpv4 pulumi.StringOutput `pulumi:"dhcpv4"`
	// The mode of the DHCPv6 server. Must be one of: "disabled", "relay", "server".
	Dhcpv6 pulumi.StringOutput `pulumi:"dhcpv6"`
	// Forces DHCP serving on the specified interface even if another DHCP server is detected on the same network segment.
	Force pulumi.BoolOutput `pulumi:"force"`
	// Specifies whether dnsmasq should ignore this pool.
	Ignore pulumi.BoolOutput `pulumi:"ignore"`
	// The interface associated with this DHCP address pool. This name is what the interface is known as in UCI, or the `id`
	// field in Terraform. Required if `ignore` is not `true`.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// The lease time of addresses handed out to clients. E.g. `12h`, or `30m`. Required if `ignore` is not `true`.
	Leasetime pulumi.StringOutput `pulumi:"leasetime"`
	// Specifies the size of the address pool. E.g. With start = 100, and limit = 150, the maximum address will be 249. Required if `ignore` is not `true`.
	Limit pulumi.IntOutput `pulumi:"limit"`
	// The mode of Router Advertisements. Must be one of: "disabled", "relay", "server".
	Ra pulumi.StringOutput `pulumi:"ra"`
	// Router Advertisement flags to include in messages. Must be one of: "home-agent", "managed-config", "none", "other-config".
	RaFlags pulumi.StringArrayOutput `pulumi:"raFlags"`
	// Specifies the offset from the network address of the underlying interface to calculate the minimum address that may be leased to clients. It may be greater than 255 to span subnets. Required if `ignore` is not `true`.
	Start pulumi.IntOutput `pulumi:"start"`
}

// NewDhcpDhcp registers a new resource with the given unique name, arguments, and options.
func NewDhcpDhcp(ctx *pulumi.Context,
	name string, args *DhcpDhcpArgs, opts ...pulumi.ResourceOption) (*DhcpDhcp, error) {
	if args == nil {
		args = &DhcpDhcpArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DhcpDhcp
	err := ctx.RegisterResource("openwrt:index/dhcpDhcp:DhcpDhcp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDhcpDhcp gets an existing DhcpDhcp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDhcpDhcp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DhcpDhcpState, opts ...pulumi.ResourceOption) (*DhcpDhcp, error) {
	var resource DhcpDhcp
	err := ctx.ReadResource("openwrt:index/dhcpDhcp:DhcpDhcp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DhcpDhcp resources.
type dhcpDhcpState struct {
	// The mode of the DHCPv4 server. Must be one of: "disabled", "server".
	Dhcpv4 *string `pulumi:"dhcpv4"`
	// The mode of the DHCPv6 server. Must be one of: "disabled", "relay", "server".
	Dhcpv6 *string `pulumi:"dhcpv6"`
	// Forces DHCP serving on the specified interface even if another DHCP server is detected on the same network segment.
	Force *bool `pulumi:"force"`
	// Specifies whether dnsmasq should ignore this pool.
	Ignore *bool `pulumi:"ignore"`
	// The interface associated with this DHCP address pool. This name is what the interface is known as in UCI, or the `id`
	// field in Terraform. Required if `ignore` is not `true`.
	Interface *string `pulumi:"interface"`
	// The lease time of addresses handed out to clients. E.g. `12h`, or `30m`. Required if `ignore` is not `true`.
	Leasetime *string `pulumi:"leasetime"`
	// Specifies the size of the address pool. E.g. With start = 100, and limit = 150, the maximum address will be 249. Required if `ignore` is not `true`.
	Limit *int `pulumi:"limit"`
	// The mode of Router Advertisements. Must be one of: "disabled", "relay", "server".
	Ra *string `pulumi:"ra"`
	// Router Advertisement flags to include in messages. Must be one of: "home-agent", "managed-config", "none", "other-config".
	RaFlags []string `pulumi:"raFlags"`
	// Specifies the offset from the network address of the underlying interface to calculate the minimum address that may be leased to clients. It may be greater than 255 to span subnets. Required if `ignore` is not `true`.
	Start *int `pulumi:"start"`
}

type DhcpDhcpState struct {
	// The mode of the DHCPv4 server. Must be one of: "disabled", "server".
	Dhcpv4 pulumi.StringPtrInput
	// The mode of the DHCPv6 server. Must be one of: "disabled", "relay", "server".
	Dhcpv6 pulumi.StringPtrInput
	// Forces DHCP serving on the specified interface even if another DHCP server is detected on the same network segment.
	Force pulumi.BoolPtrInput
	// Specifies whether dnsmasq should ignore this pool.
	Ignore pulumi.BoolPtrInput
	// The interface associated with this DHCP address pool. This name is what the interface is known as in UCI, or the `id`
	// field in Terraform. Required if `ignore` is not `true`.
	Interface pulumi.StringPtrInput
	// The lease time of addresses handed out to clients. E.g. `12h`, or `30m`. Required if `ignore` is not `true`.
	Leasetime pulumi.StringPtrInput
	// Specifies the size of the address pool. E.g. With start = 100, and limit = 150, the maximum address will be 249. Required if `ignore` is not `true`.
	Limit pulumi.IntPtrInput
	// The mode of Router Advertisements. Must be one of: "disabled", "relay", "server".
	Ra pulumi.StringPtrInput
	// Router Advertisement flags to include in messages. Must be one of: "home-agent", "managed-config", "none", "other-config".
	RaFlags pulumi.StringArrayInput
	// Specifies the offset from the network address of the underlying interface to calculate the minimum address that may be leased to clients. It may be greater than 255 to span subnets. Required if `ignore` is not `true`.
	Start pulumi.IntPtrInput
}

func (DhcpDhcpState) ElementType() reflect.Type {
	return reflect.TypeOf((*dhcpDhcpState)(nil)).Elem()
}

type dhcpDhcpArgs struct {
	// The mode of the DHCPv4 server. Must be one of: "disabled", "server".
	Dhcpv4 *string `pulumi:"dhcpv4"`
	// The mode of the DHCPv6 server. Must be one of: "disabled", "relay", "server".
	Dhcpv6 *string `pulumi:"dhcpv6"`
	// Forces DHCP serving on the specified interface even if another DHCP server is detected on the same network segment.
	Force *bool `pulumi:"force"`
	// Specifies whether dnsmasq should ignore this pool.
	Ignore *bool `pulumi:"ignore"`
	// The interface associated with this DHCP address pool. This name is what the interface is known as in UCI, or the `id`
	// field in Terraform. Required if `ignore` is not `true`.
	Interface *string `pulumi:"interface"`
	// The lease time of addresses handed out to clients. E.g. `12h`, or `30m`. Required if `ignore` is not `true`.
	Leasetime *string `pulumi:"leasetime"`
	// Specifies the size of the address pool. E.g. With start = 100, and limit = 150, the maximum address will be 249. Required if `ignore` is not `true`.
	Limit *int `pulumi:"limit"`
	// The mode of Router Advertisements. Must be one of: "disabled", "relay", "server".
	Ra *string `pulumi:"ra"`
	// Router Advertisement flags to include in messages. Must be one of: "home-agent", "managed-config", "none", "other-config".
	RaFlags []string `pulumi:"raFlags"`
	// Specifies the offset from the network address of the underlying interface to calculate the minimum address that may be leased to clients. It may be greater than 255 to span subnets. Required if `ignore` is not `true`.
	Start *int `pulumi:"start"`
}

// The set of arguments for constructing a DhcpDhcp resource.
type DhcpDhcpArgs struct {
	// The mode of the DHCPv4 server. Must be one of: "disabled", "server".
	Dhcpv4 pulumi.StringPtrInput
	// The mode of the DHCPv6 server. Must be one of: "disabled", "relay", "server".
	Dhcpv6 pulumi.StringPtrInput
	// Forces DHCP serving on the specified interface even if another DHCP server is detected on the same network segment.
	Force pulumi.BoolPtrInput
	// Specifies whether dnsmasq should ignore this pool.
	Ignore pulumi.BoolPtrInput
	// The interface associated with this DHCP address pool. This name is what the interface is known as in UCI, or the `id`
	// field in Terraform. Required if `ignore` is not `true`.
	Interface pulumi.StringPtrInput
	// The lease time of addresses handed out to clients. E.g. `12h`, or `30m`. Required if `ignore` is not `true`.
	Leasetime pulumi.StringPtrInput
	// Specifies the size of the address pool. E.g. With start = 100, and limit = 150, the maximum address will be 249. Required if `ignore` is not `true`.
	Limit pulumi.IntPtrInput
	// The mode of Router Advertisements. Must be one of: "disabled", "relay", "server".
	Ra pulumi.StringPtrInput
	// Router Advertisement flags to include in messages. Must be one of: "home-agent", "managed-config", "none", "other-config".
	RaFlags pulumi.StringArrayInput
	// Specifies the offset from the network address of the underlying interface to calculate the minimum address that may be leased to clients. It may be greater than 255 to span subnets. Required if `ignore` is not `true`.
	Start pulumi.IntPtrInput
}

func (DhcpDhcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dhcpDhcpArgs)(nil)).Elem()
}

type DhcpDhcpInput interface {
	pulumi.Input

	ToDhcpDhcpOutput() DhcpDhcpOutput
	ToDhcpDhcpOutputWithContext(ctx context.Context) DhcpDhcpOutput
}

func (*DhcpDhcp) ElementType() reflect.Type {
	return reflect.TypeOf((**DhcpDhcp)(nil)).Elem()
}

func (i *DhcpDhcp) ToDhcpDhcpOutput() DhcpDhcpOutput {
	return i.ToDhcpDhcpOutputWithContext(context.Background())
}

func (i *DhcpDhcp) ToDhcpDhcpOutputWithContext(ctx context.Context) DhcpDhcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DhcpDhcpOutput)
}

func (i *DhcpDhcp) ToOutput(ctx context.Context) pulumix.Output[*DhcpDhcp] {
	return pulumix.Output[*DhcpDhcp]{
		OutputState: i.ToDhcpDhcpOutputWithContext(ctx).OutputState,
	}
}

// DhcpDhcpArrayInput is an input type that accepts DhcpDhcpArray and DhcpDhcpArrayOutput values.
// You can construct a concrete instance of `DhcpDhcpArrayInput` via:
//
//	DhcpDhcpArray{ DhcpDhcpArgs{...} }
type DhcpDhcpArrayInput interface {
	pulumi.Input

	ToDhcpDhcpArrayOutput() DhcpDhcpArrayOutput
	ToDhcpDhcpArrayOutputWithContext(context.Context) DhcpDhcpArrayOutput
}

type DhcpDhcpArray []DhcpDhcpInput

func (DhcpDhcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DhcpDhcp)(nil)).Elem()
}

func (i DhcpDhcpArray) ToDhcpDhcpArrayOutput() DhcpDhcpArrayOutput {
	return i.ToDhcpDhcpArrayOutputWithContext(context.Background())
}

func (i DhcpDhcpArray) ToDhcpDhcpArrayOutputWithContext(ctx context.Context) DhcpDhcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DhcpDhcpArrayOutput)
}

func (i DhcpDhcpArray) ToOutput(ctx context.Context) pulumix.Output[[]*DhcpDhcp] {
	return pulumix.Output[[]*DhcpDhcp]{
		OutputState: i.ToDhcpDhcpArrayOutputWithContext(ctx).OutputState,
	}
}

// DhcpDhcpMapInput is an input type that accepts DhcpDhcpMap and DhcpDhcpMapOutput values.
// You can construct a concrete instance of `DhcpDhcpMapInput` via:
//
//	DhcpDhcpMap{ "key": DhcpDhcpArgs{...} }
type DhcpDhcpMapInput interface {
	pulumi.Input

	ToDhcpDhcpMapOutput() DhcpDhcpMapOutput
	ToDhcpDhcpMapOutputWithContext(context.Context) DhcpDhcpMapOutput
}

type DhcpDhcpMap map[string]DhcpDhcpInput

func (DhcpDhcpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DhcpDhcp)(nil)).Elem()
}

func (i DhcpDhcpMap) ToDhcpDhcpMapOutput() DhcpDhcpMapOutput {
	return i.ToDhcpDhcpMapOutputWithContext(context.Background())
}

func (i DhcpDhcpMap) ToDhcpDhcpMapOutputWithContext(ctx context.Context) DhcpDhcpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DhcpDhcpMapOutput)
}

func (i DhcpDhcpMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*DhcpDhcp] {
	return pulumix.Output[map[string]*DhcpDhcp]{
		OutputState: i.ToDhcpDhcpMapOutputWithContext(ctx).OutputState,
	}
}

type DhcpDhcpOutput struct{ *pulumi.OutputState }

func (DhcpDhcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DhcpDhcp)(nil)).Elem()
}

func (o DhcpDhcpOutput) ToDhcpDhcpOutput() DhcpDhcpOutput {
	return o
}

func (o DhcpDhcpOutput) ToDhcpDhcpOutputWithContext(ctx context.Context) DhcpDhcpOutput {
	return o
}

func (o DhcpDhcpOutput) ToOutput(ctx context.Context) pulumix.Output[*DhcpDhcp] {
	return pulumix.Output[*DhcpDhcp]{
		OutputState: o.OutputState,
	}
}

// The mode of the DHCPv4 server. Must be one of: "disabled", "server".
func (o DhcpDhcpOutput) Dhcpv4() pulumi.StringOutput {
	return o.ApplyT(func(v *DhcpDhcp) pulumi.StringOutput { return v.Dhcpv4 }).(pulumi.StringOutput)
}

// The mode of the DHCPv6 server. Must be one of: "disabled", "relay", "server".
func (o DhcpDhcpOutput) Dhcpv6() pulumi.StringOutput {
	return o.ApplyT(func(v *DhcpDhcp) pulumi.StringOutput { return v.Dhcpv6 }).(pulumi.StringOutput)
}

// Forces DHCP serving on the specified interface even if another DHCP server is detected on the same network segment.
func (o DhcpDhcpOutput) Force() pulumi.BoolOutput {
	return o.ApplyT(func(v *DhcpDhcp) pulumi.BoolOutput { return v.Force }).(pulumi.BoolOutput)
}

// Specifies whether dnsmasq should ignore this pool.
func (o DhcpDhcpOutput) Ignore() pulumi.BoolOutput {
	return o.ApplyT(func(v *DhcpDhcp) pulumi.BoolOutput { return v.Ignore }).(pulumi.BoolOutput)
}

// The interface associated with this DHCP address pool. This name is what the interface is known as in UCI, or the `id`
// field in Terraform. Required if `ignore` is not `true`.
func (o DhcpDhcpOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *DhcpDhcp) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// The lease time of addresses handed out to clients. E.g. `12h`, or `30m`. Required if `ignore` is not `true`.
func (o DhcpDhcpOutput) Leasetime() pulumi.StringOutput {
	return o.ApplyT(func(v *DhcpDhcp) pulumi.StringOutput { return v.Leasetime }).(pulumi.StringOutput)
}

// Specifies the size of the address pool. E.g. With start = 100, and limit = 150, the maximum address will be 249. Required if `ignore` is not `true`.
func (o DhcpDhcpOutput) Limit() pulumi.IntOutput {
	return o.ApplyT(func(v *DhcpDhcp) pulumi.IntOutput { return v.Limit }).(pulumi.IntOutput)
}

// The mode of Router Advertisements. Must be one of: "disabled", "relay", "server".
func (o DhcpDhcpOutput) Ra() pulumi.StringOutput {
	return o.ApplyT(func(v *DhcpDhcp) pulumi.StringOutput { return v.Ra }).(pulumi.StringOutput)
}

// Router Advertisement flags to include in messages. Must be one of: "home-agent", "managed-config", "none", "other-config".
func (o DhcpDhcpOutput) RaFlags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DhcpDhcp) pulumi.StringArrayOutput { return v.RaFlags }).(pulumi.StringArrayOutput)
}

// Specifies the offset from the network address of the underlying interface to calculate the minimum address that may be leased to clients. It may be greater than 255 to span subnets. Required if `ignore` is not `true`.
func (o DhcpDhcpOutput) Start() pulumi.IntOutput {
	return o.ApplyT(func(v *DhcpDhcp) pulumi.IntOutput { return v.Start }).(pulumi.IntOutput)
}

type DhcpDhcpArrayOutput struct{ *pulumi.OutputState }

func (DhcpDhcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DhcpDhcp)(nil)).Elem()
}

func (o DhcpDhcpArrayOutput) ToDhcpDhcpArrayOutput() DhcpDhcpArrayOutput {
	return o
}

func (o DhcpDhcpArrayOutput) ToDhcpDhcpArrayOutputWithContext(ctx context.Context) DhcpDhcpArrayOutput {
	return o
}

func (o DhcpDhcpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*DhcpDhcp] {
	return pulumix.Output[[]*DhcpDhcp]{
		OutputState: o.OutputState,
	}
}

func (o DhcpDhcpArrayOutput) Index(i pulumi.IntInput) DhcpDhcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DhcpDhcp {
		return vs[0].([]*DhcpDhcp)[vs[1].(int)]
	}).(DhcpDhcpOutput)
}

type DhcpDhcpMapOutput struct{ *pulumi.OutputState }

func (DhcpDhcpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DhcpDhcp)(nil)).Elem()
}

func (o DhcpDhcpMapOutput) ToDhcpDhcpMapOutput() DhcpDhcpMapOutput {
	return o
}

func (o DhcpDhcpMapOutput) ToDhcpDhcpMapOutputWithContext(ctx context.Context) DhcpDhcpMapOutput {
	return o
}

func (o DhcpDhcpMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*DhcpDhcp] {
	return pulumix.Output[map[string]*DhcpDhcp]{
		OutputState: o.OutputState,
	}
}

func (o DhcpDhcpMapOutput) MapIndex(k pulumi.StringInput) DhcpDhcpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DhcpDhcp {
		return vs[0].(map[string]*DhcpDhcp)[vs[1].(string)]
	}).(DhcpDhcpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DhcpDhcpInput)(nil)).Elem(), &DhcpDhcp{})
	pulumi.RegisterInputType(reflect.TypeOf((*DhcpDhcpArrayInput)(nil)).Elem(), DhcpDhcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DhcpDhcpMapInput)(nil)).Elem(), DhcpDhcpMap{})
	pulumi.RegisterOutputType(DhcpDhcpOutput{})
	pulumi.RegisterOutputType(DhcpDhcpArrayOutput{})
	pulumi.RegisterOutputType(DhcpDhcpMapOutput{})
}

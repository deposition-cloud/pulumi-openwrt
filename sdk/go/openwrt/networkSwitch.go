// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openwrt

import (
	"context"
	"reflect"

	"github.com/deposition-cloud/pulumi-openwrt/sdk/go/openwrt/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Legacy `swconfig` configuration
//
// ## Import
//
// The name can be found through LuCI's web UI. It will be in quotes on `/cgi-bin/luci/admin/network/switch`. The page might say:
//
//	Switch "switch0" # The "switch0" is the name. The name can also be found from LuCI's JSON-RPC API. # Find the Terraform id and UCI name from LuCI's JSON-RPC API. One way to find this information is with `curl` and `jq`# curl \
//
//	--data '{"id"0, "method""foreach", "params"["network", "switch"]}' \
//
//	http://192.168.1.1/cgi-bin/luci/rpc/uci?auth=$AUTH_TOKEN \
//
//	| jq '.result | map({terraformId.[".name"], uciName.name})' # This command will output something like# [
//
//	{
//
//	"terraformId""cfg123456",
//
//	"uciName""switch0"
//
//	} ] # We'd then use the information to import the appropriate resource
//
// ```sh
//
//	$ pulumi import openwrt:index/networkSwitch:NetworkSwitch switch0 cfg123456
//
// ```
type NetworkSwitch struct {
	pulumi.CustomResourceState

	// Mirror received packets from the `mirrorSourcePort` to the `mirrorMonitorPort`.
	EnableMirrorRx pulumi.BoolOutput `pulumi:"enableMirrorRx"`
	// Mirror transmitted packets from the `mirrorSourcePort` to the `mirrorMonitorPort`.
	EnableMirrorTx pulumi.BoolOutput `pulumi:"enableMirrorTx"`
	// Enables VLAN functionality.
	EnableVlan pulumi.BoolOutput `pulumi:"enableVlan"`
	// Switch port to which packets are mirrored.
	MirrorMonitorPort pulumi.IntOutput `pulumi:"mirrorMonitorPort"`
	// Switch port from which packets are mirrored.
	MirrorSourcePort pulumi.IntOutput `pulumi:"mirrorSourcePort"`
	// Name of the switch. This name is what is shown in LuCI or the `name` field in Terraform. This is not the UCI config
	// name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Reset the switch.
	Reset pulumi.BoolOutput `pulumi:"reset"`
}

// NewNetworkSwitch registers a new resource with the given unique name, arguments, and options.
func NewNetworkSwitch(ctx *pulumi.Context,
	name string, args *NetworkSwitchArgs, opts ...pulumi.ResourceOption) (*NetworkSwitch, error) {
	if args == nil {
		args = &NetworkSwitchArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkSwitch
	err := ctx.RegisterResource("openwrt:index/networkSwitch:NetworkSwitch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkSwitch gets an existing NetworkSwitch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkSwitch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkSwitchState, opts ...pulumi.ResourceOption) (*NetworkSwitch, error) {
	var resource NetworkSwitch
	err := ctx.ReadResource("openwrt:index/networkSwitch:NetworkSwitch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkSwitch resources.
type networkSwitchState struct {
	// Mirror received packets from the `mirrorSourcePort` to the `mirrorMonitorPort`.
	EnableMirrorRx *bool `pulumi:"enableMirrorRx"`
	// Mirror transmitted packets from the `mirrorSourcePort` to the `mirrorMonitorPort`.
	EnableMirrorTx *bool `pulumi:"enableMirrorTx"`
	// Enables VLAN functionality.
	EnableVlan *bool `pulumi:"enableVlan"`
	// Switch port to which packets are mirrored.
	MirrorMonitorPort *int `pulumi:"mirrorMonitorPort"`
	// Switch port from which packets are mirrored.
	MirrorSourcePort *int `pulumi:"mirrorSourcePort"`
	// Name of the switch. This name is what is shown in LuCI or the `name` field in Terraform. This is not the UCI config
	// name.
	Name *string `pulumi:"name"`
	// Reset the switch.
	Reset *bool `pulumi:"reset"`
}

type NetworkSwitchState struct {
	// Mirror received packets from the `mirrorSourcePort` to the `mirrorMonitorPort`.
	EnableMirrorRx pulumi.BoolPtrInput
	// Mirror transmitted packets from the `mirrorSourcePort` to the `mirrorMonitorPort`.
	EnableMirrorTx pulumi.BoolPtrInput
	// Enables VLAN functionality.
	EnableVlan pulumi.BoolPtrInput
	// Switch port to which packets are mirrored.
	MirrorMonitorPort pulumi.IntPtrInput
	// Switch port from which packets are mirrored.
	MirrorSourcePort pulumi.IntPtrInput
	// Name of the switch. This name is what is shown in LuCI or the `name` field in Terraform. This is not the UCI config
	// name.
	Name pulumi.StringPtrInput
	// Reset the switch.
	Reset pulumi.BoolPtrInput
}

func (NetworkSwitchState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkSwitchState)(nil)).Elem()
}

type networkSwitchArgs struct {
	// Mirror received packets from the `mirrorSourcePort` to the `mirrorMonitorPort`.
	EnableMirrorRx *bool `pulumi:"enableMirrorRx"`
	// Mirror transmitted packets from the `mirrorSourcePort` to the `mirrorMonitorPort`.
	EnableMirrorTx *bool `pulumi:"enableMirrorTx"`
	// Enables VLAN functionality.
	EnableVlan *bool `pulumi:"enableVlan"`
	// Switch port to which packets are mirrored.
	MirrorMonitorPort *int `pulumi:"mirrorMonitorPort"`
	// Switch port from which packets are mirrored.
	MirrorSourcePort *int `pulumi:"mirrorSourcePort"`
	// Name of the switch. This name is what is shown in LuCI or the `name` field in Terraform. This is not the UCI config
	// name.
	Name *string `pulumi:"name"`
	// Reset the switch.
	Reset *bool `pulumi:"reset"`
}

// The set of arguments for constructing a NetworkSwitch resource.
type NetworkSwitchArgs struct {
	// Mirror received packets from the `mirrorSourcePort` to the `mirrorMonitorPort`.
	EnableMirrorRx pulumi.BoolPtrInput
	// Mirror transmitted packets from the `mirrorSourcePort` to the `mirrorMonitorPort`.
	EnableMirrorTx pulumi.BoolPtrInput
	// Enables VLAN functionality.
	EnableVlan pulumi.BoolPtrInput
	// Switch port to which packets are mirrored.
	MirrorMonitorPort pulumi.IntPtrInput
	// Switch port from which packets are mirrored.
	MirrorSourcePort pulumi.IntPtrInput
	// Name of the switch. This name is what is shown in LuCI or the `name` field in Terraform. This is not the UCI config
	// name.
	Name pulumi.StringPtrInput
	// Reset the switch.
	Reset pulumi.BoolPtrInput
}

func (NetworkSwitchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkSwitchArgs)(nil)).Elem()
}

type NetworkSwitchInput interface {
	pulumi.Input

	ToNetworkSwitchOutput() NetworkSwitchOutput
	ToNetworkSwitchOutputWithContext(ctx context.Context) NetworkSwitchOutput
}

func (*NetworkSwitch) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkSwitch)(nil)).Elem()
}

func (i *NetworkSwitch) ToNetworkSwitchOutput() NetworkSwitchOutput {
	return i.ToNetworkSwitchOutputWithContext(context.Background())
}

func (i *NetworkSwitch) ToNetworkSwitchOutputWithContext(ctx context.Context) NetworkSwitchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSwitchOutput)
}

func (i *NetworkSwitch) ToOutput(ctx context.Context) pulumix.Output[*NetworkSwitch] {
	return pulumix.Output[*NetworkSwitch]{
		OutputState: i.ToNetworkSwitchOutputWithContext(ctx).OutputState,
	}
}

// NetworkSwitchArrayInput is an input type that accepts NetworkSwitchArray and NetworkSwitchArrayOutput values.
// You can construct a concrete instance of `NetworkSwitchArrayInput` via:
//
//	NetworkSwitchArray{ NetworkSwitchArgs{...} }
type NetworkSwitchArrayInput interface {
	pulumi.Input

	ToNetworkSwitchArrayOutput() NetworkSwitchArrayOutput
	ToNetworkSwitchArrayOutputWithContext(context.Context) NetworkSwitchArrayOutput
}

type NetworkSwitchArray []NetworkSwitchInput

func (NetworkSwitchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkSwitch)(nil)).Elem()
}

func (i NetworkSwitchArray) ToNetworkSwitchArrayOutput() NetworkSwitchArrayOutput {
	return i.ToNetworkSwitchArrayOutputWithContext(context.Background())
}

func (i NetworkSwitchArray) ToNetworkSwitchArrayOutputWithContext(ctx context.Context) NetworkSwitchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSwitchArrayOutput)
}

func (i NetworkSwitchArray) ToOutput(ctx context.Context) pulumix.Output[[]*NetworkSwitch] {
	return pulumix.Output[[]*NetworkSwitch]{
		OutputState: i.ToNetworkSwitchArrayOutputWithContext(ctx).OutputState,
	}
}

// NetworkSwitchMapInput is an input type that accepts NetworkSwitchMap and NetworkSwitchMapOutput values.
// You can construct a concrete instance of `NetworkSwitchMapInput` via:
//
//	NetworkSwitchMap{ "key": NetworkSwitchArgs{...} }
type NetworkSwitchMapInput interface {
	pulumi.Input

	ToNetworkSwitchMapOutput() NetworkSwitchMapOutput
	ToNetworkSwitchMapOutputWithContext(context.Context) NetworkSwitchMapOutput
}

type NetworkSwitchMap map[string]NetworkSwitchInput

func (NetworkSwitchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkSwitch)(nil)).Elem()
}

func (i NetworkSwitchMap) ToNetworkSwitchMapOutput() NetworkSwitchMapOutput {
	return i.ToNetworkSwitchMapOutputWithContext(context.Background())
}

func (i NetworkSwitchMap) ToNetworkSwitchMapOutputWithContext(ctx context.Context) NetworkSwitchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSwitchMapOutput)
}

func (i NetworkSwitchMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*NetworkSwitch] {
	return pulumix.Output[map[string]*NetworkSwitch]{
		OutputState: i.ToNetworkSwitchMapOutputWithContext(ctx).OutputState,
	}
}

type NetworkSwitchOutput struct{ *pulumi.OutputState }

func (NetworkSwitchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkSwitch)(nil)).Elem()
}

func (o NetworkSwitchOutput) ToNetworkSwitchOutput() NetworkSwitchOutput {
	return o
}

func (o NetworkSwitchOutput) ToNetworkSwitchOutputWithContext(ctx context.Context) NetworkSwitchOutput {
	return o
}

func (o NetworkSwitchOutput) ToOutput(ctx context.Context) pulumix.Output[*NetworkSwitch] {
	return pulumix.Output[*NetworkSwitch]{
		OutputState: o.OutputState,
	}
}

// Mirror received packets from the `mirrorSourcePort` to the `mirrorMonitorPort`.
func (o NetworkSwitchOutput) EnableMirrorRx() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetworkSwitch) pulumi.BoolOutput { return v.EnableMirrorRx }).(pulumi.BoolOutput)
}

// Mirror transmitted packets from the `mirrorSourcePort` to the `mirrorMonitorPort`.
func (o NetworkSwitchOutput) EnableMirrorTx() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetworkSwitch) pulumi.BoolOutput { return v.EnableMirrorTx }).(pulumi.BoolOutput)
}

// Enables VLAN functionality.
func (o NetworkSwitchOutput) EnableVlan() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetworkSwitch) pulumi.BoolOutput { return v.EnableVlan }).(pulumi.BoolOutput)
}

// Switch port to which packets are mirrored.
func (o NetworkSwitchOutput) MirrorMonitorPort() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkSwitch) pulumi.IntOutput { return v.MirrorMonitorPort }).(pulumi.IntOutput)
}

// Switch port from which packets are mirrored.
func (o NetworkSwitchOutput) MirrorSourcePort() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkSwitch) pulumi.IntOutput { return v.MirrorSourcePort }).(pulumi.IntOutput)
}

// Name of the switch. This name is what is shown in LuCI or the `name` field in Terraform. This is not the UCI config
// name.
func (o NetworkSwitchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSwitch) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Reset the switch.
func (o NetworkSwitchOutput) Reset() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetworkSwitch) pulumi.BoolOutput { return v.Reset }).(pulumi.BoolOutput)
}

type NetworkSwitchArrayOutput struct{ *pulumi.OutputState }

func (NetworkSwitchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkSwitch)(nil)).Elem()
}

func (o NetworkSwitchArrayOutput) ToNetworkSwitchArrayOutput() NetworkSwitchArrayOutput {
	return o
}

func (o NetworkSwitchArrayOutput) ToNetworkSwitchArrayOutputWithContext(ctx context.Context) NetworkSwitchArrayOutput {
	return o
}

func (o NetworkSwitchArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*NetworkSwitch] {
	return pulumix.Output[[]*NetworkSwitch]{
		OutputState: o.OutputState,
	}
}

func (o NetworkSwitchArrayOutput) Index(i pulumi.IntInput) NetworkSwitchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkSwitch {
		return vs[0].([]*NetworkSwitch)[vs[1].(int)]
	}).(NetworkSwitchOutput)
}

type NetworkSwitchMapOutput struct{ *pulumi.OutputState }

func (NetworkSwitchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkSwitch)(nil)).Elem()
}

func (o NetworkSwitchMapOutput) ToNetworkSwitchMapOutput() NetworkSwitchMapOutput {
	return o
}

func (o NetworkSwitchMapOutput) ToNetworkSwitchMapOutputWithContext(ctx context.Context) NetworkSwitchMapOutput {
	return o
}

func (o NetworkSwitchMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*NetworkSwitch] {
	return pulumix.Output[map[string]*NetworkSwitch]{
		OutputState: o.OutputState,
	}
}

func (o NetworkSwitchMapOutput) MapIndex(k pulumi.StringInput) NetworkSwitchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkSwitch {
		return vs[0].(map[string]*NetworkSwitch)[vs[1].(string)]
	}).(NetworkSwitchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSwitchInput)(nil)).Elem(), &NetworkSwitch{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSwitchArrayInput)(nil)).Elem(), NetworkSwitchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSwitchMapInput)(nil)).Elem(), NetworkSwitchMap{})
	pulumi.RegisterOutputType(NetworkSwitchOutput{})
	pulumi.RegisterOutputType(NetworkSwitchArrayOutput{})
	pulumi.RegisterOutputType(NetworkSwitchMapOutput{})
}

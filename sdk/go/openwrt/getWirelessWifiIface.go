// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openwrt

import (
	"context"
	"reflect"

	"github.com/deposition-cloud/pulumi-openwrt/sdk/go/openwrt/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// A wireless network.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/deposition-cloud/pulumi-openwrt/sdk/go/openwrt"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := openwrt.LookupWirelessWifiIface(ctx, &openwrt.LookupWirelessWifiIfaceArgs{
//				Id: "testing",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupWirelessWifiIface(ctx *pulumi.Context, args *LookupWirelessWifiIfaceArgs, opts ...pulumi.InvokeOption) (*LookupWirelessWifiIfaceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupWirelessWifiIfaceResult
	err := ctx.Invoke("openwrt:index/getWirelessWifiIface:getWirelessWifiIface", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getWirelessWifiIface.
type LookupWirelessWifiIfaceArgs struct {
	// Name of the section. This name is only used when interacting with UCI directly.
	Id string `pulumi:"id"`
}

// A collection of values returned by getWirelessWifiIface.
type LookupWirelessWifiIfaceResult struct {
	Device string `pulumi:"device"`
	// Encryption method. Currently, only PSK encryption methods are supported. Must be one of: "none", "psk", "psk2", "psk2+aes", "psk2+ccmp", "psk2+tkip", "psk2+tkip+aes", "psk2+tkip+ccmp", "psk+aes", "psk+ccmp", "psk-mixed", "psk-mixed+aes", "psk-mixed+ccmp", "psk-mixed+tkip", "psk-mixed+tkip+aes", "psk-mixed+tkip+ccmp", "psk+tkip", "psk+tkip+aes", "psk+tkip+ccmp", "sae", "sae-mixed".
	Encryption string `pulumi:"encryption"`
	// Name of the section. This name is only used when interacting with UCI directly.
	Id string `pulumi:"id"`
	// Isolate wireless clients from each other.
	Isolate bool `pulumi:"isolate"`
	// The pre-shared passphrase from which the pre-shared key will be derived. The clear text key has to be 8-63 characters long.
	Key string `pulumi:"key"`
	// The operation mode of the wireless network interface controller.. Currently only "ap" is supported.
	Mode    string `pulumi:"mode"`
	Network string `pulumi:"network"`
	// The broadcasted SSID of the wireless network. This is what actual clients will see the network as.
	Ssid string `pulumi:"ssid"`
	// Enable WPA key reinstallation attack (KRACK) workaround. This should be `true` to enable KRACK workaround (you almost surely want this enabled).
	WpaDisableEapolKeyRetries bool `pulumi:"wpaDisableEapolKeyRetries"`
}

func LookupWirelessWifiIfaceOutput(ctx *pulumi.Context, args LookupWirelessWifiIfaceOutputArgs, opts ...pulumi.InvokeOption) LookupWirelessWifiIfaceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupWirelessWifiIfaceResult, error) {
			args := v.(LookupWirelessWifiIfaceArgs)
			r, err := LookupWirelessWifiIface(ctx, &args, opts...)
			var s LookupWirelessWifiIfaceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupWirelessWifiIfaceResultOutput)
}

// A collection of arguments for invoking getWirelessWifiIface.
type LookupWirelessWifiIfaceOutputArgs struct {
	// Name of the section. This name is only used when interacting with UCI directly.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupWirelessWifiIfaceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWirelessWifiIfaceArgs)(nil)).Elem()
}

// A collection of values returned by getWirelessWifiIface.
type LookupWirelessWifiIfaceResultOutput struct{ *pulumi.OutputState }

func (LookupWirelessWifiIfaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWirelessWifiIfaceResult)(nil)).Elem()
}

func (o LookupWirelessWifiIfaceResultOutput) ToLookupWirelessWifiIfaceResultOutput() LookupWirelessWifiIfaceResultOutput {
	return o
}

func (o LookupWirelessWifiIfaceResultOutput) ToLookupWirelessWifiIfaceResultOutputWithContext(ctx context.Context) LookupWirelessWifiIfaceResultOutput {
	return o
}

func (o LookupWirelessWifiIfaceResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupWirelessWifiIfaceResult] {
	return pulumix.Output[LookupWirelessWifiIfaceResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupWirelessWifiIfaceResultOutput) Device() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWirelessWifiIfaceResult) string { return v.Device }).(pulumi.StringOutput)
}

// Encryption method. Currently, only PSK encryption methods are supported. Must be one of: "none", "psk", "psk2", "psk2+aes", "psk2+ccmp", "psk2+tkip", "psk2+tkip+aes", "psk2+tkip+ccmp", "psk+aes", "psk+ccmp", "psk-mixed", "psk-mixed+aes", "psk-mixed+ccmp", "psk-mixed+tkip", "psk-mixed+tkip+aes", "psk-mixed+tkip+ccmp", "psk+tkip", "psk+tkip+aes", "psk+tkip+ccmp", "sae", "sae-mixed".
func (o LookupWirelessWifiIfaceResultOutput) Encryption() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWirelessWifiIfaceResult) string { return v.Encryption }).(pulumi.StringOutput)
}

// Name of the section. This name is only used when interacting with UCI directly.
func (o LookupWirelessWifiIfaceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWirelessWifiIfaceResult) string { return v.Id }).(pulumi.StringOutput)
}

// Isolate wireless clients from each other.
func (o LookupWirelessWifiIfaceResultOutput) Isolate() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupWirelessWifiIfaceResult) bool { return v.Isolate }).(pulumi.BoolOutput)
}

// The pre-shared passphrase from which the pre-shared key will be derived. The clear text key has to be 8-63 characters long.
func (o LookupWirelessWifiIfaceResultOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWirelessWifiIfaceResult) string { return v.Key }).(pulumi.StringOutput)
}

// The operation mode of the wireless network interface controller.. Currently only "ap" is supported.
func (o LookupWirelessWifiIfaceResultOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWirelessWifiIfaceResult) string { return v.Mode }).(pulumi.StringOutput)
}

func (o LookupWirelessWifiIfaceResultOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWirelessWifiIfaceResult) string { return v.Network }).(pulumi.StringOutput)
}

// The broadcasted SSID of the wireless network. This is what actual clients will see the network as.
func (o LookupWirelessWifiIfaceResultOutput) Ssid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWirelessWifiIfaceResult) string { return v.Ssid }).(pulumi.StringOutput)
}

// Enable WPA key reinstallation attack (KRACK) workaround. This should be `true` to enable KRACK workaround (you almost surely want this enabled).
func (o LookupWirelessWifiIfaceResultOutput) WpaDisableEapolKeyRetries() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupWirelessWifiIfaceResult) bool { return v.WpaDisableEapolKeyRetries }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupWirelessWifiIfaceResultOutput{})
}

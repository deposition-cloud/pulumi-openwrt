// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openwrt

import (
	"context"
	"reflect"

	"errors"
	"github.com/deposition-cloud/pulumi-openwrt/sdk/go/openwrt/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// A logic network.
//
// ## Import
//
// Find the Terraform id is the same as the UCI name from LuCI's JSON-RPC API. It is also generally the lower-cased version of the interface name in LuCI's web UI. One way to find this information is with `curl` and `jq`# curl \
//
//	--data '{"id"0, "method""foreach", "params"["network", "interface"]}' \
//
//	http://192.168.1.1/cgi-bin/luci/rpc/uci?auth=$AUTH_TOKEN \
//
//	| jq '.result | map(.[".name"])' # This command will output something like# [
//
//	"loopback",
//
//	"wan",
//
//	"wan6" ] # We'd then use the information to import the appropriate resource
//
// ```sh
//
//	$ pulumi import openwrt:index/networkInterface:NetworkInterface loopback loopback
//
// ```
type NetworkInterface struct {
	pulumi.CustomResourceState

	// Specifies whether to bring up this interface on boot.
	Auto pulumi.BoolOutput `pulumi:"auto"`
	// Name of the (physical or virtual) device. This name is what the device is known as in LuCI or the `name` field in
	// Terraform. This is not the UCI config name.
	Device pulumi.StringOutput `pulumi:"device"`
	// Disables this interface.
	Disabled pulumi.BoolOutput `pulumi:"disabled"`
	// DNS servers
	Dns pulumi.StringArrayOutput `pulumi:"dns"`
	// Gateway of the interface
	Gateway pulumi.StringOutput `pulumi:"gateway"`
	// Delegate a prefix of given length to this interface
	Ip6assign pulumi.IntOutput `pulumi:"ip6assign"`
	// IP address of the interface
	Ipaddr pulumi.StringOutput `pulumi:"ipaddr"`
	// Override the MAC Address of this interface.
	Macaddr pulumi.StringOutput `pulumi:"macaddr"`
	// Override the default MTU on this interface.
	Mtu pulumi.IntOutput `pulumi:"mtu"`
	// Netmask of the interface
	Netmask pulumi.StringOutput `pulumi:"netmask"`
	// Use DHCP-provided DNS servers.
	Peerdns pulumi.BoolOutput `pulumi:"peerdns"`
	// The protocol type of the interface. Currently, only "dhcp, and "static" are supported.
	Proto pulumi.StringOutput `pulumi:"proto"`
	// Behavior for requesting address. Can only be one of "force", "try", or "none".
	Reqaddress pulumi.StringOutput `pulumi:"reqaddress"`
	// Behavior for requesting prefixes. Currently, only "auto" is supported.
	Reqprefix pulumi.StringOutput `pulumi:"reqprefix"`
}

// NewNetworkInterface registers a new resource with the given unique name, arguments, and options.
func NewNetworkInterface(ctx *pulumi.Context,
	name string, args *NetworkInterfaceArgs, opts ...pulumi.ResourceOption) (*NetworkInterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Device == nil {
		return nil, errors.New("invalid value for required argument 'Device'")
	}
	if args.Proto == nil {
		return nil, errors.New("invalid value for required argument 'Proto'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkInterface
	err := ctx.RegisterResource("openwrt:index/networkInterface:NetworkInterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkInterface gets an existing NetworkInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkInterfaceState, opts ...pulumi.ResourceOption) (*NetworkInterface, error) {
	var resource NetworkInterface
	err := ctx.ReadResource("openwrt:index/networkInterface:NetworkInterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkInterface resources.
type networkInterfaceState struct {
	// Specifies whether to bring up this interface on boot.
	Auto *bool `pulumi:"auto"`
	// Name of the (physical or virtual) device. This name is what the device is known as in LuCI or the `name` field in
	// Terraform. This is not the UCI config name.
	Device *string `pulumi:"device"`
	// Disables this interface.
	Disabled *bool `pulumi:"disabled"`
	// DNS servers
	Dns []string `pulumi:"dns"`
	// Gateway of the interface
	Gateway *string `pulumi:"gateway"`
	// Delegate a prefix of given length to this interface
	Ip6assign *int `pulumi:"ip6assign"`
	// IP address of the interface
	Ipaddr *string `pulumi:"ipaddr"`
	// Override the MAC Address of this interface.
	Macaddr *string `pulumi:"macaddr"`
	// Override the default MTU on this interface.
	Mtu *int `pulumi:"mtu"`
	// Netmask of the interface
	Netmask *string `pulumi:"netmask"`
	// Use DHCP-provided DNS servers.
	Peerdns *bool `pulumi:"peerdns"`
	// The protocol type of the interface. Currently, only "dhcp, and "static" are supported.
	Proto *string `pulumi:"proto"`
	// Behavior for requesting address. Can only be one of "force", "try", or "none".
	Reqaddress *string `pulumi:"reqaddress"`
	// Behavior for requesting prefixes. Currently, only "auto" is supported.
	Reqprefix *string `pulumi:"reqprefix"`
}

type NetworkInterfaceState struct {
	// Specifies whether to bring up this interface on boot.
	Auto pulumi.BoolPtrInput
	// Name of the (physical or virtual) device. This name is what the device is known as in LuCI or the `name` field in
	// Terraform. This is not the UCI config name.
	Device pulumi.StringPtrInput
	// Disables this interface.
	Disabled pulumi.BoolPtrInput
	// DNS servers
	Dns pulumi.StringArrayInput
	// Gateway of the interface
	Gateway pulumi.StringPtrInput
	// Delegate a prefix of given length to this interface
	Ip6assign pulumi.IntPtrInput
	// IP address of the interface
	Ipaddr pulumi.StringPtrInput
	// Override the MAC Address of this interface.
	Macaddr pulumi.StringPtrInput
	// Override the default MTU on this interface.
	Mtu pulumi.IntPtrInput
	// Netmask of the interface
	Netmask pulumi.StringPtrInput
	// Use DHCP-provided DNS servers.
	Peerdns pulumi.BoolPtrInput
	// The protocol type of the interface. Currently, only "dhcp, and "static" are supported.
	Proto pulumi.StringPtrInput
	// Behavior for requesting address. Can only be one of "force", "try", or "none".
	Reqaddress pulumi.StringPtrInput
	// Behavior for requesting prefixes. Currently, only "auto" is supported.
	Reqprefix pulumi.StringPtrInput
}

func (NetworkInterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkInterfaceState)(nil)).Elem()
}

type networkInterfaceArgs struct {
	// Specifies whether to bring up this interface on boot.
	Auto *bool `pulumi:"auto"`
	// Name of the (physical or virtual) device. This name is what the device is known as in LuCI or the `name` field in
	// Terraform. This is not the UCI config name.
	Device string `pulumi:"device"`
	// Disables this interface.
	Disabled *bool `pulumi:"disabled"`
	// DNS servers
	Dns []string `pulumi:"dns"`
	// Gateway of the interface
	Gateway *string `pulumi:"gateway"`
	// Delegate a prefix of given length to this interface
	Ip6assign *int `pulumi:"ip6assign"`
	// IP address of the interface
	Ipaddr *string `pulumi:"ipaddr"`
	// Override the MAC Address of this interface.
	Macaddr *string `pulumi:"macaddr"`
	// Override the default MTU on this interface.
	Mtu *int `pulumi:"mtu"`
	// Netmask of the interface
	Netmask *string `pulumi:"netmask"`
	// Use DHCP-provided DNS servers.
	Peerdns *bool `pulumi:"peerdns"`
	// The protocol type of the interface. Currently, only "dhcp, and "static" are supported.
	Proto string `pulumi:"proto"`
	// Behavior for requesting address. Can only be one of "force", "try", or "none".
	Reqaddress *string `pulumi:"reqaddress"`
	// Behavior for requesting prefixes. Currently, only "auto" is supported.
	Reqprefix *string `pulumi:"reqprefix"`
}

// The set of arguments for constructing a NetworkInterface resource.
type NetworkInterfaceArgs struct {
	// Specifies whether to bring up this interface on boot.
	Auto pulumi.BoolPtrInput
	// Name of the (physical or virtual) device. This name is what the device is known as in LuCI or the `name` field in
	// Terraform. This is not the UCI config name.
	Device pulumi.StringInput
	// Disables this interface.
	Disabled pulumi.BoolPtrInput
	// DNS servers
	Dns pulumi.StringArrayInput
	// Gateway of the interface
	Gateway pulumi.StringPtrInput
	// Delegate a prefix of given length to this interface
	Ip6assign pulumi.IntPtrInput
	// IP address of the interface
	Ipaddr pulumi.StringPtrInput
	// Override the MAC Address of this interface.
	Macaddr pulumi.StringPtrInput
	// Override the default MTU on this interface.
	Mtu pulumi.IntPtrInput
	// Netmask of the interface
	Netmask pulumi.StringPtrInput
	// Use DHCP-provided DNS servers.
	Peerdns pulumi.BoolPtrInput
	// The protocol type of the interface. Currently, only "dhcp, and "static" are supported.
	Proto pulumi.StringInput
	// Behavior for requesting address. Can only be one of "force", "try", or "none".
	Reqaddress pulumi.StringPtrInput
	// Behavior for requesting prefixes. Currently, only "auto" is supported.
	Reqprefix pulumi.StringPtrInput
}

func (NetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkInterfaceArgs)(nil)).Elem()
}

type NetworkInterfaceInput interface {
	pulumi.Input

	ToNetworkInterfaceOutput() NetworkInterfaceOutput
	ToNetworkInterfaceOutputWithContext(ctx context.Context) NetworkInterfaceOutput
}

func (*NetworkInterface) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkInterface)(nil)).Elem()
}

func (i *NetworkInterface) ToNetworkInterfaceOutput() NetworkInterfaceOutput {
	return i.ToNetworkInterfaceOutputWithContext(context.Background())
}

func (i *NetworkInterface) ToNetworkInterfaceOutputWithContext(ctx context.Context) NetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceOutput)
}

func (i *NetworkInterface) ToOutput(ctx context.Context) pulumix.Output[*NetworkInterface] {
	return pulumix.Output[*NetworkInterface]{
		OutputState: i.ToNetworkInterfaceOutputWithContext(ctx).OutputState,
	}
}

// NetworkInterfaceArrayInput is an input type that accepts NetworkInterfaceArray and NetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `NetworkInterfaceArrayInput` via:
//
//	NetworkInterfaceArray{ NetworkInterfaceArgs{...} }
type NetworkInterfaceArrayInput interface {
	pulumi.Input

	ToNetworkInterfaceArrayOutput() NetworkInterfaceArrayOutput
	ToNetworkInterfaceArrayOutputWithContext(context.Context) NetworkInterfaceArrayOutput
}

type NetworkInterfaceArray []NetworkInterfaceInput

func (NetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkInterface)(nil)).Elem()
}

func (i NetworkInterfaceArray) ToNetworkInterfaceArrayOutput() NetworkInterfaceArrayOutput {
	return i.ToNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i NetworkInterfaceArray) ToNetworkInterfaceArrayOutputWithContext(ctx context.Context) NetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceArrayOutput)
}

func (i NetworkInterfaceArray) ToOutput(ctx context.Context) pulumix.Output[[]*NetworkInterface] {
	return pulumix.Output[[]*NetworkInterface]{
		OutputState: i.ToNetworkInterfaceArrayOutputWithContext(ctx).OutputState,
	}
}

// NetworkInterfaceMapInput is an input type that accepts NetworkInterfaceMap and NetworkInterfaceMapOutput values.
// You can construct a concrete instance of `NetworkInterfaceMapInput` via:
//
//	NetworkInterfaceMap{ "key": NetworkInterfaceArgs{...} }
type NetworkInterfaceMapInput interface {
	pulumi.Input

	ToNetworkInterfaceMapOutput() NetworkInterfaceMapOutput
	ToNetworkInterfaceMapOutputWithContext(context.Context) NetworkInterfaceMapOutput
}

type NetworkInterfaceMap map[string]NetworkInterfaceInput

func (NetworkInterfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkInterface)(nil)).Elem()
}

func (i NetworkInterfaceMap) ToNetworkInterfaceMapOutput() NetworkInterfaceMapOutput {
	return i.ToNetworkInterfaceMapOutputWithContext(context.Background())
}

func (i NetworkInterfaceMap) ToNetworkInterfaceMapOutputWithContext(ctx context.Context) NetworkInterfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceMapOutput)
}

func (i NetworkInterfaceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*NetworkInterface] {
	return pulumix.Output[map[string]*NetworkInterface]{
		OutputState: i.ToNetworkInterfaceMapOutputWithContext(ctx).OutputState,
	}
}

type NetworkInterfaceOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkInterface)(nil)).Elem()
}

func (o NetworkInterfaceOutput) ToNetworkInterfaceOutput() NetworkInterfaceOutput {
	return o
}

func (o NetworkInterfaceOutput) ToNetworkInterfaceOutputWithContext(ctx context.Context) NetworkInterfaceOutput {
	return o
}

func (o NetworkInterfaceOutput) ToOutput(ctx context.Context) pulumix.Output[*NetworkInterface] {
	return pulumix.Output[*NetworkInterface]{
		OutputState: o.OutputState,
	}
}

// Specifies whether to bring up this interface on boot.
func (o NetworkInterfaceOutput) Auto() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetworkInterface) pulumi.BoolOutput { return v.Auto }).(pulumi.BoolOutput)
}

// Name of the (physical or virtual) device. This name is what the device is known as in LuCI or the `name` field in
// Terraform. This is not the UCI config name.
func (o NetworkInterfaceOutput) Device() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInterface) pulumi.StringOutput { return v.Device }).(pulumi.StringOutput)
}

// Disables this interface.
func (o NetworkInterfaceOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetworkInterface) pulumi.BoolOutput { return v.Disabled }).(pulumi.BoolOutput)
}

// DNS servers
func (o NetworkInterfaceOutput) Dns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkInterface) pulumi.StringArrayOutput { return v.Dns }).(pulumi.StringArrayOutput)
}

// Gateway of the interface
func (o NetworkInterfaceOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInterface) pulumi.StringOutput { return v.Gateway }).(pulumi.StringOutput)
}

// Delegate a prefix of given length to this interface
func (o NetworkInterfaceOutput) Ip6assign() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkInterface) pulumi.IntOutput { return v.Ip6assign }).(pulumi.IntOutput)
}

// IP address of the interface
func (o NetworkInterfaceOutput) Ipaddr() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInterface) pulumi.StringOutput { return v.Ipaddr }).(pulumi.StringOutput)
}

// Override the MAC Address of this interface.
func (o NetworkInterfaceOutput) Macaddr() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInterface) pulumi.StringOutput { return v.Macaddr }).(pulumi.StringOutput)
}

// Override the default MTU on this interface.
func (o NetworkInterfaceOutput) Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkInterface) pulumi.IntOutput { return v.Mtu }).(pulumi.IntOutput)
}

// Netmask of the interface
func (o NetworkInterfaceOutput) Netmask() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInterface) pulumi.StringOutput { return v.Netmask }).(pulumi.StringOutput)
}

// Use DHCP-provided DNS servers.
func (o NetworkInterfaceOutput) Peerdns() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetworkInterface) pulumi.BoolOutput { return v.Peerdns }).(pulumi.BoolOutput)
}

// The protocol type of the interface. Currently, only "dhcp, and "static" are supported.
func (o NetworkInterfaceOutput) Proto() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInterface) pulumi.StringOutput { return v.Proto }).(pulumi.StringOutput)
}

// Behavior for requesting address. Can only be one of "force", "try", or "none".
func (o NetworkInterfaceOutput) Reqaddress() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInterface) pulumi.StringOutput { return v.Reqaddress }).(pulumi.StringOutput)
}

// Behavior for requesting prefixes. Currently, only "auto" is supported.
func (o NetworkInterfaceOutput) Reqprefix() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInterface) pulumi.StringOutput { return v.Reqprefix }).(pulumi.StringOutput)
}

type NetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkInterface)(nil)).Elem()
}

func (o NetworkInterfaceArrayOutput) ToNetworkInterfaceArrayOutput() NetworkInterfaceArrayOutput {
	return o
}

func (o NetworkInterfaceArrayOutput) ToNetworkInterfaceArrayOutputWithContext(ctx context.Context) NetworkInterfaceArrayOutput {
	return o
}

func (o NetworkInterfaceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*NetworkInterface] {
	return pulumix.Output[[]*NetworkInterface]{
		OutputState: o.OutputState,
	}
}

func (o NetworkInterfaceArrayOutput) Index(i pulumi.IntInput) NetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkInterface {
		return vs[0].([]*NetworkInterface)[vs[1].(int)]
	}).(NetworkInterfaceOutput)
}

type NetworkInterfaceMapOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkInterface)(nil)).Elem()
}

func (o NetworkInterfaceMapOutput) ToNetworkInterfaceMapOutput() NetworkInterfaceMapOutput {
	return o
}

func (o NetworkInterfaceMapOutput) ToNetworkInterfaceMapOutputWithContext(ctx context.Context) NetworkInterfaceMapOutput {
	return o
}

func (o NetworkInterfaceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*NetworkInterface] {
	return pulumix.Output[map[string]*NetworkInterface]{
		OutputState: o.OutputState,
	}
}

func (o NetworkInterfaceMapOutput) MapIndex(k pulumi.StringInput) NetworkInterfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkInterface {
		return vs[0].(map[string]*NetworkInterface)[vs[1].(string)]
	}).(NetworkInterfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfaceInput)(nil)).Elem(), &NetworkInterface{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfaceArrayInput)(nil)).Elem(), NetworkInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfaceMapInput)(nil)).Elem(), NetworkInterfaceMap{})
	pulumi.RegisterOutputType(NetworkInterfaceOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceMapOutput{})
}

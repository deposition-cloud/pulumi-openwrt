// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DhcpDhcpArgs, DhcpDhcpState } from "./dhcpDhcp";
export type DhcpDhcp = import("./dhcpDhcp").DhcpDhcp;
export const DhcpDhcp: typeof import("./dhcpDhcp").DhcpDhcp = null as any;
utilities.lazyLoad(exports, ["DhcpDhcp"], () => require("./dhcpDhcp"));

export { DhcpDnsmasqArgs, DhcpDnsmasqState } from "./dhcpDnsmasq";
export type DhcpDnsmasq = import("./dhcpDnsmasq").DhcpDnsmasq;
export const DhcpDnsmasq: typeof import("./dhcpDnsmasq").DhcpDnsmasq = null as any;
utilities.lazyLoad(exports, ["DhcpDnsmasq"], () => require("./dhcpDnsmasq"));

export { DhcpDomainArgs, DhcpDomainState } from "./dhcpDomain";
export type DhcpDomain = import("./dhcpDomain").DhcpDomain;
export const DhcpDomain: typeof import("./dhcpDomain").DhcpDomain = null as any;
utilities.lazyLoad(exports, ["DhcpDomain"], () => require("./dhcpDomain"));

export { DhcpHostArgs, DhcpHostState } from "./dhcpHost";
export type DhcpHost = import("./dhcpHost").DhcpHost;
export const DhcpHost: typeof import("./dhcpHost").DhcpHost = null as any;
utilities.lazyLoad(exports, ["DhcpHost"], () => require("./dhcpHost"));

export { DhcpOdhcpdArgs, DhcpOdhcpdState } from "./dhcpOdhcpd";
export type DhcpOdhcpd = import("./dhcpOdhcpd").DhcpOdhcpd;
export const DhcpOdhcpd: typeof import("./dhcpOdhcpd").DhcpOdhcpd = null as any;
utilities.lazyLoad(exports, ["DhcpOdhcpd"], () => require("./dhcpOdhcpd"));

export { GetDhcpDhcpArgs, GetDhcpDhcpResult, GetDhcpDhcpOutputArgs } from "./getDhcpDhcp";
export const getDhcpDhcp: typeof import("./getDhcpDhcp").getDhcpDhcp = null as any;
export const getDhcpDhcpOutput: typeof import("./getDhcpDhcp").getDhcpDhcpOutput = null as any;
utilities.lazyLoad(exports, ["getDhcpDhcp","getDhcpDhcpOutput"], () => require("./getDhcpDhcp"));

export { GetDhcpDnsmasqArgs, GetDhcpDnsmasqResult, GetDhcpDnsmasqOutputArgs } from "./getDhcpDnsmasq";
export const getDhcpDnsmasq: typeof import("./getDhcpDnsmasq").getDhcpDnsmasq = null as any;
export const getDhcpDnsmasqOutput: typeof import("./getDhcpDnsmasq").getDhcpDnsmasqOutput = null as any;
utilities.lazyLoad(exports, ["getDhcpDnsmasq","getDhcpDnsmasqOutput"], () => require("./getDhcpDnsmasq"));

export { GetDhcpDomainArgs, GetDhcpDomainResult, GetDhcpDomainOutputArgs } from "./getDhcpDomain";
export const getDhcpDomain: typeof import("./getDhcpDomain").getDhcpDomain = null as any;
export const getDhcpDomainOutput: typeof import("./getDhcpDomain").getDhcpDomainOutput = null as any;
utilities.lazyLoad(exports, ["getDhcpDomain","getDhcpDomainOutput"], () => require("./getDhcpDomain"));

export { GetDhcpHostArgs, GetDhcpHostResult, GetDhcpHostOutputArgs } from "./getDhcpHost";
export const getDhcpHost: typeof import("./getDhcpHost").getDhcpHost = null as any;
export const getDhcpHostOutput: typeof import("./getDhcpHost").getDhcpHostOutput = null as any;
utilities.lazyLoad(exports, ["getDhcpHost","getDhcpHostOutput"], () => require("./getDhcpHost"));

export { GetDhcpOdhcpdArgs, GetDhcpOdhcpdResult, GetDhcpOdhcpdOutputArgs } from "./getDhcpOdhcpd";
export const getDhcpOdhcpd: typeof import("./getDhcpOdhcpd").getDhcpOdhcpd = null as any;
export const getDhcpOdhcpdOutput: typeof import("./getDhcpOdhcpd").getDhcpOdhcpdOutput = null as any;
utilities.lazyLoad(exports, ["getDhcpOdhcpd","getDhcpOdhcpdOutput"], () => require("./getDhcpOdhcpd"));

export { GetNetworkDeviceArgs, GetNetworkDeviceResult, GetNetworkDeviceOutputArgs } from "./getNetworkDevice";
export const getNetworkDevice: typeof import("./getNetworkDevice").getNetworkDevice = null as any;
export const getNetworkDeviceOutput: typeof import("./getNetworkDevice").getNetworkDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkDevice","getNetworkDeviceOutput"], () => require("./getNetworkDevice"));

export { GetNetworkGlobalsArgs, GetNetworkGlobalsResult, GetNetworkGlobalsOutputArgs } from "./getNetworkGlobals";
export const getNetworkGlobals: typeof import("./getNetworkGlobals").getNetworkGlobals = null as any;
export const getNetworkGlobalsOutput: typeof import("./getNetworkGlobals").getNetworkGlobalsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkGlobals","getNetworkGlobalsOutput"], () => require("./getNetworkGlobals"));

export { GetNetworkInterfaceArgs, GetNetworkInterfaceResult, GetNetworkInterfaceOutputArgs } from "./getNetworkInterface";
export const getNetworkInterface: typeof import("./getNetworkInterface").getNetworkInterface = null as any;
export const getNetworkInterfaceOutput: typeof import("./getNetworkInterface").getNetworkInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkInterface","getNetworkInterfaceOutput"], () => require("./getNetworkInterface"));

export { GetNetworkSwitchArgs, GetNetworkSwitchResult, GetNetworkSwitchOutputArgs } from "./getNetworkSwitch";
export const getNetworkSwitch: typeof import("./getNetworkSwitch").getNetworkSwitch = null as any;
export const getNetworkSwitchOutput: typeof import("./getNetworkSwitch").getNetworkSwitchOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkSwitch","getNetworkSwitchOutput"], () => require("./getNetworkSwitch"));

export { GetNetworkSwitchVlanArgs, GetNetworkSwitchVlanResult, GetNetworkSwitchVlanOutputArgs } from "./getNetworkSwitchVlan";
export const getNetworkSwitchVlan: typeof import("./getNetworkSwitchVlan").getNetworkSwitchVlan = null as any;
export const getNetworkSwitchVlanOutput: typeof import("./getNetworkSwitchVlan").getNetworkSwitchVlanOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkSwitchVlan","getNetworkSwitchVlanOutput"], () => require("./getNetworkSwitchVlan"));

export { GetSystemSystemArgs, GetSystemSystemResult, GetSystemSystemOutputArgs } from "./getSystemSystem";
export const getSystemSystem: typeof import("./getSystemSystem").getSystemSystem = null as any;
export const getSystemSystemOutput: typeof import("./getSystemSystem").getSystemSystemOutput = null as any;
utilities.lazyLoad(exports, ["getSystemSystem","getSystemSystemOutput"], () => require("./getSystemSystem"));

export { GetWirelessWifiDeviceArgs, GetWirelessWifiDeviceResult, GetWirelessWifiDeviceOutputArgs } from "./getWirelessWifiDevice";
export const getWirelessWifiDevice: typeof import("./getWirelessWifiDevice").getWirelessWifiDevice = null as any;
export const getWirelessWifiDeviceOutput: typeof import("./getWirelessWifiDevice").getWirelessWifiDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessWifiDevice","getWirelessWifiDeviceOutput"], () => require("./getWirelessWifiDevice"));

export { GetWirelessWifiIfaceArgs, GetWirelessWifiIfaceResult, GetWirelessWifiIfaceOutputArgs } from "./getWirelessWifiIface";
export const getWirelessWifiIface: typeof import("./getWirelessWifiIface").getWirelessWifiIface = null as any;
export const getWirelessWifiIfaceOutput: typeof import("./getWirelessWifiIface").getWirelessWifiIfaceOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessWifiIface","getWirelessWifiIfaceOutput"], () => require("./getWirelessWifiIface"));

export { NetworkDeviceArgs, NetworkDeviceState } from "./networkDevice";
export type NetworkDevice = import("./networkDevice").NetworkDevice;
export const NetworkDevice: typeof import("./networkDevice").NetworkDevice = null as any;
utilities.lazyLoad(exports, ["NetworkDevice"], () => require("./networkDevice"));

export { NetworkGlobalsArgs, NetworkGlobalsState } from "./networkGlobals";
export type NetworkGlobals = import("./networkGlobals").NetworkGlobals;
export const NetworkGlobals: typeof import("./networkGlobals").NetworkGlobals = null as any;
utilities.lazyLoad(exports, ["NetworkGlobals"], () => require("./networkGlobals"));

export { NetworkInterfaceArgs, NetworkInterfaceState } from "./networkInterface";
export type NetworkInterface = import("./networkInterface").NetworkInterface;
export const NetworkInterface: typeof import("./networkInterface").NetworkInterface = null as any;
utilities.lazyLoad(exports, ["NetworkInterface"], () => require("./networkInterface"));

export { NetworkSwitchArgs, NetworkSwitchState } from "./networkSwitch";
export type NetworkSwitch = import("./networkSwitch").NetworkSwitch;
export const NetworkSwitch: typeof import("./networkSwitch").NetworkSwitch = null as any;
utilities.lazyLoad(exports, ["NetworkSwitch"], () => require("./networkSwitch"));

export { NetworkSwitchVlanArgs, NetworkSwitchVlanState } from "./networkSwitchVlan";
export type NetworkSwitchVlan = import("./networkSwitchVlan").NetworkSwitchVlan;
export const NetworkSwitchVlan: typeof import("./networkSwitchVlan").NetworkSwitchVlan = null as any;
utilities.lazyLoad(exports, ["NetworkSwitchVlan"], () => require("./networkSwitchVlan"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SystemSystemArgs, SystemSystemState } from "./systemSystem";
export type SystemSystem = import("./systemSystem").SystemSystem;
export const SystemSystem: typeof import("./systemSystem").SystemSystem = null as any;
utilities.lazyLoad(exports, ["SystemSystem"], () => require("./systemSystem"));

export { WirelessWifiDeviceArgs, WirelessWifiDeviceState } from "./wirelessWifiDevice";
export type WirelessWifiDevice = import("./wirelessWifiDevice").WirelessWifiDevice;
export const WirelessWifiDevice: typeof import("./wirelessWifiDevice").WirelessWifiDevice = null as any;
utilities.lazyLoad(exports, ["WirelessWifiDevice"], () => require("./wirelessWifiDevice"));

export { WirelessWifiIfaceArgs, WirelessWifiIfaceState } from "./wirelessWifiIface";
export type WirelessWifiIface = import("./wirelessWifiIface").WirelessWifiIface;
export const WirelessWifiIface: typeof import("./wirelessWifiIface").WirelessWifiIface = null as any;
utilities.lazyLoad(exports, ["WirelessWifiIface"], () => require("./wirelessWifiIface"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "openwrt:index/dhcpDhcp:DhcpDhcp":
                return new DhcpDhcp(name, <any>undefined, { urn })
            case "openwrt:index/dhcpDnsmasq:DhcpDnsmasq":
                return new DhcpDnsmasq(name, <any>undefined, { urn })
            case "openwrt:index/dhcpDomain:DhcpDomain":
                return new DhcpDomain(name, <any>undefined, { urn })
            case "openwrt:index/dhcpHost:DhcpHost":
                return new DhcpHost(name, <any>undefined, { urn })
            case "openwrt:index/dhcpOdhcpd:DhcpOdhcpd":
                return new DhcpOdhcpd(name, <any>undefined, { urn })
            case "openwrt:index/networkDevice:NetworkDevice":
                return new NetworkDevice(name, <any>undefined, { urn })
            case "openwrt:index/networkGlobals:NetworkGlobals":
                return new NetworkGlobals(name, <any>undefined, { urn })
            case "openwrt:index/networkInterface:NetworkInterface":
                return new NetworkInterface(name, <any>undefined, { urn })
            case "openwrt:index/networkSwitch:NetworkSwitch":
                return new NetworkSwitch(name, <any>undefined, { urn })
            case "openwrt:index/networkSwitchVlan:NetworkSwitchVlan":
                return new NetworkSwitchVlan(name, <any>undefined, { urn })
            case "openwrt:index/systemSystem:SystemSystem":
                return new SystemSystem(name, <any>undefined, { urn })
            case "openwrt:index/wirelessWifiDevice:WirelessWifiDevice":
                return new WirelessWifiDevice(name, <any>undefined, { urn })
            case "openwrt:index/wirelessWifiIface:WirelessWifiIface":
                return new WirelessWifiIface(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("openwrt", "index/dhcpDhcp", _module)
pulumi.runtime.registerResourceModule("openwrt", "index/dhcpDnsmasq", _module)
pulumi.runtime.registerResourceModule("openwrt", "index/dhcpDomain", _module)
pulumi.runtime.registerResourceModule("openwrt", "index/dhcpHost", _module)
pulumi.runtime.registerResourceModule("openwrt", "index/dhcpOdhcpd", _module)
pulumi.runtime.registerResourceModule("openwrt", "index/networkDevice", _module)
pulumi.runtime.registerResourceModule("openwrt", "index/networkGlobals", _module)
pulumi.runtime.registerResourceModule("openwrt", "index/networkInterface", _module)
pulumi.runtime.registerResourceModule("openwrt", "index/networkSwitch", _module)
pulumi.runtime.registerResourceModule("openwrt", "index/networkSwitchVlan", _module)
pulumi.runtime.registerResourceModule("openwrt", "index/systemSystem", _module)
pulumi.runtime.registerResourceModule("openwrt", "index/wirelessWifiDevice", _module)
pulumi.runtime.registerResourceModule("openwrt", "index/wirelessWifiIface", _module)
pulumi.runtime.registerResourcePackage("openwrt", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:openwrt") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});

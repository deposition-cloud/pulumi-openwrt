// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * A physical or virtual "device" in OpenWrt jargon. Commonly referred to as an "interface" in other networking jargon.
 *
 * ## Import
 *
 * Find the Terraform id and UCI name from LuCI's JSON-RPC API. One way to find this information is with `curl` and `jq`# curl \
 *
 *  --data '{"id"0, "method""foreach", "params"["network", "device"]}' \
 *
 *  http://192.168.1.1/cgi-bin/luci/rpc/uci?auth=$AUTH_TOKEN \
 *
 *  | jq '.result | map({terraformId.[".name"], uciName.name})' # This command will output something like# [
 *
 *  {
 *
 *  "terraformId""cfg030f15",
 *
 *  "uciName""foo"
 *
 *  },
 *
 *  {
 *
 *  "terraformId""cfg040f15",
 *
 *  "uciName""bar"
 *
 *  } ] # We'd then use the information to import the appropriate resource
 *
 * ```sh
 *  $ pulumi import openwrt:index/networkDevice:NetworkDevice foo cfg030f15
 * ```
 */
export class NetworkDevice extends pulumi.CustomResource {
    /**
     * Get an existing NetworkDevice resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkDeviceState, opts?: pulumi.CustomResourceOptions): NetworkDevice {
        return new NetworkDevice(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openwrt:index/networkDevice:NetworkDevice';

    /**
     * Returns true if the given object is an instance of NetworkDevice.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkDevice {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkDevice.__pulumiType;
    }

    /**
     * Bring up the bridge device even if no ports are attached
     */
    public readonly bridgeEmpty!: pulumi.Output<boolean>;
    /**
     * Amount of Duplicate Address Detection probes to send
     */
    public readonly dadtransmits!: pulumi.Output<number>;
    /**
     * Enable IPv6 for the device.
     */
    public readonly ipv6!: pulumi.Output<boolean>;
    /**
     * MAC Address of the device.
     */
    public readonly macaddr!: pulumi.Output<string>;
    /**
     * Maximum Transmissible Unit.
     */
    public readonly mtu!: pulumi.Output<number>;
    /**
     * Maximum Transmissible Unit for IPv6.
     */
    public readonly mtu6!: pulumi.Output<number>;
    /**
     * Name of the device. This name is referenced in other network configuration.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the wired ports to attach to this bridge.
     */
    public readonly ports!: pulumi.Output<string[]>;
    /**
     * Transmission queue length.
     */
    public readonly txqueuelen!: pulumi.Output<number>;
    /**
     * The type of device. Currently, only "bridge" is supported.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a NetworkDevice resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkDeviceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkDeviceArgs | NetworkDeviceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkDeviceState | undefined;
            resourceInputs["bridgeEmpty"] = state ? state.bridgeEmpty : undefined;
            resourceInputs["dadtransmits"] = state ? state.dadtransmits : undefined;
            resourceInputs["ipv6"] = state ? state.ipv6 : undefined;
            resourceInputs["macaddr"] = state ? state.macaddr : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["mtu6"] = state ? state.mtu6 : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ports"] = state ? state.ports : undefined;
            resourceInputs["txqueuelen"] = state ? state.txqueuelen : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as NetworkDeviceArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["bridgeEmpty"] = args ? args.bridgeEmpty : undefined;
            resourceInputs["dadtransmits"] = args ? args.dadtransmits : undefined;
            resourceInputs["ipv6"] = args ? args.ipv6 : undefined;
            resourceInputs["macaddr"] = args ? args.macaddr : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["mtu6"] = args ? args.mtu6 : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ports"] = args ? args.ports : undefined;
            resourceInputs["txqueuelen"] = args ? args.txqueuelen : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkDevice.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkDevice resources.
 */
export interface NetworkDeviceState {
    /**
     * Bring up the bridge device even if no ports are attached
     */
    bridgeEmpty?: pulumi.Input<boolean>;
    /**
     * Amount of Duplicate Address Detection probes to send
     */
    dadtransmits?: pulumi.Input<number>;
    /**
     * Enable IPv6 for the device.
     */
    ipv6?: pulumi.Input<boolean>;
    /**
     * MAC Address of the device.
     */
    macaddr?: pulumi.Input<string>;
    /**
     * Maximum Transmissible Unit.
     */
    mtu?: pulumi.Input<number>;
    /**
     * Maximum Transmissible Unit for IPv6.
     */
    mtu6?: pulumi.Input<number>;
    /**
     * Name of the device. This name is referenced in other network configuration.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the wired ports to attach to this bridge.
     */
    ports?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Transmission queue length.
     */
    txqueuelen?: pulumi.Input<number>;
    /**
     * The type of device. Currently, only "bridge" is supported.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkDevice resource.
 */
export interface NetworkDeviceArgs {
    /**
     * Bring up the bridge device even if no ports are attached
     */
    bridgeEmpty?: pulumi.Input<boolean>;
    /**
     * Amount of Duplicate Address Detection probes to send
     */
    dadtransmits?: pulumi.Input<number>;
    /**
     * Enable IPv6 for the device.
     */
    ipv6?: pulumi.Input<boolean>;
    /**
     * MAC Address of the device.
     */
    macaddr?: pulumi.Input<string>;
    /**
     * Maximum Transmissible Unit.
     */
    mtu?: pulumi.Input<number>;
    /**
     * Maximum Transmissible Unit for IPv6.
     */
    mtu6?: pulumi.Input<number>;
    /**
     * Name of the device. This name is referenced in other network configuration.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the wired ports to attach to this bridge.
     */
    ports?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Transmission queue length.
     */
    txqueuelen?: pulumi.Input<number>;
    /**
     * The type of device. Currently, only "bridge" is supported.
     */
    type: pulumi.Input<string>;
}

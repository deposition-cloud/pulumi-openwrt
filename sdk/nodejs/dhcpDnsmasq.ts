// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * A lightweight DHCP and caching DNS server.
 *
 * ## Import
 *
 * Find the Terraform id from LuCI's JSON-RPC API. One way to find this information is with `curl` and `jq`# curl \
 *
 *  --data '{"id"0, "method""foreach", "params"["dhcp", "dnsmasq"]}' \
 *
 *  http://192.168.1.1/cgi-bin/luci/rpc/uci?auth=$AUTH_TOKEN \
 *
 *  | jq '.result | map({terraformId.[".name"]})' # This command will output something like# [
 *
 *  {
 *
 *  "terraformId""cfg123456",
 *
 *  } ] # We'd then use the information to import the appropriate resource
 *
 * ```sh
 *  $ pulumi import openwrt:index/dhcpDnsmasq:DhcpDnsmasq this cfg123456
 * ```
 */
export class DhcpDnsmasq extends pulumi.CustomResource {
    /**
     * Get an existing DhcpDnsmasq resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DhcpDnsmasqState, opts?: pulumi.CustomResourceOptions): DhcpDnsmasq {
        return new DhcpDnsmasq(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openwrt:index/dhcpDnsmasq:DhcpDnsmasq';

    /**
     * Returns true if the given object is an instance of DhcpDnsmasq.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DhcpDnsmasq {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DhcpDnsmasq.__pulumiType;
    }

    /**
     * Force dnsmasq into authoritative mode. This speeds up DHCP leasing. Used if this is the only server on the network.
     */
    public readonly authoritative!: pulumi.Output<boolean>;
    /**
     * DNS domain handed out to DHCP clients.
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * Never forward queries for plain names, without dots or domain parts, to upstream nameservers.
     */
    public readonly domainneeded!: pulumi.Output<boolean>;
    /**
     * Specify the largest EDNS.0 UDP packet which is supported by the DNS forwarder.
     */
    public readonly ednspacketMax!: pulumi.Output<number>;
    /**
     * Never forward queries for plain names, without dots or domain parts, to upstream nameservers.
     */
    public readonly expandhosts!: pulumi.Output<boolean>;
    /**
     * Store DHCP leases in this file.
     */
    public readonly leasefile!: pulumi.Output<string>;
    /**
     * Look up DNS entries for this domain from `/etc/hosts`.
     */
    public readonly local!: pulumi.Output<string>;
    /**
     * Choose IP address to match the incoming interface if multiple addresses are assigned to a host name in `/etc/hosts`.
     */
    public readonly localiseQueries!: pulumi.Output<boolean>;
    /**
     * Accept DNS queries only from hosts whose address is on a local subnet.
     */
    public readonly localservice!: pulumi.Output<boolean>;
    /**
     * Read static lease entries from `/etc/ethers`, re-read on SIGHUP.
     */
    public readonly readethers!: pulumi.Output<boolean>;
    /**
     * Allows upstream 127.0.0.0/8 responses, required for DNS based blocklist services. Only takes effect if rebind protection is enabled.
     */
    public readonly rebindLocalhost!: pulumi.Output<boolean>;
    /**
     * Enables DNS rebind attack protection by discarding upstream RFC1918 responses.
     */
    public readonly rebindProtection!: pulumi.Output<boolean>;
    /**
     * Specifies an alternative resolv file.
     */
    public readonly resolvfile!: pulumi.Output<string>;

    /**
     * Create a DhcpDnsmasq resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DhcpDnsmasqArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DhcpDnsmasqArgs | DhcpDnsmasqState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DhcpDnsmasqState | undefined;
            resourceInputs["authoritative"] = state ? state.authoritative : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["domainneeded"] = state ? state.domainneeded : undefined;
            resourceInputs["ednspacketMax"] = state ? state.ednspacketMax : undefined;
            resourceInputs["expandhosts"] = state ? state.expandhosts : undefined;
            resourceInputs["leasefile"] = state ? state.leasefile : undefined;
            resourceInputs["local"] = state ? state.local : undefined;
            resourceInputs["localiseQueries"] = state ? state.localiseQueries : undefined;
            resourceInputs["localservice"] = state ? state.localservice : undefined;
            resourceInputs["readethers"] = state ? state.readethers : undefined;
            resourceInputs["rebindLocalhost"] = state ? state.rebindLocalhost : undefined;
            resourceInputs["rebindProtection"] = state ? state.rebindProtection : undefined;
            resourceInputs["resolvfile"] = state ? state.resolvfile : undefined;
        } else {
            const args = argsOrState as DhcpDnsmasqArgs | undefined;
            resourceInputs["authoritative"] = args ? args.authoritative : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["domainneeded"] = args ? args.domainneeded : undefined;
            resourceInputs["ednspacketMax"] = args ? args.ednspacketMax : undefined;
            resourceInputs["expandhosts"] = args ? args.expandhosts : undefined;
            resourceInputs["leasefile"] = args ? args.leasefile : undefined;
            resourceInputs["local"] = args ? args.local : undefined;
            resourceInputs["localiseQueries"] = args ? args.localiseQueries : undefined;
            resourceInputs["localservice"] = args ? args.localservice : undefined;
            resourceInputs["readethers"] = args ? args.readethers : undefined;
            resourceInputs["rebindLocalhost"] = args ? args.rebindLocalhost : undefined;
            resourceInputs["rebindProtection"] = args ? args.rebindProtection : undefined;
            resourceInputs["resolvfile"] = args ? args.resolvfile : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DhcpDnsmasq.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DhcpDnsmasq resources.
 */
export interface DhcpDnsmasqState {
    /**
     * Force dnsmasq into authoritative mode. This speeds up DHCP leasing. Used if this is the only server on the network.
     */
    authoritative?: pulumi.Input<boolean>;
    /**
     * DNS domain handed out to DHCP clients.
     */
    domain?: pulumi.Input<string>;
    /**
     * Never forward queries for plain names, without dots or domain parts, to upstream nameservers.
     */
    domainneeded?: pulumi.Input<boolean>;
    /**
     * Specify the largest EDNS.0 UDP packet which is supported by the DNS forwarder.
     */
    ednspacketMax?: pulumi.Input<number>;
    /**
     * Never forward queries for plain names, without dots or domain parts, to upstream nameservers.
     */
    expandhosts?: pulumi.Input<boolean>;
    /**
     * Store DHCP leases in this file.
     */
    leasefile?: pulumi.Input<string>;
    /**
     * Look up DNS entries for this domain from `/etc/hosts`.
     */
    local?: pulumi.Input<string>;
    /**
     * Choose IP address to match the incoming interface if multiple addresses are assigned to a host name in `/etc/hosts`.
     */
    localiseQueries?: pulumi.Input<boolean>;
    /**
     * Accept DNS queries only from hosts whose address is on a local subnet.
     */
    localservice?: pulumi.Input<boolean>;
    /**
     * Read static lease entries from `/etc/ethers`, re-read on SIGHUP.
     */
    readethers?: pulumi.Input<boolean>;
    /**
     * Allows upstream 127.0.0.0/8 responses, required for DNS based blocklist services. Only takes effect if rebind protection is enabled.
     */
    rebindLocalhost?: pulumi.Input<boolean>;
    /**
     * Enables DNS rebind attack protection by discarding upstream RFC1918 responses.
     */
    rebindProtection?: pulumi.Input<boolean>;
    /**
     * Specifies an alternative resolv file.
     */
    resolvfile?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DhcpDnsmasq resource.
 */
export interface DhcpDnsmasqArgs {
    /**
     * Force dnsmasq into authoritative mode. This speeds up DHCP leasing. Used if this is the only server on the network.
     */
    authoritative?: pulumi.Input<boolean>;
    /**
     * DNS domain handed out to DHCP clients.
     */
    domain?: pulumi.Input<string>;
    /**
     * Never forward queries for plain names, without dots or domain parts, to upstream nameservers.
     */
    domainneeded?: pulumi.Input<boolean>;
    /**
     * Specify the largest EDNS.0 UDP packet which is supported by the DNS forwarder.
     */
    ednspacketMax?: pulumi.Input<number>;
    /**
     * Never forward queries for plain names, without dots or domain parts, to upstream nameservers.
     */
    expandhosts?: pulumi.Input<boolean>;
    /**
     * Store DHCP leases in this file.
     */
    leasefile?: pulumi.Input<string>;
    /**
     * Look up DNS entries for this domain from `/etc/hosts`.
     */
    local?: pulumi.Input<string>;
    /**
     * Choose IP address to match the incoming interface if multiple addresses are assigned to a host name in `/etc/hosts`.
     */
    localiseQueries?: pulumi.Input<boolean>;
    /**
     * Accept DNS queries only from hosts whose address is on a local subnet.
     */
    localservice?: pulumi.Input<boolean>;
    /**
     * Read static lease entries from `/etc/ethers`, re-read on SIGHUP.
     */
    readethers?: pulumi.Input<boolean>;
    /**
     * Allows upstream 127.0.0.0/8 responses, required for DNS based blocklist services. Only takes effect if rebind protection is enabled.
     */
    rebindLocalhost?: pulumi.Input<boolean>;
    /**
     * Enables DNS rebind attack protection by discarding upstream RFC1918 responses.
     */
    rebindProtection?: pulumi.Input<boolean>;
    /**
     * Specifies an alternative resolv file.
     */
    resolvfile?: pulumi.Input<string>;
}

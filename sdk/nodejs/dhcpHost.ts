// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Assign a fixed IP address to hosts.
 *
 * ## Import
 *
 * Find the Terraform id from LuCI's JSON-RPC API. One way to find this information is with `curl` and `jq`# curl \
 *
 *  --data '{"id"0, "method""foreach", "params"["dhcp", "host"]}' \
 *
 *  http://192.168.1.1/cgi-bin/luci/rpc/uci?auth=$AUTH_TOKEN \
 *
 *  | jq '.result | map({terraformId.[".name"]})' # This command will output something like# [
 *
 *  {
 *
 *  "terraformId""cfg123456",
 *
 *  } ] # We'd then use the information to import the appropriate resource
 *
 * ```sh
 *  $ pulumi import openwrt:index/dhcpHost:DhcpHost this cfg123456
 * ```
 */
export class DhcpHost extends pulumi.CustomResource {
    /**
     * Get an existing DhcpHost resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DhcpHostState, opts?: pulumi.CustomResourceOptions): DhcpHost {
        return new DhcpHost(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openwrt:index/dhcpHost:DhcpHost';

    /**
     * Returns true if the given object is an instance of DhcpHost.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DhcpHost {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DhcpHost.__pulumiType;
    }

    /**
     * Add static forward and reverse DNS entries for this host.
     */
    public readonly dns!: pulumi.Output<boolean>;
    /**
     * The IP address to be used for this host, or `ignore` to ignore any DHCP request from this host.
     */
    public readonly ip!: pulumi.Output<string>;
    /**
     * The hardware address(es) of this host, separated by spaces.
     */
    public readonly mac!: pulumi.Output<string>;
    /**
     * Hostname to assign.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a DhcpHost resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DhcpHostArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DhcpHostArgs | DhcpHostState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DhcpHostState | undefined;
            resourceInputs["dns"] = state ? state.dns : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["mac"] = state ? state.mac : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as DhcpHostArgs | undefined;
            resourceInputs["dns"] = args ? args.dns : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["mac"] = args ? args.mac : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DhcpHost.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DhcpHost resources.
 */
export interface DhcpHostState {
    /**
     * Add static forward and reverse DNS entries for this host.
     */
    dns?: pulumi.Input<boolean>;
    /**
     * The IP address to be used for this host, or `ignore` to ignore any DHCP request from this host.
     */
    ip?: pulumi.Input<string>;
    /**
     * The hardware address(es) of this host, separated by spaces.
     */
    mac?: pulumi.Input<string>;
    /**
     * Hostname to assign.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DhcpHost resource.
 */
export interface DhcpHostArgs {
    /**
     * Add static forward and reverse DNS entries for this host.
     */
    dns?: pulumi.Input<boolean>;
    /**
     * The IP address to be used for this host, or `ignore` to ignore any DHCP request from this host.
     */
    ip?: pulumi.Input<string>;
    /**
     * The hardware address(es) of this host, separated by spaces.
     */
    mac?: pulumi.Input<string>;
    /**
     * Hostname to assign.
     */
    name?: pulumi.Input<string>;
}

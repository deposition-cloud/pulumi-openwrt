// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Legacy VLAN configuration
 *
 * ## Import
 *
 * Find the Terraform id from LuCI's JSON-RPC API. One way to find this information is with `curl` and `jq`# curl \
 *
 *  --data '{"id"0, "method""foreach", "params"["network", "switch_vlan"]}' \
 *
 *  http://192.168.1.1/cgi-bin/luci/rpc/uci?auth=$AUTH_TOKEN \
 *
 *  | jq '.result | map({terraformId.[".name"]})' # This command will output something like# [
 *
 *  {
 *
 *  "terraformId""cfg123456",
 *
 *  },
 *
 *  {
 *
 *  "terraformId""cfg123457",
 *
 *  } ] # We'd then use the information to import the appropriate resource
 *
 * ```sh
 *  $ pulumi import openwrt:index/networkSwitchVlan:NetworkSwitchVlan administration cfg123456
 * ```
 */
export class NetworkSwitchVlan extends pulumi.CustomResource {
    /**
     * Get an existing NetworkSwitchVlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkSwitchVlanState, opts?: pulumi.CustomResourceOptions): NetworkSwitchVlan {
        return new NetworkSwitchVlan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openwrt:index/networkSwitchVlan:NetworkSwitchVlan';

    /**
     * Returns true if the given object is an instance of NetworkSwitchVlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkSwitchVlan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkSwitchVlan.__pulumiType;
    }

    /**
     * A human-readable description of the VLAN configuration.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The switch to configure.
     */
    public readonly device!: pulumi.Output<string>;
    /**
     * A string of space-separated port indicies that should be associated with the VLAN. Adding the suffix `"t"` to a port indicates that egress packets should be tagged, for example `"0 1 3t 5t"`.
     */
    public readonly ports!: pulumi.Output<string>;
    /**
     * The VLAN tag number to use.
     */
    public readonly vid!: pulumi.Output<number>;
    /**
     * The VLAN "table index" to configure. This index corresponds to the order on LuCI's UI
     */
    public readonly vlan!: pulumi.Output<number>;

    /**
     * Create a NetworkSwitchVlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkSwitchVlanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkSwitchVlanArgs | NetworkSwitchVlanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkSwitchVlanState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["ports"] = state ? state.ports : undefined;
            resourceInputs["vid"] = state ? state.vid : undefined;
            resourceInputs["vlan"] = state ? state.vlan : undefined;
        } else {
            const args = argsOrState as NetworkSwitchVlanArgs | undefined;
            if ((!args || args.device === undefined) && !opts.urn) {
                throw new Error("Missing required property 'device'");
            }
            if ((!args || args.ports === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ports'");
            }
            if ((!args || args.vlan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vlan'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["ports"] = args ? args.ports : undefined;
            resourceInputs["vid"] = args ? args.vid : undefined;
            resourceInputs["vlan"] = args ? args.vlan : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkSwitchVlan.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkSwitchVlan resources.
 */
export interface NetworkSwitchVlanState {
    /**
     * A human-readable description of the VLAN configuration.
     */
    description?: pulumi.Input<string>;
    /**
     * The switch to configure.
     */
    device?: pulumi.Input<string>;
    /**
     * A string of space-separated port indicies that should be associated with the VLAN. Adding the suffix `"t"` to a port indicates that egress packets should be tagged, for example `"0 1 3t 5t"`.
     */
    ports?: pulumi.Input<string>;
    /**
     * The VLAN tag number to use.
     */
    vid?: pulumi.Input<number>;
    /**
     * The VLAN "table index" to configure. This index corresponds to the order on LuCI's UI
     */
    vlan?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a NetworkSwitchVlan resource.
 */
export interface NetworkSwitchVlanArgs {
    /**
     * A human-readable description of the VLAN configuration.
     */
    description?: pulumi.Input<string>;
    /**
     * The switch to configure.
     */
    device: pulumi.Input<string>;
    /**
     * A string of space-separated port indicies that should be associated with the VLAN. Adding the suffix `"t"` to a port indicates that egress packets should be tagged, for example `"0 1 3t 5t"`.
     */
    ports: pulumi.Input<string>;
    /**
     * The VLAN tag number to use.
     */
    vid?: pulumi.Input<number>;
    /**
     * The VLAN "table index" to configure. This index corresponds to the order on LuCI's UI
     */
    vlan: pulumi.Input<number>;
}

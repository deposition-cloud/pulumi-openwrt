// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The physical radio device.
 *
 * ## Import
 *
 * Find the Terraform id from LuCI's JSON-RPC API. One way to find this information is with `curl` and `jq`# curl \
 *
 *  --data '{"id"0, "method""foreach", "params"["wireless", "wifi-device"]}' \
 *
 *  http://192.168.1.1/cgi-bin/luci/rpc/uci?auth=$AUTH_TOKEN \
 *
 *  | jq '.result | map({terraformId.[".name"]})' # This command will output something like# [
 *
 *  {
 *
 *  "terraformId""cfg123456",
 *
 *  },
 *
 *  {
 *
 *  "terraformId""cfg123457",
 *
 *  } ] # We'd then use the information to import the appropriate resource
 *
 * ```sh
 *  $ pulumi import openwrt:index/wirelessWifiDevice:WirelessWifiDevice five_ghz cfg123456
 * ```
 */
export class WirelessWifiDevice extends pulumi.CustomResource {
    /**
     * Get an existing WirelessWifiDevice resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WirelessWifiDeviceState, opts?: pulumi.CustomResourceOptions): WirelessWifiDevice {
        return new WirelessWifiDevice(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openwrt:index/wirelessWifiDevice:WirelessWifiDevice';

    /**
     * Returns true if the given object is an instance of WirelessWifiDevice.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WirelessWifiDevice {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WirelessWifiDevice.__pulumiType;
    }

    /**
     * Channel width. Must be one of: "2g", "5g", "6g".
     */
    public readonly band!: pulumi.Output<string>;
    /**
     * Configures data rates based on the coverage cell density. Must be one of 0, 1, 2, 3.
     */
    public readonly cellDensity!: pulumi.Output<number>;
    /**
     * The wireless channel. Currently, only "auto" is supported.
     */
    public readonly channel!: pulumi.Output<string>;
    /**
     * Two-digit country code. E.g. "US".
     */
    public readonly country!: pulumi.Output<string>;
    /**
     * Channel width. Must be one of: "HE20", "HE40", "HE80", "HE160", "HT20", "HT40", "HT40-", "HT40+", "NONE", "VHT20", "VHT40", "VHT80", "VHT160".
     */
    public readonly htmode!: pulumi.Output<string>;
    /**
     * Path of the device in `/sys/devices`.
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * The type of device. Currently only "mac80211" is supported.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a WirelessWifiDevice resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WirelessWifiDeviceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WirelessWifiDeviceArgs | WirelessWifiDeviceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WirelessWifiDeviceState | undefined;
            resourceInputs["band"] = state ? state.band : undefined;
            resourceInputs["cellDensity"] = state ? state.cellDensity : undefined;
            resourceInputs["channel"] = state ? state.channel : undefined;
            resourceInputs["country"] = state ? state.country : undefined;
            resourceInputs["htmode"] = state ? state.htmode : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as WirelessWifiDeviceArgs | undefined;
            if ((!args || args.channel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'channel'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["band"] = args ? args.band : undefined;
            resourceInputs["cellDensity"] = args ? args.cellDensity : undefined;
            resourceInputs["channel"] = args ? args.channel : undefined;
            resourceInputs["country"] = args ? args.country : undefined;
            resourceInputs["htmode"] = args ? args.htmode : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WirelessWifiDevice.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WirelessWifiDevice resources.
 */
export interface WirelessWifiDeviceState {
    /**
     * Channel width. Must be one of: "2g", "5g", "6g".
     */
    band?: pulumi.Input<string>;
    /**
     * Configures data rates based on the coverage cell density. Must be one of 0, 1, 2, 3.
     */
    cellDensity?: pulumi.Input<number>;
    /**
     * The wireless channel. Currently, only "auto" is supported.
     */
    channel?: pulumi.Input<string>;
    /**
     * Two-digit country code. E.g. "US".
     */
    country?: pulumi.Input<string>;
    /**
     * Channel width. Must be one of: "HE20", "HE40", "HE80", "HE160", "HT20", "HT40", "HT40-", "HT40+", "NONE", "VHT20", "VHT40", "VHT80", "VHT160".
     */
    htmode?: pulumi.Input<string>;
    /**
     * Path of the device in `/sys/devices`.
     */
    path?: pulumi.Input<string>;
    /**
     * The type of device. Currently only "mac80211" is supported.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WirelessWifiDevice resource.
 */
export interface WirelessWifiDeviceArgs {
    /**
     * Channel width. Must be one of: "2g", "5g", "6g".
     */
    band?: pulumi.Input<string>;
    /**
     * Configures data rates based on the coverage cell density. Must be one of 0, 1, 2, 3.
     */
    cellDensity?: pulumi.Input<number>;
    /**
     * The wireless channel. Currently, only "auto" is supported.
     */
    channel: pulumi.Input<string>;
    /**
     * Two-digit country code. E.g. "US".
     */
    country?: pulumi.Input<string>;
    /**
     * Channel width. Must be one of: "HE20", "HE40", "HE80", "HE160", "HT20", "HT40", "HT40-", "HT40+", "NONE", "VHT20", "VHT40", "VHT80", "VHT160".
     */
    htmode?: pulumi.Input<string>;
    /**
     * Path of the device in `/sys/devices`.
     */
    path?: pulumi.Input<string>;
    /**
     * The type of device. Currently only "mac80211" is supported.
     */
    type: pulumi.Input<string>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * A logic network.
 *
 * ## Import
 *
 * Find the Terraform id is the same as the UCI name from LuCI's JSON-RPC API. It is also generally the lower-cased version of the interface name in LuCI's web UI. One way to find this information is with `curl` and `jq`# curl \
 *
 *  --data '{"id"0, "method""foreach", "params"["network", "interface"]}' \
 *
 *  http://192.168.1.1/cgi-bin/luci/rpc/uci?auth=$AUTH_TOKEN \
 *
 *  | jq '.result | map(.[".name"])' # This command will output something like# [
 *
 *  "loopback",
 *
 *  "wan",
 *
 *  "wan6" ] # We'd then use the information to import the appropriate resource
 *
 * ```sh
 *  $ pulumi import openwrt:index/networkInterface:NetworkInterface loopback loopback
 * ```
 */
export class NetworkInterface extends pulumi.CustomResource {
    /**
     * Get an existing NetworkInterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkInterfaceState, opts?: pulumi.CustomResourceOptions): NetworkInterface {
        return new NetworkInterface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openwrt:index/networkInterface:NetworkInterface';

    /**
     * Returns true if the given object is an instance of NetworkInterface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkInterface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkInterface.__pulumiType;
    }

    /**
     * Specifies whether to bring up this interface on boot.
     */
    public readonly auto!: pulumi.Output<boolean>;
    /**
     * Name of the (physical or virtual) device. This name is what the device is known as in LuCI or the `name` field in
     * Terraform. This is not the UCI config name.
     */
    public readonly device!: pulumi.Output<string>;
    /**
     * Disables this interface.
     */
    public readonly disabled!: pulumi.Output<boolean>;
    /**
     * DNS servers
     */
    public readonly dns!: pulumi.Output<string[]>;
    /**
     * Gateway of the interface
     */
    public readonly gateway!: pulumi.Output<string>;
    /**
     * Delegate a prefix of given length to this interface
     */
    public readonly ip6assign!: pulumi.Output<number>;
    /**
     * IP address of the interface
     */
    public readonly ipaddr!: pulumi.Output<string>;
    /**
     * Override the MAC Address of this interface.
     */
    public readonly macaddr!: pulumi.Output<string>;
    /**
     * Override the default MTU on this interface.
     */
    public readonly mtu!: pulumi.Output<number>;
    /**
     * Netmask of the interface
     */
    public readonly netmask!: pulumi.Output<string>;
    /**
     * Use DHCP-provided DNS servers.
     */
    public readonly peerdns!: pulumi.Output<boolean>;
    /**
     * The protocol type of the interface. Currently, only "dhcp, and "static" are supported.
     */
    public readonly proto!: pulumi.Output<string>;
    /**
     * Behavior for requesting address. Can only be one of "force", "try", or "none".
     */
    public readonly reqaddress!: pulumi.Output<string>;
    /**
     * Behavior for requesting prefixes. Currently, only "auto" is supported.
     */
    public readonly reqprefix!: pulumi.Output<string>;

    /**
     * Create a NetworkInterface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkInterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkInterfaceArgs | NetworkInterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkInterfaceState | undefined;
            resourceInputs["auto"] = state ? state.auto : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["dns"] = state ? state.dns : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["ip6assign"] = state ? state.ip6assign : undefined;
            resourceInputs["ipaddr"] = state ? state.ipaddr : undefined;
            resourceInputs["macaddr"] = state ? state.macaddr : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["netmask"] = state ? state.netmask : undefined;
            resourceInputs["peerdns"] = state ? state.peerdns : undefined;
            resourceInputs["proto"] = state ? state.proto : undefined;
            resourceInputs["reqaddress"] = state ? state.reqaddress : undefined;
            resourceInputs["reqprefix"] = state ? state.reqprefix : undefined;
        } else {
            const args = argsOrState as NetworkInterfaceArgs | undefined;
            if ((!args || args.device === undefined) && !opts.urn) {
                throw new Error("Missing required property 'device'");
            }
            if ((!args || args.proto === undefined) && !opts.urn) {
                throw new Error("Missing required property 'proto'");
            }
            resourceInputs["auto"] = args ? args.auto : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["dns"] = args ? args.dns : undefined;
            resourceInputs["gateway"] = args ? args.gateway : undefined;
            resourceInputs["ip6assign"] = args ? args.ip6assign : undefined;
            resourceInputs["ipaddr"] = args ? args.ipaddr : undefined;
            resourceInputs["macaddr"] = args ? args.macaddr : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["netmask"] = args ? args.netmask : undefined;
            resourceInputs["peerdns"] = args ? args.peerdns : undefined;
            resourceInputs["proto"] = args ? args.proto : undefined;
            resourceInputs["reqaddress"] = args ? args.reqaddress : undefined;
            resourceInputs["reqprefix"] = args ? args.reqprefix : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkInterface.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkInterface resources.
 */
export interface NetworkInterfaceState {
    /**
     * Specifies whether to bring up this interface on boot.
     */
    auto?: pulumi.Input<boolean>;
    /**
     * Name of the (physical or virtual) device. This name is what the device is known as in LuCI or the `name` field in
     * Terraform. This is not the UCI config name.
     */
    device?: pulumi.Input<string>;
    /**
     * Disables this interface.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * DNS servers
     */
    dns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Gateway of the interface
     */
    gateway?: pulumi.Input<string>;
    /**
     * Delegate a prefix of given length to this interface
     */
    ip6assign?: pulumi.Input<number>;
    /**
     * IP address of the interface
     */
    ipaddr?: pulumi.Input<string>;
    /**
     * Override the MAC Address of this interface.
     */
    macaddr?: pulumi.Input<string>;
    /**
     * Override the default MTU on this interface.
     */
    mtu?: pulumi.Input<number>;
    /**
     * Netmask of the interface
     */
    netmask?: pulumi.Input<string>;
    /**
     * Use DHCP-provided DNS servers.
     */
    peerdns?: pulumi.Input<boolean>;
    /**
     * The protocol type of the interface. Currently, only "dhcp, and "static" are supported.
     */
    proto?: pulumi.Input<string>;
    /**
     * Behavior for requesting address. Can only be one of "force", "try", or "none".
     */
    reqaddress?: pulumi.Input<string>;
    /**
     * Behavior for requesting prefixes. Currently, only "auto" is supported.
     */
    reqprefix?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkInterface resource.
 */
export interface NetworkInterfaceArgs {
    /**
     * Specifies whether to bring up this interface on boot.
     */
    auto?: pulumi.Input<boolean>;
    /**
     * Name of the (physical or virtual) device. This name is what the device is known as in LuCI or the `name` field in
     * Terraform. This is not the UCI config name.
     */
    device: pulumi.Input<string>;
    /**
     * Disables this interface.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * DNS servers
     */
    dns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Gateway of the interface
     */
    gateway?: pulumi.Input<string>;
    /**
     * Delegate a prefix of given length to this interface
     */
    ip6assign?: pulumi.Input<number>;
    /**
     * IP address of the interface
     */
    ipaddr?: pulumi.Input<string>;
    /**
     * Override the MAC Address of this interface.
     */
    macaddr?: pulumi.Input<string>;
    /**
     * Override the default MTU on this interface.
     */
    mtu?: pulumi.Input<number>;
    /**
     * Netmask of the interface
     */
    netmask?: pulumi.Input<string>;
    /**
     * Use DHCP-provided DNS servers.
     */
    peerdns?: pulumi.Input<boolean>;
    /**
     * The protocol type of the interface. Currently, only "dhcp, and "static" are supported.
     */
    proto: pulumi.Input<string>;
    /**
     * Behavior for requesting address. Can only be one of "force", "try", or "none".
     */
    reqaddress?: pulumi.Input<string>;
    /**
     * Behavior for requesting prefixes. Currently, only "auto" is supported.
     */
    reqprefix?: pulumi.Input<string>;
}
